package degreeplan

import (
    "github.com/michalhercik/RecSIS/utils"
    "strconv"
)

func hoursExamsString(lecture, seminar int, examType string) string {
    return strconv.Itoa(lecture) + "/" + strconv.Itoa(seminar) + ", " + examType
}

func winterString(course *Course) string {
    winterText := ""
    if course.Start == teachingWinterOnly || (course.Start == teachingBoth && course.SemesterCount == 1) {
        winterText = hoursExamsString(course.LectureRange1, course.SeminarRange1, course.ExamType)
    } else if course.Start == teachingSummerOnly && course.SemesterCount == 1 {
        winterText =  "---"
    } else if course.Start == teachingSummerOnly && course.SemesterCount == 2 {
        winterText =  hoursExamsString(course.LectureRange2, course.SeminarRange2, course.ExamType)
    } else {
        winterText =  "unsupported"
    }
    return winterText
}

func summerString(course *Course) string {
    summerText := ""
    if course.Start == teachingSummerOnly || (course.Start == teachingBoth && course.SemesterCount == 1) {
        summerText = hoursExamsString(course.LectureRange1, course.SeminarRange1, course.ExamType)
    } else if course.Start == teachingWinterOnly && course.SemesterCount == 2 {
        summerText = hoursExamsString(course.LectureRange2, course.SeminarRange2, course.ExamType)
    } else if course.Start == teachingWinterOnly && course.SemesterCount == 1 {
        summerText = "---"
    } else {
        summerText = "unsupported"
    }
    return summerText
}

templ winterSummer(course *Course) {
    switch course.SemesterCount {
    case 1:
        switch course.Start {
        case 1:
            <td>---</td>
        case 2:
            <td>{ hoursExamsString(course.LectureRange1, course.SeminarRange1, course.ExamType) }</td>
        case 3:
            <td>{ hoursExamsString(course.LectureRange1, course.SeminarRange1, course.ExamType) }</td>
        default:
            <td>unsupported</td>
        }
    case 2:
        switch course.Start {
        case 1:
            <td>{ hoursExamsString(course.LectureRange2, course.SeminarRange2, course.ExamType) }</td>
        case 2:
            <td>{ hoursExamsString(course.LectureRange1, course.SeminarRange1, course.ExamType) }</td>
        case 3:
            <td>unsupported</td>
        default:
            <td>unsupported</td>
        }
    default:
        <td>unsupported</td>
    }
}

templ Page(dp *DegreePlan, t text) {
    @utils.Page(t.Utils.DegreePlan, t.Utils) {
        <div class="container">
            @Content(dp, t)
        </div>
    }
}

templ Content(dp *DegreePlan, t text) {
    <br> // TODO: if there is better solution to add space, then delete this line
    for _, bloc := range dp.blocs {
        {{
            inBLueprintCredits := 0
            for _, course := range bloc.Courses {
                if course.InBlueprint {
                    inBLueprintCredits += course.Credits
                }
            }
        }}
        <div class="d-flex justify-content-between align-items-center">
            <h5>{ utils.CapitalizeFirstLetter(bloc.Name) }</h5>
            <div>
                <p
                    class="me-2"
                    style="color: rgb(4, 108, 181); display: inline-block;">
                    { strconv.Itoa(inBLueprintCredits) + "/" + strconv.Itoa(bloc.Limit) }
                </p>
                <p
                    class="me-2"
                    style="color: rgb(19, 92, 4); display: inline-block;">
                    { "0/" + strconv.Itoa(bloc.Limit) }
                </p>
            </div>
        </div>
        <table class="table degree-plan-table">
            <thead>
                <tr>
                    <th>{ t.Code }</th>
                    <th>{ t.Title }</th>
                    <th class="text-end">{ t.Credits }</th>
                    <th>{ t.Winter }</th>
                    <th>{ t.Summer }</th>
                    <th>{ t.Blueprint }</th>
                </tr>
            </thead>
            <tbody> // x-data is necessary for x-bind:class
            for _, course := range bloc.Courses {
                <tr x-data={ "{ inBlueprint: " + strconv.FormatBool(course.InBlueprint) + " }" }>
                    <td
                        :class="inBlueprint && 'in-blueprint'">
                        @utils.CourseLink(course.Code, t.Utils)
                    </td>
                    <td
                        :class="inBlueprint && 'in-blueprint'">
                        { course.Title }
                    </td>
                    <td
                        class="credits-column text-end"
                        :class="inBlueprint && 'in-blueprint'">
                        { strconv.Itoa(course.Credits) }
                    </td>
                    <td
                        :class="inBlueprint && 'in-blueprint'">
                        { winterString(&course) }
                    </td>
                    <td
                        :class="inBlueprint && 'in-blueprint'">
                        { summerString(&course) }
                    </td>
                    <td
                        :class="inBlueprint && 'in-blueprint'">
                        <button class="btn btn-sm btn-outline-dark">TODO</button>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    }
}