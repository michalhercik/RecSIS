package degreeplan

import (
    "github.com/michalhercik/RecSIS/utils"
    "strconv"
)

func examTypeStr(examType string) string {
    // to add: STEX, thesis, ...
    switch examType {
    case "Z":
        return "C" // Z
    case "1":
        return "??" // do not know
    case "F":
        return "MC" // KZ
    case "D":
        return "??" // do not know
    case "K":
        return "Ex" // Zk
    case "*":
        return "C+Ex" // Z+Zk
    default:
        return "unknown"
    }
}

func hoursExamsString(lecture, seminar int, examType string) string {
    return strconv.Itoa(lecture) + "/" + strconv.Itoa(seminar) + ", " + examTypeStr(examType)
}

templ winterSummer(course *Course) {
    switch course.SemesterCount {
    case 1:
        switch course.Start {
        case 1:
            <td>{ hoursExamsString(course.LectureRange1, course.SeminarRange1, course.ExamType) }</td>
            <td>---</td>
        case 2:
            <td>---</td>
            <td>{ hoursExamsString(course.LectureRange1, course.SeminarRange1, course.ExamType) }</td>
        case 3:
            <td>{ hoursExamsString(course.LectureRange1, course.SeminarRange1, course.ExamType) }</td>
            <td>{ hoursExamsString(course.LectureRange1, course.SeminarRange1, course.ExamType) }</td>
        default:
            <td>unsupported</td>
            <td>unsupported</td>
        }
    case 2:
        switch course.Start {
        case 1:
            <td>{ hoursExamsString(course.LectureRange1, course.SeminarRange1, course.ExamType) }</td>
            <td>{ hoursExamsString(course.LectureRange2, course.SeminarRange2, course.ExamType) }</td>
        case 2:
            <td>{ hoursExamsString(course.LectureRange2, course.SeminarRange2, course.ExamType) }</td>
            <td>{ hoursExamsString(course.LectureRange1, course.SeminarRange1, course.ExamType) }</td>
        case 3:
            <td>unsupported</td>
            <td>unsupported</td>
        default:
            <td>unsupported</td>
            <td>unsupported</td>
        }
    default:
        <td>unsupported</td>
        <td>unsupported</td>
    }
}

templ Page(dp *DegreePlan, t text) {
    @utils.Page(t.Utils.DegreePlan, t.Utils) {
        <div class="container">
            @Content(dp, t)
        </div>
    }
}

templ Content(dp *DegreePlan, t text) {
    for _, bloc := range dp.blocs {
        <div class="d-flex justify-content-between align-items-center">
            <h5>{ utils.CapitalizeFirstLetter(bloc.Name) }</h5>
            <div>
                <p
                    class="me-2"
                    style="color: rgb(4, 108, 181); display: inline-block;">
                    { "0/" + strconv.Itoa(bloc.Limit) }
                </p>
                <p
                    class="me-2"
                    style="color: rgb(19, 92, 4); display: inline-block;">
                    { "0/" + strconv.Itoa(bloc.Limit) }
                </p>
            </div>
        </div>
        <table class="table degree-plan-table">
            <thead>
                <tr>
                    <th>{ t.Code }</th>
                    <th>{ t.Title }</th>
                    <th class="text-end">{ t.Credits }</th>
                    <th>{ t.Winter }</th>
                    <th>{ t.Summer }</th>
                    <th>{ t.Blueprint }</th>
                </tr>
            </thead>
            <tbody>
            for _, course := range bloc.Courses {
                <tr>
                    <td>@utils.CourseLink(course.Code, t.Utils)</td>
                    <td>{ course.Name }</td>
                    <td class="credits-column text-end">{ strconv.Itoa(course.Credits) }</td>
                    @winterSummer(&course)
                    <td><button class="btn btn-sm btn-outline-dark">TODO</button></td>
                </tr>
            }
            </tbody>
        </table>
    }
}