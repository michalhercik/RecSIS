package blueprint

import (
    "github.com/michalhercik/RecSIS/utils"
    "strconv"
	"fmt"
)

const lastPosition = -1

templ optionMenu(yearCount int) {
    <div class="option-menu">
        <label>Number of years:</label>
        <button
            hx-delete="/blueprint/year"
            hx-target="main"
            :disabled={ strconv.Itoa(yearCount) + " <= 0" }>
            <i class="bi bi-dash"></i>
        </button>
        <label id="valueBox">{ strconv.Itoa(yearCount) }</label>
        <button
            hx-post="/blueprint/year"
            hx-target="main">
            <i class="bi bi-plus"></i>
        </button>

        <button @click="showUnassigned = !showUnassigned" x-text="showUnassigned ? 'Hide unassigned' : 'Show unassigned'"></button>

        <button>Credits<i class="bi bi-caret-down-fill"></i></button>
    </div>
}

func examTypeStr(examType string) string {
    // to add: STEX, thesis, ...
    switch examType {
    case "Z":
        return "C" // Z
    case "1":
        return "??" // do not know
    case "F":
        return "MC" // KZ
    case "D":
        return "??" // do not know
    case "K":
        return "Ex" // Zk
    case "*":
        return "C+Ex" // Z+Zk
    default:
        return "unknown"
    }
}

func hoursExamsString(lecture, seminar int, examType string) string {
    return strconv.Itoa(lecture) + "/" + strconv.Itoa(seminar) + ", " + examTypeStr(examType)
}

templ winterSummer(course *Course) {
    {{ semCount := course.semesterCount }}
    if semCount == 1 {
        switch course.start {
        case winter:
            <td>{ hoursExamsString(course.lectureRange1, course.seminarRange1, course.examType) }</td>
            <td>---</td>
        case summer:
            <td>---</td>
            <td>{ hoursExamsString(course.lectureRange1, course.seminarRange1, course.examType) }</td>
        case both:
            <td>{ hoursExamsString(course.lectureRange1, course.seminarRange1, course.examType) }</td>
            <td>{ hoursExamsString(course.lectureRange1, course.seminarRange1, course.examType) }</td>
        default:
            <td>---</td>
            <td>---</td>
        }
    }
    if semCount == 2 {
        switch course.start {
        case winter:
            <td>{ hoursExamsString(course.lectureRange1, course.seminarRange1, course.examType) }</td>
            <td>{ hoursExamsString(course.lectureRange2, course.seminarRange2, course.examType) }</td>
        case summer:
            <td>{ hoursExamsString(course.lectureRange2, course.seminarRange2, course.examType) }</td>
            <td>{ hoursExamsString(course.lectureRange1, course.seminarRange1, course.examType) }</td>
        case both:
            <td>unsupported</td>
            <td>unsupported</td>
        default:
            <td>---</td>
            <td>---</td>
        }
    }
}

templ assignMenu(course Course, semester Semester, yearCount int) {
    {{
        code := course.code
        xdata := "{ year: null"
        xdisabled := "!year"
        if semester == both {
            xdata += ", semester: null"
            xdisabled += " || !semester"
        }
        xdata += " }"
    }}
    // TODO: if there can be multiple of the same courses than this will be ambiguous, we must uniquely identify the course
    <div class="context-menu" x-show={ code + "open" } @click.outside={ code + "open = false" } x-data={ xdata }>
        <form 
            hx-patch={ fmt.Sprintf("/blueprint/course/%d", course.ID) } 
            hx-target="main" 
            if semester != both {
                hx-vals={ fmt.Sprintf(`"semester": %d`, int(course.start)) }
            }
        >
            <fieldset>
                <legend>Choose a year</legend>
                for i := 0; i < yearCount; i++ {
                    <label>
                        <input type="radio" name="year" value={strconv.Itoa(i + 1)} x-model="year" />
                        Year { strconv.Itoa(i + 1) }
                    </label>
                    <br/>
                }
            </fieldset>
            if semester == both {
            <fieldset>
                <legend>Choose a semester</legend>
                <label>
                    <input type="radio" name="semester" value={ strconv.Itoa(int(winter)) } x-model="semester" />
                    Winter
                </label>
                <br/>
                <label>
                    <input type="radio" name="semester" value={ strconv.Itoa(int(winter)) } x-model="semester" />
                    Summer
                </label>
            </fieldset>
            }
            <button type="submit" x-bind:disabled={ xdisabled }>Assign</button>
        </form>
    </div>
}

// TODO only if there is at least one
templ renderUnassigned(unassigned AcademicYear, yearCount int) {
    <table class="table table-sm blueprint-table">
        <thead class="table-secondary">
            <tr>
                <th></th>
                <th>Code</th>
                <th>Title</th>
                <th>Credits</th>
                <th>Winter</th>
                <th>Summer</th>
                <th>Teacher(s)</th>
                <th></th>
            </tr>
        </thead>
    </table>
    <div x-show="showUnassigned">
        //<h1>Unassigned courses</h1>
        <table class="table table-hover table-sm blueprint-table">
            // <thead>
            //     <tr>
            //         <th></th>
            //         <th>Code</th>
            //         <th>Title</th>
            //         <th>Credits</th>
            //         <th>Winter</th>
            //         <th>Summer</th>
            //         <th>Teacher(s)</th>
            //         //<th>Actions</th>
            //     </tr>
            // </thead>
            <tbody>
                for _, course := range unassigned.unassigned {
                    <tr id={ "code" + course.code } x-data="{ checked: false }" @click="if (!$event.target.closest('a')) { checked = !checked; $refs.checkbox.checked = checked }">
                        <td><input type="checkbox" name="course" value={ course.code } x-ref="checkbox" /></td>
                        <td> @utils.CourseLink(course.code) </td>
                        <td>{ course.nameEn }</td>
                        <td>{ strconv.Itoa(course.credits) }</td>
                        @winterSummer(&course)
                        <td> @templ.Raw(course.teachers.string()) </td>
                        <td></td> // TODO here will be buttons for del, unassign, ... - will be icons, show on hover
                        // <td>
                        //     <button
                        //         hx-delete={fmt.Sprintf("/blueprint/course/%d", course.ID)}
                        //         hx-target={"#code" + course.code}
                        //         hx-swap="delete">
                        //         Remove
                        //     </button>
                        //     <div x-data={ "{ " + course.code + "open: false }" } style="position: relative;">
                        //         <button @click={ course.code + "open = ! " + course.code + "open" }>Assign</button>
                        //         @assignMenu(course, course.start, yearCount)
                        //     </div>
                        // </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

// TODO only if there is at least one
templ renderCourseTable(courses []Course) {
    <table class="table table-hover table-sm blueprint-table">
        <tbody>
            for _, course := range courses {
                <tr x-data="{ checked: false }" @click="if (!$event.target.closest('a')) { checked = !checked; $refs.checkbox.checked = checked }">
                    <td><input type="checkbox" name="course" value={ course.code } x-ref="checkbox" /></td>
                    <td> @utils.CourseLink(course.code) </td>
                    <td>{ course.nameEn }</td>
                    <td>{ strconv.Itoa(course.credits) }</td>
                    @winterSummer(&course)
                    <td> @templ.Raw(course.teachers.string()) </td>
                    <td></td> // TODO here will be buttons for del, unassign, ... - will be icons, show on hover
                    //<td>
                        // TODO: implement
                        // <button>Move</button>
                        // TODO: the course is just moved to the end of unassigned, is it possible to just transfer it somehow and not reload the page?
                        // TODO: if there can be multiple of the same courses than this will be ambiguous, we must uniquely identify the course
                    //     <button
                    //         hx-patch={fmt.Sprintf("/blueprint/course/%d", course.ID)} 
                    //         hx-vals={ `"year": 0, "semester": 0` }
                    //         hx-target="main">
                    //         Unassign
                    //     </button>
                    // </td>
                </tr>
            }
        </tbody>
    </table>
}

templ tableHeadline(text string, credits int, year bool) {
    {{
        tdClass := ""
        tableClass := ""
        if year {
            tdClass = "yeartext"
            tableClass = "headline"
        } else {
            tdClass = "semtext"
        }
    }}
    <table class={ "table table-sm table-hover table-light blueprint-table " + tableClass }>
        <tbody>
            <tr x-data="{ checked: false }" @click="if (!$event.target.closest('a')) { checked = !checked; $refs.checkbox.checked = checked }">
                <td class="short"></td>
                <td class={ "short " + tdClass }>{ text }</td>
                <td class="short"></td>
                <td class={ "short " + tdClass }>{ strconv.Itoa(credits) }</td>
                <td class="short"></td>
                <td class="short"></td>
                <td class="short"></td>
                <td class="short"></td>
            </tr>
        </tbody>
    </table>
}

templ renderYear(year AcademicYear) {
    <div id={"BlueprintYear" + strconv.Itoa(year.position)}>
        @tableHeadline("Year " + strconv.Itoa(year.position), year.credits(), true)
        @tableHeadline("Winter", year.winterCredits(), false)
        @renderCourseTable(year.winter)
        @tableHeadline("Summer", year.summerCredits(), false)
        @renderCourseTable(year.summer)
    </div>
}

templ renderYears(years []AcademicYear) {
    //<h1>Blueprint</h1>
    // {{ 
    //     totalCredits := 0
    //     for _, year := range years {
    //         totalCredits += year.credits()
    //     }
    // }}
    // <div>Total credits: { strconv.Itoa(totalCredits) }</div>

    for _, year := range years {
        @renderYear(year)
    }
}

templ renderCreditTable(years []AcademicYear) {
    if len(years) > 0 {
    <h1>Credits</h1>

    <table id="CreditsSum">
        <thead>
            <tr>
                <th>Year</th>
                <th>Semester</th>
                <th>Credits</th>
            </tr>
        </thead>
        <tbody>
            {{ totalSum := 0 }}
            for _,year := range years {
                {{
                    totalSum += year.credits()
                    yearStr := strconv.Itoa(year.position)
                }}
                <tr id={"SumWinterYear" + yearStr}>
                    <td>{ yearStr }</td>
                    <td> Winter </td>
                    <td>{ strconv.Itoa(year.winterCredits()) }</td>
                </tr>
                <tr id={"SumSummerYear" + yearStr}>
                    <td>{ yearStr }</td>
                    <td> Summer </td>
                    <td>{ strconv.Itoa(year.summerCredits()) }</td>
                </tr>
            }
            <tr>
                <td colspan="2"> Total </td>
                <td>{ strconv.Itoa(totalSum) }</td>
            </tr>
        </tbody>
    </table>
    }
}

templ Content(data *Blueprint) {
    <div x-data="{ showUnassigned: true }" >
        @optionMenu(len(data.years) - 1)
        @renderUnassigned(data.years[0], len(data.years) - 1)
        if len(data.years) >= 2 {
            @renderYears(data.years[1:])
            @renderCreditTable(data.years[1:])
        }
    </div>
}

templ Page(data *Blueprint) {
    @utils.Page("Blueprint") {
        @Content(data)
    }
}

templ InternalServerErrorContent() {
    <h1>Internal Server Error</h1>
    <p>Something went wrong</p>
}

templ InternalServerErrorPage() {
    @utils.Page("Internal Server Error") {
        @InternalServerErrorContent()
    }
}