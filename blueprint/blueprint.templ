package blueprint

import (
    "github.com/michalhercik/RecSIS/utils"
    "strconv"
	"strings"
	"sort"
)

func ItoS(i int) string {
    return strconv.Itoa(i)
}

// TODO only if there is at least one
templ renderUnassigned(unassigned *[]Course) {
    // sort courses by name to ensure consistent order
    {{
        sort.Slice(*unassigned, func(i, j int) bool {
            return (*unassigned)[i].NameEng < (*unassigned)[j].NameEng
        })
    }}
    <h1>Unassigned courses</h1>

    <table>
        <thead>
            <tr>
                <th>Code</th>
                <th>Name</th>
                <th>Teacher(s)</th>
                <th>Semester</th>
                <th>Credits</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            for _, course := range *unassigned {
                <tr id={ "id" + course.Code }>
                    <td> @utils.CourseLink(course.Code, course.Code) </td>
                    <td>{ course.NameEng }</td>
                    <td>{ strings.Join(course.Teachers, ", ") }</td>
                    <td>{ course.Semester }</td>
                    <td>{ ItoS(course.Credits) }</td>
                    <td>
                        <button
                            hx-delete={"/blueprint/remove-unassigned/" + course.Code}
                            hx-target={"#id" + course.Code}
                            hx-swap="delete">
                            Remove
                        </button>
                        <button>Assign</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

templ renderCourseTable(courses *[]Course) {
    // sort courses by name to ensure consistent order
    {{
        sort.Slice(*courses, func(i, j int) bool {
            return (*courses)[i].NameEng < (*courses)[j].NameEng
        })
    }}
    <table>
        <thead>
            <tr>
                <th>Code</th>
                <th>Name</th>
                <th>Teacher(s)</th>
                <th>Semester</th>
                <th>Credits</th>
                <th>Edit palce</th>
            </tr>
        </thead>
        <tbody>
            for _, course := range *courses {
                <tr>
                    <td> @utils.CourseLink(ItoS(course.Id), course.Code) </td>
                    <td>{ course.NameEng }</td>
                    <td>{ strings.Join(course.Teachers, ", ") }</td>
                    <td>{ course.Semester }</td>
                    <td>{ ItoS(course.Credits) }</td>
                    <td>
                        <button>Edit</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

// TODO only if there is at least one
templ renderYears(years *map[int][]Course) {
    <h1>Blueprint</h1>
    {{ 
        totalCredits := 0
        for _, courses := range *years {
            for _, course := range courses {
                totalCredits += course.Credits
            }
        }
    }}
    <div>Total credits: { ItoS(totalCredits) }</div>

    for year := 1; year <= len(*years); year++ {
        {{ courses := (*years)[year] }}
        <div id={"BlueprintYear" + ItoS(year)}>
            <h2>Year { ItoS(year) }</h2>
            {{
                winterCourses := make([]Course, 0)
                winterCredits := 0
                summerCourses := make([]Course, 0)
                summerCredits := 0
                for _, course := range courses {
                    totalCredits += course.Credits
                    if course.Semester == "Winter" {
                        winterCourses = append(winterCourses, course)
                        winterCredits += course.Credits
                    } else {
                        summerCourses = append(summerCourses, course)
                        summerCredits += course.Credits
                    }
                }
            }}
            <div>Credits: { ItoS(winterCredits + summerCredits) }</div>
            <h3>Winter Semester</h3>
            <div>Credits: { ItoS(winterCredits) }</div>
            @renderCourseTable(&winterCourses)
            <h3>Summer Semester</h3>
            <div>Credits: { ItoS(summerCredits) }</div>
            @renderCourseTable(&summerCourses)
       </div>
    }
    if len(*years) > 0 {
    <button
        hx-swap="outerHTML"
        hx-post={"/blueprint/remove-year/" + ItoS(len(*years))}
        hx-target="this">
        Remove last year
    </button>
    }
    <button hx-post="/blueprint/add-year">Add year</button>
}

templ renderCreditTable(years *map[int][]Course) {
    if len(*years) > 0 {
    <h1>Credits</h1>

    <table id="CreditsSum">
        <thead>
            <tr>
                <th>Year</th>
                <th>Semester</th>
                <th>Credits</th>
            </tr>
        </thead>
        <tbody>
            {{ totalSum := 0 }}
            for year := 1; year <= len(*years); year++ {
                {{
                    courses := (*years)[year]
                    creditsBySemester := make(map[string]int)
                    for _, course := range courses {
                        creditsBySemester[course.Semester] += course.Credits
                        totalSum += course.Credits
                    }
                    yearStr := ItoS(year)
                }}
                <tr id={"SumWinterYear" + yearStr}>
                    <td>{ yearStr }</td>
                    <td> Winter </td>
                    <td>{ ItoS(creditsBySemester["Winter"]) }</td>
                </tr>
                <tr id={"SumSummerYear" + yearStr}>
                    <td>{ yearStr }</td>
                    <td> Summer </td>
                    <td>{ ItoS(creditsBySemester["Summer"]) }</td>
                </tr>
            }
            <tr>
                <td colspan="2"> Total </td>
                <td>{ ItoS(totalSum) }</td>
            </tr>
        </tbody>
    </table>
    }
}

templ Content(data *BlueprintData) {
    @renderUnassigned(&data.unassigned)
    @renderYears(&data.years)
    @renderCreditTable(&data.years)
}

templ Page(data *BlueprintData) {
    @utils.Page("Blueprint") {
        @Content(data)
    }
}