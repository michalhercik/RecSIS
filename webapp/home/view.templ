package home

import "fmt"
import "strings"

templ Content(hp *homePage, t text) {
	<div
		id="home-page"
		class="container pt-3"
		x-data="{ visibleCards: 0, recVisibleOffset: 0, newVisibleOffset: 0 }"
		x-init="setCardsWidth(); visibleCards = calculateVisibleCards();"
		@load.window="setCardsWidth(); visibleCards = calculateVisibleCards();"
		@resize.window="setCardsWidth(); visibleCards = calculateVisibleCards();"
	>
		<div class="pb-4">
			<h4>{ t.recommendedCourses }</h4>
			@courseCardsRow("rec", hp.recommendedCourses, t)
		</div>
		<div class="pb-4">
			<h4>{ t.newCourses }</h4>
			@courseCardsRow("new", hp.newCourses, t)
		</div>
		@scripts()
	</div>
}

templ Recommended(model recommendedModel, t text) {
	<div
		class="container pt-3"
		>
		<div class="d-flex align-items-center gap-2 mb-2">
			<h3 class="mb-0">Recommended by: </h3>
			<form x-ref="algoForm" method="get" action={ templ.SafeURL(t.language.LocalizeURL("/recommended")) }
					hx-trigger="change from:input"
					x-data={ fmt.Sprintf(`{
						search: '%s',
						suggestions: ['%s'],
						showSuggestions: false,

						get filteredSuggestions() {
							return this.suggestions.filter(
								i => i.startsWith(this.search)
							)
						}
					}`, model.algo, strings.Join(model.algoSuggestions, "','")) }
			>
				<div class="d-flex align-items-center gap-2 mb-2">
					<div 
						class="dropdown"
					>
						<input 
							id="algo"
							x-model="search"
							name="algo" 
							type="text" 
							class="form-control" 
							style="min-width: 200px;" 
							style="max-width: 250px;" 
							placeholder="Enter algorithm name" 
							autocomplete="off"
							value={ model.algo }
							@focus="showSuggestions = true"
							@blur="setTimeout(() => showSuggestions = false, 100)"
						>
						<div 
							class="dropdown-menu show"
							x-show="showSuggestions && filteredSuggestions.length > 0"
							x-cloak
						>
							<template x-for="suggestion in filteredSuggestions" :key="suggestion">
								<div 
									class="dropdown-item"
									@click="
										search = suggestion;
										setTimeout(() => $refs.algoForm.submit(), 100);
									"
									x-text="suggestion"
								>
								</div>
							</template>	
						</div>
					</div>
					<label for="limit" class="form-label mb-0 ms-2">Limit:</label>
					<input 
						name="limit" 
						type="number" 
						min="5"
						max="30"
						step="5"
						value={ fmt.Sprintf("%d", model.limit) }
						class="form-control" 
					>
				</div>
			</form>
		</div>
		<div class="row row-cols-3 row-cols-md-4 row-cols-xl-5 row-cols-xxl-6 g-0">
			for _, c := range model.courses {
				<div class="card small-card">
					<div class="card-header lh-1 py-1">
						<div class="d-flex justify-content-between w-100">
							<h6 class="mb-0">{ c.Code }</h6>
							<small>{ fmt.Sprintf("%s: %d", t.credits, c.Credits) }</small>
						</div>
						<div class="text-center w-100">
							<small>{ fmt.Sprintf("%s %s, %s", c.Semester.string(t), c.hoursString(), c.ExamType) }</small>
						</div>
					</div>
					<div class="card-body justify-content-between d-flex flex-column h-100">
						<h6 class="card-title pb-1">
							@titleCourseLink(c.Code, c.Title, t)
						</h6>
						<h6 class="card-subtitle text-muted">{ c.Guarantors.string(t) }</h6>
					</div>
				</div>
			}
		</div>
	</div>
}

templ courseCardsRow(ID string, courses []course, t text) {
	<div class="d-flex justify-content-between align-items-center pt-2">
		@chevronLeftBtn(ID)
		<div id={ fmt.Sprintf("course-cards-row-%s", ID) } class="d-flex flex-row flex-no-wrap overflow-hidden w-100 gap-1 px-1">
			for i, c := range courses {
				<div class="card small-card" x-cloak x-show={ fmt.Sprintf("(%sVisibleOffset <= %d && %d < %sVisibleOffset + visibleCards)", ID, i, i, ID) }>
					<div class="card-header lh-1 py-1">
						<div class="d-flex justify-content-between w-100">
							<h6 class="mb-0">{ c.Code }</h6>
							<small>{ fmt.Sprintf("%s: %d", t.credits, c.Credits) }</small>
						</div>
						<div class="text-center w-100">
							<small>{ fmt.Sprintf("%s %s, %s", c.Semester.string(t), c.hoursString(), c.ExamType) }</small>
						</div>
					</div>
					<div class="card-body justify-content-between d-flex flex-column h-100">
						<h6 class="card-title pb-1">
							@titleCourseLink(c.Code, c.Title, t)
						</h6>
						<h6 class="card-subtitle text-muted">{ c.Guarantors.string(t) }</h6>
					</div>
				</div>
			}
		</div>
		@chevronRightBtn(ID, len(courses)-1)
	</div>
}

templ titleCourseLink(code, title string, t text) {
	<a
		class="link-body-emphasis link-underline-opacity-0 link-underline-opacity-75-hover"
		href={ templ.SafeURL(t.language.LocalizeURL("/course/" + code)) }
	>
		{ title }
	</a>
}

templ chevronLeftBtn(ID string) {
	<button
		class="btn btn-primary px-0 py-2"
		:class={ fmt.Sprintf("{ 'disabled': %sVisibleOffset <= 0 }", ID) }
		@click={ fmt.Sprintf("%sVisibleOffset = Math.max(0, %sVisibleOffset - visibleCards)", ID, ID) }
	>
		<i class="bi bi-chevron-compact-left fs-4"></i>
	</button>
}

templ chevronRightBtn(ID string, maxOffset int) {
	<button
		class="btn btn-primary px-0 py-2"
		:class={ fmt.Sprintf("{ 'disabled': %sVisibleOffset + visibleCards >= %d }", ID, maxOffset) }
		@click={ fmt.Sprintf("%sVisibleOffset += visibleCards", ID) }
	>
		<i class="bi bi-chevron-compact-right fs-4"></i>
	</button>
}
