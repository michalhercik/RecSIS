package home

import "fmt"

templ Content(hp *homePage, t text) {
	<div
		id="home-page"
		class="container pt-3"
		x-data="{ visibleCards: 0, recVisibleOffset: 0, newVisibleOffset: 0 }"
		x-init="setCardsWidth(); visibleCards = calculateVisibleCards();"
		@load.window="setCardsWidth(); visibleCards = calculateVisibleCards();"
		@resize.window="setCardsWidth(); visibleCards = calculateVisibleCards();"
	>
		<h4>{ t.welcome }</h4>
		<p>{ t.recsisIntro }</p>
		<div class="pb-4">
			<h4>{ t.recommendedCourses }</h4>
			@courseCardsRow("rec", hp.recommendedCourses, t)
		</div>
		<div class="pb-4">
			<h4>{ t.newCourses }</h4>
			@courseCardsRow("new", hp.newCourses, t)
		</div>
		@scripts()
	</div>
}

templ courseCardsRow(ID string, courses []course, t text) {
	<div class="d-flex justify-content-between align-items-center pt-2">
		@chevronLeftBtn(ID)
		<div id={ fmt.Sprintf("course-cards-row-%s", ID) } class="d-flex flex-row flex-no-wrap overflow-hidden w-100 gap-1 px-1">
			for i, c := range courses {
				<div class="card small-card" x-cloak x-show={ fmt.Sprintf("(%sVisibleOffset <= %d && %d < %sVisibleOffset + visibleCards)", ID, i, i, ID) }>
					<div class="card-header lh-1 py-1">
						<div class="d-flex justify-content-between w-100">
							<h6 class="mb-0">{ c.Code }</h6>
							<small>{ fmt.Sprintf("%s: %d", t.credits, c.Credits) }</small>
						</div>
						<div class="text-center w-100">
							<small>{ fmt.Sprintf("%s %s, %s", c.Semester.string(t), c.hoursString(), c.ExamType) }</small>
						</div>
					</div>
					<div class="card-body justify-content-between d-flex flex-column h-100">
						<h6 class="card-title pb-1">
							@titleCourseLink(c.Code, c.Title, t)
						</h6>
						<h6 class="card-subtitle text-muted">{ c.Guarantors.string(t) }</h6>
					</div>
				</div>
			}
		</div>
		@chevronRightBtn(ID, len(courses)-1)
	</div>
}

templ titleCourseLink(code, title string, t text) {
	<a
		class="link-body-emphasis link-underline-opacity-0 link-underline-opacity-75-hover"
		href={ templ.SafeURL(t.language.LocalizeURL("/course/" + code)) }
	>
		{ title }
	</a>
}

templ chevronLeftBtn(ID string) {
	<button
		class="btn btn-primary px-0 py-2"
		:class={ fmt.Sprintf("{ 'disabled': %sVisibleOffset <= 0 }", ID) }
		@click={ fmt.Sprintf("%sVisibleOffset = Math.max(0, %sVisibleOffset - visibleCards)", ID, ID) }
	>
		<i class="bi bi-chevron-compact-left fs-4"></i>
	</button>
}

templ chevronRightBtn(ID string, maxOffset int) {
	<button
		class="btn btn-primary px-0 py-2"
		:class={ fmt.Sprintf("{ 'disabled': %sVisibleOffset + visibleCards >= %d }", ID, maxOffset) }
		@click={ fmt.Sprintf("%sVisibleOffset += visibleCards", ID) }
	>
		<i class="bi bi-chevron-compact-right fs-4"></i>
	</button>
}
