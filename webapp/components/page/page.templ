package page

import (
	"github.com/michalhercik/RecSIS/language"
    "fmt"
)

templ PageView(model pageModel) {
    <!DOCTYPE html>
    <html lang={ string(model.lang) }>
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>{ model.title + " | RecSIS" }</title>
            // icons
            <link rel="icon" type="image/svg+xml" href="/logo.svg"> // modern icon using vector graphics
            <link rel="icon" type="image/png" sizes="256x256" href="/favicon-256x256.png"> // fallback for older browsers
            // css
            <link rel="stylesheet" href="/style.css">
            // bootstrap
            <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
            <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css"> // icons
            <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
            // htmx
            <script src="https://unpkg.com/htmx.org@2.0.3" integrity="sha384-0895/pl2MU10Hqc6jd4RvrthNlDiE9U1tWmX7WRESftEDRosgxNsQG/Ze9YMRzHq" crossorigin="anonymous"></script>
            <script src="https://cdn.jsdelivr.net/npm/htmx-ext-response-targets@2.0.2" integrity="sha384-aiAPowx3gG+h620/TJLIfLPgBcn6DMWlhu45oOhWVwTOjds9E6X2pmGbT4Xc8XMJ" crossorigin="anonymous"></script>

            // alpine js
            <script defer src="https://cdn.jsdelivr.net/npm/@alpinejs/sort@3.x.x/dist/cdn.min.js"></script> // drag and drop
            <script defer src="https://cdn.jsdelivr.net/npm/@alpinejs/intersect@3.x.x/dist/cdn.min.js"></script> // intersection observer
            <script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>
            // Google Fonts
            <link href="https://fonts.googleapis.com/css2?family=Saira:wght@400;700&display=swap" rel="stylesheet">
            <script src="/js/page.js"></script>
        </head>
        <body hx-boost="true" hx-ext="response-targets" class="position-relative">
            @Header(model)
            <main>
                <div id="error-content"></div>
                <div id="main-content">
                    @model.main
                </div>
                for _, navItem := range model.navItems {
                    if navItem.Skeleton != nil {
                        @navItem.Skeleton(model.lang)
                    }
                }
            </main>
            @Footer(model)
            <div id="loader" class="spinner-border text-dark" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <div id="page-overlay"></div>
            <div id="explicit-no-loader"></div>
        </body>
    </html>
}

templ Header(model pageModel) {
    <header class="sticky-top">
        <nav class="navbar navbar-expand-lg navbar-light bg-navbar py-2 py-md-0" hx-indicator="#loader">
            <div class="container position-relative">
                @navBrand(model)
                <button class="navbar-toggler pb-0 px-1 border-0 align-bottom" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarNav">
                    // x-data is necessary for x-on:click to work
                    <div class="navbar-nav me-auto" x-data={ fmt.Sprintf("{ title: '%s' }", model.title) }>
                        for _, navItem := range model.navItems {
                            @navItemView(navItem, model)
                        }
                    </div>
                    <div class="d-flex justify-content-between flex-row-reverse flex-lg-row py-2 py-lg-0">
                        @profileBtn(model, model.text)
                        switch model.lang {
                            case language.CS:
                                @langBtn(language.EN)
                            case language.EN:
                                @langBtn(language.CS)
                        }
                    </div>
                </div>
                @SearchBar(model)
            </div>
        </nav>
    </header>
}

templ navBrand(model pageModel) {
    <a
        class="navbar-brand d-flex align-items-center fs-3 mff-font"
        href={ templ.SafeURL(model.lang.LocalizeURL(model.home)) }
        @click={ fmt.Sprintf("if (!event.ctrlKey) { clearExpanded(); title = '%s'; hideMain(); }", model.navItems[0].Title.String(model.lang)) }
        data-bs-toggle="collapse"
        data-bs-target=".navbar-collapse.show"
        hx-indicator={ model.navItems[0].Indicator }
    >
        <img src="/logo.svg" alt="Logo" height="30" class="mb-1 pe-1">
        <span class="d-none d-md-inline">RecSIS</span>
    </a>
}

templ navItemView(nav NavItem, model pageModel) {
    <a
        class="nav-item nav-link nav-item-font pb-0 pb-lg-2"
        :class={ fmt.Sprintf("{ 'active': title == '%s' }", nav.Title.String(model.lang)) }
        href={ templ.SafeURL(model.lang.LocalizeURL(nav.Path)) }
        @click={ fmt.Sprintf("if (!event.ctrlKey) { clearExpanded(); title = '%s'; hideMain(); }", nav.Title.String(model.lang)) }
        data-bs-toggle="collapse"
        data-bs-target=".navbar-collapse.show"
        hx-indicator={ nav.Indicator }>
        { nav.Title.String(model.lang) }
    </a>
}

templ SearchBar(model pageModel) {
    // action="." is for mobile browsers
    <div
        x-cloak
        id="search-bar-container"
        class="position-absolute d-flex">
        <form
            id="search-form"
            class="w-100"
            hx-get={ model.lang.LocalizeURL(model.searchEndpoint) }
            hx-target="body"
            hx-swap="show:top"
            hx-push-url="true"
            if model.includeFilters {
                hx-include="#filter-form"
            }
            @submit="$refs.searchInput.blur()"
            x-data="{ searchInput: '', quickResOpen: false }"
            x-init={ fmt.Sprintf("searchInput = '%s';", model.searchInput) }
            action="."
        >
            <div class="justify-content-center">
                <div class="dropdown" @click.outside="quickResOpen = false">
                    <div class="input-group rounded-input position-relative">
                        <input
                            type="text"
                            id="search"
                            class="form-control"
                            name={ model.searchParam }
                            placeholder={ model.text.searchPlaceholder }
                            autocomplete="off"
                            x-model="searchInput"
                            x-ref="searchInput"
                            @keyup.slash.outside="$el.focus(); $el.selectionStart = $el.selectionEnd = $el.value.length;"
                            @keyup.escape="$el.blur(); quickResOpen = false"
                            @focus="quickResOpen = true"
                            hx-get={ model.lang.LocalizeURL("/page/quicksearch") }
                            hx-trigger="input changed delay:200ms, focus once"
                            hx-target="#quick-search-results"
                            hx-swap="outerHTML"
                            hx-push-url="false"
                            hx-indicator="#explicit-no-loader"
                        />
                        <button
                            type="reset"
                            x-cloak x-show="searchInput.length > 0"
                            class="btn bg-white border-0 position-absolute navbar-clear-search-btn"
                            @click="searchInput = ''; quickResOpen = false; $refs.searchInput.focus();">
                            <i class="bi bi-x-lg"></i>
                        </button>
                        <button
                            type="submit"
                            class="btn btn-submit-input-green d-none d-sm-inline"
                            @click="quickResOpen = false">
                            <span class="d-none d-xl-inline">{ model.text.searchButton }</span>
                            <i class="bi bi-search d-inline d-xl-none"></i>
                        </button>
                    </div>
                    @quickResults()
                </div>
            </div>
        </form>
    </div>
}

templ QuickResults(model quickResultsModel) {
    @quickResults() {
        <div
            x-cloak
            x-show="quickResOpen && searchInput.length > 0"
            class="dropdown-menu w-100 shadow-sm show"
        >
            if len(model.courses) == 0 {
                <div class="dropdown-item text-muted responsive-font">{ model.t.noCoursesFound }</div>
            } else {
                for _, course := range model.courses {
                    <a
                        href={ templ.SafeURL(model.lang.LocalizeURL(model.resultDetailEndpoint(course.code))) }
                        class="dropdown-item text-truncate responsive-font"
                        hx-boost="false"
                        tabindex="0"
                        @click="quickResOpen = false"
                    >
                        { course.code + " - " + course.name }
                    </a>
                }
            }
        </div>
    }
}

templ quickResults() {
    <div id="quick-search-results">
        { children... }
    </div>
}

templ langBtn(l language.Language) {
    <button
        class="btn btn-outline-secondary align-self-start border-0"
        x-data @click={ "changeLanguage('" + string(l) + "')" }>
        { string(l) }
    </button>
}

templ profileBtn(model pageModel, t text) {
    @profileBtnForMobiles(model, t)
    @profileBtnForDesktop(model, t)
}

templ profileBtnForMobiles(model pageModel, t text) {
    <div class="d-lg-none">
        <div class="d-flex justify-content-end">
            <button
                type="button"
                class="btn btn-outline-secondary bi bi-person-circle border-0"
                data-bs-toggle="collapse" data-bs-target="#userCollapse" aria-expanded="false">
            </button>
        </div>
        <div class="collapse" id="userCollapse">
            <ul class="list-unstyled ps-3">
                @userID(model.userID)
                <hr>
                @logout(model.text, model.lang)
            </ul>
        </div>
    </div>

}

templ profileBtnForDesktop(model pageModel, t text) {
    <li class="dropdown d-none d-lg-block">
        <button
            type="button"
            class="btn btn-outline-secondary bi bi-person-circle border-0"
            data-bs-toggle="dropdown" aria-expanded="false">
        </button>
        <ul class="dropdown-menu dropdown-menu-end">
            @userID(model.userID)
            <li><hr class="dropdown-divider"></li>
            @logout(model.text, model.lang)
        </ul>
    </li>
}

templ userID(userID string) {
    <li>
        <span class="dropdown-item disabled text-center">{ userID }</span>
    </li>
}

templ logout(t text, lang language.Language) {
    <li>
        <form hx-boost="false" method="POST" action={ templ.SafeURL(lang.LocalizeURL("/logout")) }>
            <button type="submit" class="dropdown-item text-center"><i class="bi bi-box-arrow-right"></i> { t.logout }</button>
        </form>
    </li>
}

templ Footer(model pageModel) {
    {{ const email = "recsis@email.cz"}}
    <footer class="text-center text-body-secondary pb-3 position-absolute bottom-0 w-100">
        <hr/>
        { model.text.contact }
        <a href={ templ.SafeURL(fmt.Sprintf("mailto:%s", email)) }>{ email }</a>
    </footer>
}