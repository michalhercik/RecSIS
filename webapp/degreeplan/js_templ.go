// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.865
package degreeplan

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func scripts() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<script>\n\t\tsetupCheckboxShiftClick();\n\t\tupdateStickyOffset();\n\t\tinitializeTooltips();\n\n\t\t// shift click for multiple checkboxes\n\t\tfunction setupCheckboxShiftClick() {\n\t\t\tlet lastChecked = null;\n\t\t\tconst checkboxes = document.querySelectorAll('input[type=\"checkbox\"][name=\"selected-courses\"]');\n\t\t\tcheckboxes.forEach(checkbox => {\n\t\t\t\tcheckbox.addEventListener('click', function (e) {\n\t\t\t\t\tif (lastChecked && lastChecked !== this && e.shiftKey) {\n\t\t\t\t\t\tlet inBetween = false;\n\t\t\t\t\t\tcheckboxes.forEach(box => {\n\t\t\t\t\t\t\tif (box === this || box === lastChecked) {\n\t\t\t\t\t\t\t\tinBetween = !inBetween;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (inBetween && box.checked !== this.checked) {\n\t\t\t\t\t\t\t\tbox.checked = this.checked;\n\t\t\t\t\t\t\t\tbox.dispatchEvent(new Event('change'));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tif (lastChecked.checked !== this.checked) {\n\t\t\t\t\t\t\tlastChecked.checked = this.checked;\n\t\t\t\t\t\t\tlastChecked.dispatchEvent(new Event('change'));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tlastChecked = this;\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\t// pass through (shift-)click event to checkbox\n\t\tfunction handleCircleClick(event) {\n\t\t\tconst checkbox = event.target.parentElement.previousElementSibling;\n\t\t\tif (checkbox) {\n\t\t\t\t// Create a new MouseEvent, preserving shift key and other properties\n\t\t\t\tconst clickEvent = new MouseEvent('click', {\n\t\t\t\t\tbubbles: true,\n\t\t\t\t\tcancelable: true,\n\t\t\t\t\tshiftKey: event.shiftKey,\n\t\t\t\t});\n\n\t\t\t\tcheckbox.dispatchEvent(clickEvent);\n\t\t\t}\n\t\t}\n\n\t\t// pass through click event to checkbox on small screens\n\t\tfunction handleTdClick(event) {\n\t\t\tconst checkbox = event.target.querySelector('input[type=\"checkbox\"][name=\"selected-courses\"]');\n\t\t\tif (checkbox) {\n\t\t\t\t// Create a new MouseEvent, preserving shift key and other properties\n\t\t\t\tconst clickEvent = new MouseEvent('click', {\n\t\t\t\t\tbubbles: true,\n\t\t\t\t\tcancelable: true,\n\t\t\t\t\tshiftKey: event.shiftKey,\n\t\t\t\t});\n\n\t\t\t\tcheckbox.dispatchEvent(clickEvent);\n\t\t\t}\n\t\t}\n\n\t\t// Update the sticky offset for the checked-courses-menu based on the header height\n\t\tfunction updateStickyOffset() {\n\t\t\tconst header = document.querySelector('header');\n\t\t\tconst menu = document.getElementById('dp-checked-courses-menu');\n\t\t\tif (header && menu) {\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tconst height = header.offsetHeight;\n\t\t\t\t\tmenu.style.top = height + 'px';\n\t\t\t\t}, 0);\n\t\t\t}\n\t\t}\n\n\t\t// bootstrap tooltip initialization\n\t\tfunction initializeTooltips() {\n\t\t\t// Initialize new tooltips\n\t\t\tconst tooltipTriggerList = document.querySelectorAll('[data-bs-toggle=\"tooltip\"]')\n\t\t\tconst tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl))\n\t\t};\n\n\t\t// Add checked courses to BP btn can add only to the union of not yet assigned semesters of all checked courses \n\t\tfunction updateCheckedCoursesMenu(semesterCount) {\n\t\t\tconst checkedCourses = Array.from(document.querySelectorAll('input[type=\"checkbox\"][name=\"selected-courses\"]:checked'));\n\t\t\tconst disabledSemesters = Array(semesterCount).fill(false);\n\n\t\t\tcheckedCourses.forEach(checkbox => {\n\t\t\t\t// Get the table row\n\t\t\t\tconst row = checkbox.closest('tr');\n\t\t\t\tif (!row) return;\n\t\t\t\t// Get the last td (blueprint button cell)\n\t\t\t\tconst lastTd = row.querySelector('td:last-child');\n\t\t\t\tif (!lastTd) return;\n\n\t\t\t\t// Find the assign to unassigned button\n\t\t\t\tconst plusBtn = lastTd.querySelector('button.assign-to-unassigned-btn');\n\t\t\t\tif (plusBtn && plusBtn.disabled) {\n\t\t\t\t\t// Mark first semester (unassigned) as disabled\n\t\t\t\t\tdisabledSemesters[0] = true;\n\t\t\t\t}\n\n\t\t\t\t// Find dropdown items (semester assign buttons)\n\t\t\t\tconst dropdownItems = lastTd.querySelectorAll('.dropdown-menu .dropdown-item');\n\t\t\t\tdropdownItems.forEach((item, idx) => {\n\t\t\t\t\tif (item.disabled) {\n\t\t\t\t\t\t// Mark this semester as disabled\n\t\t\t\t\t\tdisabledSemesters[idx + 1] = true;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tconsole.log('Disabled semesters:', disabledSemesters);\n\n\t\t\t// Now update the checked-courses-menu buttons\n\t\t\tconst menu = document.getElementById('dp-checked-courses-menu');\n\t\t\tif (!menu) return;\n\t\t\tconst innerDiv = menu.querySelector('div > div');\n\t\t\tif (!innerDiv) return;\n\n\t\t\t// Update the assign-to-unassigned button (first semester)\n\t\t\tconst assignBtn = innerDiv.querySelector('button.assign-to-unassigned-btn');\n\t\t\tif (assignBtn) {\n\t\t\t\tassignBtn.disabled = disabledSemesters[0];\n\t\t\t}\n\n\t\t\t// Update dropdown items (other semesters)\n\t\t\tconst dropdownItems = innerDiv.querySelectorAll('.dropdown-menu .dropdown-item');\n\t\t\tdropdownItems.forEach((item, idx) => {\n\t\t\t\tif (idx < disabledSemesters.length) {\n\t\t\t\t\titem.disabled = disabledSemesters[idx + 1];\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t</script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
