package coursedetail

import (
    "github.com/michalhercik/RecSIS/utils"
    "strconv"
	"strings"
    "fmt"
    // TODO should use this for sanitizing? might use own policy
    "github.com/microcosm-cc/bluemonday"
)

const user = 42

var p *bluemonday.Policy

func itos(i int) string {
    return strconv.Itoa(i)
}

templ Ratings(ratings CourseRatings, courseCode string) {
    <div id="rating">
        <p class="text-warning">Under construction</p> // TODO: remove
        Overall Rating: { ratings.Overall.String() }
        <button hx-post={ fmt.Sprintf("/course/like/%s", courseCode) } hx-target="#rating" hx-swap="outerHTML">Like</button>
        <button hx-post={ fmt.Sprintf("/course/dislike/%s", courseCode) } hx-target="#rating" hx-swap="outerHTML">Dislike</button>
        Difficulty Rating: { ratings.Difficulty.String() }
        Workload Rating: { ratings.Workload.String() }
        Usefulness Rating: { ratings.Usefulness.String() }
        Fun Rating: { ratings.Fun.String() }
    </div>
}

templ blueprintAssignment(code string, t text) {
    <div class="d-flex justify-content-center">
        <div class="btn-group">
            <button type="button" class="btn btn-lg btn-blueprint"
                hx-post={ "/blueprint/course/" + code }  
                hx-vals={ `"year": 0, "semester": 0, "lang": "` + t.Language + `"` }
            >
                { t.Assign }
            </button>
            <button type="button" class="btn btn-blueprint dropdown-toggle dropdown-toggle-split"
                data-bs-toggle="dropdown" aria-expanded="false">
            </button>
            <ul class="dropdown-menu">
            // TODO: make dynamic, NOT 3 fixed years
                for year := 1; year <= 3; year++ {
                    <li class="mx-3"><button class="dropdown-item text-center"
                        hx-post={ "/blueprint/course/" + code }  
                        hx-vals={ `"year": ` + strconv.Itoa(year) + `, "semester": 1, "lang": "` + t.Language + `"` } 
                    >
                    { t.YearStr(year) + " " + t.Winter }
                    </button></li>
                    <li class="mx-3"><button class="dropdown-item text-center"
                        hx-post={ "/blueprint/course/" + code }  
                        hx-vals={ `"year": ` + strconv.Itoa(year) + `, "semester": 2, "lang": "` + t.Language + `"` } 
                    >
                    { t.YearStr(year) + " " + t.Summer }
                    </button></li>
                }
            </ul>
        </div>
    </div>
}

func semesterHoursExamsString(course *Course, t text) string {
    result := ""
    if course.SemesterCount == 1 {
        result = course.Start + " " + strconv.Itoa(course.LectureRange1) + "/" + strconv.Itoa(course.SeminarRange1) + ", " + course.ExamType
    } else if course.SemesterCount == 2 {
        // TODO: either implement this logic
        //      A) here, switch starting semester and add language support
        //      B) in db meaning LectureRange1 is for winter semester and LectureRange2 for summer semester - THIS OK
    } else {
        result = "unsupported"
    }
    return result
}

func courseSISLink(code string, t text) string {
    if t.Language == "cs" {
        return "https://is.cuni.cz/studium/predmety/index.php?do=predmet&kod=" + code
    } else if t.Language == "en" {
        return "https://is.cuni.cz/studium/eng/predmety/index.php?do=predmet&kod=" + code
    }
    return "unsupported language"
}

templ renderSafeContent(content string) {
    // prefix <HTML> -> probably HTML content
    if strings.HasPrefix(content, "<HTML>") {
    // TODO not sure that table is best practice, but it works
    <table><tr><td>
    @templ.Raw(p.Sanitize(content))
    </td></tr></table>
    } else {
    // otherwise looks like markdown
    // TODO add some renderer for "markdown"
        { content }
    }
}

templ accordionItem(desc Description, id string) {
    if desc.Content != "" {
    <div class="accordion-item">
        <h2 class="accordion-header">
            <button class="accordion-button fs-4" type="button" data-bs-toggle="collapse" data-bs-target={ "#panel-" + id } aria-expanded="true" aria-controls={ "panel-" + id }>
                { utils.CapitalizeFirstLetter(desc.Title) }
            </button>
        </h2>
        <div id={ "panel-" + id } class="accordion-collapse collapse show">
            <div class="accordion-body">
                <p style="text-align: justify">@renderSafeContent(desc.Content)</p>
            </div>
        </div>
    </div>
    }
}

templ ribbon(ba Assignments, t text) {
    //if len(ba) > 0 {
        <div class="ribbon-detail">
            <span>{ ba.String(t.Language) }</span>
        </div>
    //}
}

templ accordion(course *Course, t text) {
    <div class="accordion accordion-flush">
        @accordionItem(course.Annotation, "annotation")
        @accordionItem(course.CompletionRequirements, "completion-requirements")
        @accordionItem(course.ExamRequirements, "exam-requirements")
        @accordionItem(course.Sylabus, "sylabus")
    </div>
}

templ Content(course *Course, t text) {
    {{ p = bluemonday.UGCPolicy() }}
    <br>
    //@Ratings(course.CourseRatings, course.Code)
    // TODO only if not empty/nil/...
    <div 
        id="basic-info"
        class="card"
        style="width: 100%;"
    >
        <div class="card-header d-flex justify-content-between align-items-center">
            <h6 class="mb-0 fs-4">{ course.Code }</h6>
            <p class="mb-0 fs-4">{ semesterHoursExamsString(course, t) }</p>
            <p class="mb-0 fs-4">{ t.ECredits + ": " + strconv.Itoa(course.Credits) }</p>
        </div>
        <div class="card-body d-flex flex-column align-items-center position-relative">
            @ribbon(course.BlueprintAssignments, t)
            <h1 class="card-title text-center" style="width: 80%">{ course.Name }</h1>
            <p
                class="card-subtitle mb-2 text-muted text-center">
                for _, g := range course.Guarantors {
                    if g.TitleBefore != "" {
                        <small style="font-size: 0.75rem;">{ g.TitleBefore + " " }</small>
                    }
                    if g.TitleAfter != "" {
                        <span class="fs-5 text-dark fw-semibold">{ g.FirstName + " " + g.LastName }</span><small style="font-size: 0.75rem;">{ ", " + g.TitleAfter }</small>
                    } else {
                        <span class="fs-5 text-dark fw-semibold">{ g.FirstName + " " + g.LastName }</span>
                    }
                    &emsp;
                }
            </p>
        </div>
        <div class="card-body">
            <table class="table table-borderless">
                <tr>
                    <td>{ t.Faculty }:</td><td>{ course.Faculty }</td>
                </tr>
                <tr>
                    <td>{ t.Capacity }:</td><td>{ course.Capacity }</td>
                </tr>
                <tr>
                    <td>{ t.StateOfCourse }:</td><td>{ course.State }</td>
                </tr>
                <tr>
                    <td>{ t.LanguageOfCourse }:</td><td>{ course.Language }</td>
                </tr>
                if course.Link != "" {
                    <tr>
                        <td>{ t.AdditionalInfo }:</td><td><a href={ templ.SafeURL(course.Link) }>{ course.Link }</a></td>
                    </tr>
                }
                if len(course.Teachers) > 0 {
                    <tr>
                        <td>{ t.Teachers }:</td><td>{ course.Teachers[0].String() }</td>
                    </tr>
                }
                if len(course.Teachers) > 1 {
                    for _, teacher := range course.Teachers[1:] {
                        <tr>
                            <td></td><td>{ teacher.String() }</td>
                        </tr>
                    }
                }
                <tr>
                    <td>{ t.SISLink }:</td><td><a href={ templ.SafeURL(courseSISLink(course.Code, t)) }>{ courseSISLink(course.Code, t) }</a></td>
                </tr>
            </table>
            // TODO may add extend button for more info
        </div>
        <div class="card-body">
            @blueprintAssignment(course.Code, t)
        </div>
        @accordion(course, t)
    </div>
}

templ Page(course *Course, t text) {
    @utils.Page(course.Code + " - " + course.Name, t.Utils) {
        <div class="container">
            @Content(course, t)
        </div>
    }
}

templ PageNotFound(code string, t text) {
    @utils.Page("Course not found", t.Utils) {
        @ContentNotFound(code, t)
    }
}

templ ContentNotFound(code string, t text) {
    <h1>{ t.CourseWithCode + code + t.NotFound }</h1>
}