package coursedetail

import (
    "github.com/michalhercik/RecSIS/utils"
    "strconv"
	"strings"
    "fmt"
    "github.com/microcosm-cc/bluemonday"
)

const user = 42

var p *bluemonday.Policy

func itos(i int) string {
    return strconv.Itoa(i)
}

templ Ratings(ratings []Rating, courseCode string) {
    {{
        sum := 0
        for _, rating := range ratings {
            sum += rating.Rating
        }
    }}
    <div id="rating">
        Rating: { itos(sum) }
        <button hx-post={ fmt.Sprintf("/course/%s/like", courseCode) } hx-target="#rating" hx-swap="outerHTML">Like</button>
        <button hx-post={ fmt.Sprintf("/course/%s/dislike", courseCode) } hx-target="#rating" hx-swap="outerHTML">Dislike</button>
    </div>
}

templ BlueprintAssignment(assignments []Assignment, code string) {
    <div id="bpassignment">
        Blueprint assignment:
        for _, assignment := range assignments {
            <p>{ assignment.String() }</p>
        }
        <button
            hx-post={ "/course/" + code + "/blueprint" }
            hx-target="#bpassignment"
            hx-swap="outerHTML">
            Add
        </button>
        if len(assignments) == 1 {
        <button
            hx-delete={ "/course/" + code + "/blueprint" }
            hx-target="#bpassignment"
            hx-swap="outerHTML">
            Remove
        </button>
        }
    </div>
}

func examTypeStr(examType string) string {
    // to add: STEX, thesis, ...
    switch examType {
    case "Z":
        return "C" // Z
    case "1":
        return "??" // do not know
    case "F":
        return "MC" // KZ
    case "D":
        return "??" // do not know
    case "K":
        return "Ex" // Zk
    case "*":
        return "C+Ex" // Z+Zk
    default:
        return "unknown"
    }
}

templ hoursExams(course *Course) {
    {{ semCount := course.SemesterCount }}
    if semCount == 1 {
    <tr>
        <td>Scope, examination:</td>
        <td>{ itos(course.LectureRange1) + "/" + itos(course.SeminarRange1) + ", " + examTypeStr(course.ExamType)}</td>
    </tr>
    }
    if semCount == 2 {
    <tr>
        <td rowspan="2">Scope, examination:</td>
        <td>{ "winter s.:" + itos(course.LectureRange1) + "/" + itos(course.SeminarRange1) + ", " + examTypeStr(course.ExamType)}</td>
    </tr>
    <tr>
        <td></td>
        <td>{ "summer s.:" + itos(course.LectureRange2) + "/" + itos(course.SeminarRange2) + ", " + examTypeStr(course.ExamType)}</td>
    </tr>
    }
}

func capacityStr(capacity int) string {
    if capacity == -1 {
        return "unlimited"
    }
    return itos(capacity)
}

func stateStr(state string) string {
    switch state {
    case "N":
        return "taught"
    case "V":
        return "not taught"
    default:
        return "unknown"
    }
}

func courseSISLink(code string) string {
    // /eng/ for English version, nothing for Czech version
    return "https://is.cuni.cz/studium/eng/predmety/index.php?do=predmet&kod=" + code
}

templ BasicInfo(course *Course) {
    // TODO only if not empty/nil/...
    <div id="basicinfo" class="courseinfobox">
        <table>
            <tr>
                <td>Czech title:</td><td>{ course.Name }</td>
            </tr>
            <tr>
                <td>Faculty:</td><td>{ course.Faculty }</td>
            </tr>
            <tr>
                <td>Semester:</td><td>{ course.Start }</td>
            </tr>
            <tr>
                <td>E-Credits:</td><td>{ itos(course.Credits) }</td>
            </tr>
            @hoursExams(course)
            <tr>
                <td>Capacity:</td><td>{ capacityStr(course.Capacity) }</td>
            </tr>
            <tr>
                <td>State of the course:</td><td>{ stateStr(course.State) }</td>
            </tr>
            <tr>
                <td>Language:</td><td>{ course.Language }</td>
            </tr>
            <tr>
                <td>Additional information:</td><td><a href={ templ.SafeURL(course.Link) }>{ course.Link }</a></td>
            </tr>
            if len(course.Guarantors) > 0 {
            <tr>
                <td>Guarantor(s):</td><td>{ course.Guarantors[0].String() }</td>
            </tr>
            }
            if len(course.Guarantors) > 1 {
            for _, teacher := range course.Guarantors[1:] {
            <tr>
                <td></td><td>{ teacher.String() }</td>
            </tr>
            }
            }
            if len(course.Teachers) > 0 {
            <tr>
                <td>Teacher(s):</td><td>{ course.Teachers[0].String() }</td>
            </tr>
            }
            if len(course.Teachers) > 1 {
            for _, teacher := range course.Teachers[1:] {
            <tr>
                <td></td><td>{ teacher.String() }</td>
            </tr>
            }
            }
            <tr>
                <td>SIS link:</td><td><a href={ templ.SafeURL(courseSISLink(course.Code)) }>{ courseSISLink(course.Code) }</a></td>
            </tr>
        </table>
        // TODO may add extend button for more info
    </div>
}

templ renderSafeContent(content string) {
    // prefix <HTML> -> probably HTML content
    if strings.HasPrefix(content, "<HTML>") {
    // TODO not sure that table is best practice, but it works
    <table><tr><td>
    @templ.Raw(p.Sanitize(content))
    </td></tr></table>
    } else {
    // otherwise looks like markdown
    // TODO add some renderer for "markdown"
        { content }
    }
}

templ Annotation(annotation string) {
    if annotation != "" {
    <div id="annotation" class="courseinfobox">
        <h2>Annotation</h2>
        @renderSafeContent(annotation)
    </div>
    }
}

templ CompletionRequirements(completion string) {
    if completion != "" {
    <div id="completion" class="courseinfobox">
        <h2>Completion requirements</h2>
        @renderSafeContent(completion)
    </div>
    }
}

templ Literature(literature string) {
    if literature != "" {
    <div id="literature" class="courseinfobox">
        <h2>Literature</h2>
        @renderSafeContent(literature)
    </div>
    }
}

templ Sylabus(sylabus string) {
    if sylabus != "" {
    <div id="sylabus" class="courseinfobox">
        <h2>Sylabus</h2>
        @renderSafeContent(sylabus)
    </div>
    }
}

templ Comments(comments []Comment, courseCode string) {
    <div id="comments" class="courseinfobox">
        <h2>Comments</h2>
        <ul>
            for _, comment := range comments {
            <li>
                <div>
                    <span>{ itos(comment.ID) }</span>
                </div>
                <div>
                    { comment.Content }
                </div>
            </li>
            }
        </ul>
        <form hx-post={ fmt.Sprintf("course/%s/comment", courseCode) } hx-target="#comments" hx-swap="outerHTML">
            <div x-data="{ adjustTextarea($event) {
                $event.target.style.height = 'auto';
                $event.target.style.height = ($event.target.scrollHeight) + 'px';
            } }">
                <label for="comment">Add a comment:</label><br>
                <textarea id="comment" name="comment" rows="1" cols="50" @input="adjustTextarea" style="overflow:hidden;"></textarea>
            </div>
            <div>
                <button type="submit">Submit</button>
            </div>
        </form>
    </div>
}

templ Content(course *Course) {
    {{ p = bluemonday.UGCPolicy() }}
    <h1>{ course.Code + " - " + course.Name }</h1>
    @Ratings(course.Ratings, course.Code)
    @BlueprintAssignment(course.BlueprintAssignments, course.Code)
    @BasicInfo(course)
    // TODO add links to parts of the page
    @Annotation(course.Annotation.Content)
    @CompletionRequirements("") // TODO get data
    @Literature("") // TODO get data
    @Sylabus(course.Sylabus.Content)
    @Comments(course.Comments, course.Code)
}

templ Page(course *Course) {
    @utils.Page(course.Code + " - " + course.Name) {
        @Content(course)
    }
}

templ PageNotFound(code string) {
    @utils.Page("Course not found") {
        @ContentNotFound(code)
    }
}

templ ContentNotFound(code string) {
    <h1>Course with code { code } not found</h1>
}