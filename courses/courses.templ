package courses

import (
    "github.com/michalhercik/RecSIS/utils"
    "strconv"
)

const user = 42
const coursesPerPage = 10

const (
    op_relevance = "rel"
    op_recommended = "rec"
    op_rating = "rat"
    op_mostPopular = "pop"
    op_newest = "new"
)

func itos(i int) string {
    return strconv.Itoa(i)
}

templ Search() {
    <form
        hx-get={ "/courses/search?user=" + itos(user) }
        hx-target="#courses"
        hx-swap="outerHTML"
        hx-include="[name=search],[name=sort]"
    >
        <input type="text" name="search" id="search" placeholder="Search..." />
        <button type="submit">Search</button>
        <label for="sort">Sort by:</label>
        <select name="sort" id="sort">
            <option value={ op_relevance }>Relevance</option>
            <option value={ op_recommended }>Recommended</option>
            <option value={ op_rating }>Rating</option>
            <option value={ op_mostPopular }>Most Popular</option>
            <option value={ op_newest }>Newest</option>
        </select>
    </form>
}

func examTypeStr(examType string) string {
    // to add: STEX, thesis, ...
    switch examType {
    case "Z":
        return "C" // Z
    case "1":
        return "??" // do not know
    case "F":
        return "MC" // KZ
    case "D":
        return "??" // do not know
    case "K":
        return "Ex" // Zk
    case "*":
        return "C+Ex" // Z+Zk
    default:
        return "unknown"
    }
}

templ hoursExams(course *Course) {
    {{ semCount := course.semesterCount }}
    if semCount == 1 {
    <td>{ itos(course.lectureRange1) + "/" + itos(course.seminarRange1) + ", " + examTypeStr(course.examType)}</td>
    }
    if semCount == 2 {
    <td>{ "winter s.:" + itos(course.lectureRange1) + "/" + itos(course.seminarRange1) + ", " + examTypeStr(course.examType) + "\nsummer s.:" + itos(course.lectureRange2) + "/" + itos(course.seminarRange2) + ", " + examTypeStr(course.examType)}</td>
    }
}

func queryString(user int, startIndex int, maxCount int, search string, sorted sortType) string {
    return "?user=" + itos(user) +
           "&startIndex=" + itos(startIndex) +
           "&maxCount=" + itos(maxCount) +
           "&search=" + search +
           "&sorted=" + itos(int(sorted))
}

templ BlueprintAssignment(assignments []Assignment, code string) {
    <td id="bpassignment">
        for _, assignment := range assignments {
            <p>{ assignment.String() }</p>
        }
        <button
            hx-post={ "/courses/blueprint/" + code }
            hx-target="#bpassignment"
            hx-swap="outerHTML">
            Add
        </button>
        if len(assignments) == 1 {
        <button
            hx-delete={ "/courses/blueprint/" + code }
            hx-target="#bpassignment"
            hx-swap="outerHTML">
            Remove
        </button>
        }
    </td>
}

templ paginationButton(text string, start, end int, coursesPage *coursesPage) {
    <button
        hx-get={ "/courses/page" + queryString(user, start, end, coursesPage.search, coursesPage.sorted) }
        hx-target="#courses"
        hx-swap="outerHTML">
        { text }
    </button>
}

templ Courses(coursesPage *coursesPage) {
    <div id="courses">
        if coursesPage.total == 0 {
            <p>No courses found</p>
        } else {
        {{ endIndex := coursesPage.startIndex + coursesPage.count }}
        <h2>{ coursesPage.sorted.String() + ":" }</h2>
        <table>
            <thead>
                <tr>
                    <th>Code</th>
                    <th>Title</th>
                    <th>Credits</th>
                    <th>Semester</th>
                    <th>Scope, examination</th>
                    <th>Teacher(s)</th>
                    <th>Rating</th>
                    <th>Blueprint</th>
                </tr>
            </thead>
            <tbody>
            for _, course := range coursesPage.courses {
                <tr>
                    <td> @utils.CourseLink(course.code) </td>
                    <td>{ course.name }</td>
                    <td>{ itos(course.credits) }</td>
                    <td>{ course.start.String() }</td>
                    @hoursExams(&course)
                    <td> @templ.Raw(course.teachers.string()) </td>
                    <td>{ itos(course.rating) }</td>
                    @BlueprintAssignment(course.blueprintAssignments, course.code)
                </tr>
            }
            </tbody>
        </table>
        <p>Results { itos(coursesPage.startIndex + 1) } to { itos(endIndex) } of { itos(coursesPage.total) }</p>
        <div>
            if coursesPage.startIndex > 0 {
                @paginationButton("Previous", coursesPage.startIndex - coursesPerPage, coursesPerPage, coursesPage)
            }
            if endIndex < coursesPage.total {
                @paginationButton("Next", endIndex, coursesPerPage, coursesPage)
                @paginationButton("Load More", coursesPage.startIndex, coursesPage.count + coursesPerPage, coursesPage)
            }
        </div>
        }
    </div>
}

templ Content(coursesPage *coursesPage) {
    @Search()
    @Courses(coursesPage)
}

templ Page(coursesPage *coursesPage) {
    @utils.Page("Courses") {
        @Content(coursesPage)
    }
}