package courses

import (
    "github.com/michalhercik/RecSIS/utils"
    "strconv"
)

const user = 42
const coursesPerPage = 20

func examTypeStr(examType string) string {
    // to add: STEX, thesis, ...
    switch examType {
    case "Z":
        return "C" // Z
    case "1":
        return "??" // do not know
    case "F":
        return "MC" // KZ
    case "D":
        return "??" // do not know
    case "K":
        return "Ex" // Zk
    case "*":
        return "C+Ex" // Z+Zk
    default:
        return "unknown"
    }
}

func hoursExamsString(lecture, seminar int, examType string) string {
    return strconv.Itoa(lecture) + "/" + strconv.Itoa(seminar) + ", " + examTypeStr(examType)
}

templ winterSummer(course *Course) {
    {{ semCount := course.semesterCount }}
    switch semCount {
    case 1:
        switch course.start {
        case teachingWinterOnly:
            <td>{ hoursExamsString(course.lectureRange1, course.seminarRange1, course.examType) }</td>
            <td>---</td>
        case teachingSummerOnly:
            <td>---</td>
            <td>{ hoursExamsString(course.lectureRange1, course.seminarRange1, course.examType) }</td>
        case teachingBoth:
            <td>{ hoursExamsString(course.lectureRange1, course.seminarRange1, course.examType) }</td>
            <td>{ hoursExamsString(course.lectureRange1, course.seminarRange1, course.examType) }</td>
        default:
            <td>unsupported</td>
            <td>unsupported</td>
        }
    case 2:
        switch course.start {
        case teachingWinterOnly:
            <td>{ hoursExamsString(course.lectureRange1, course.seminarRange1, course.examType) }</td>
            <td>{ hoursExamsString(course.lectureRange2, course.seminarRange2, course.examType) }</td>
        case teachingSummerOnly:
            <td>{ hoursExamsString(course.lectureRange2, course.seminarRange2, course.examType) }</td>
            <td>{ hoursExamsString(course.lectureRange1, course.seminarRange1, course.examType) }</td>
        case teachingBoth:
            <td>unsupported</td>
            <td>unsupported</td>
        default:
            <td>unsupported</td>
            <td>unsupported</td>
        }
    default:
        <td>unsupported</td>
        <td>unsupported</td>
    }
}

templ BlueprintAssignment(assignments []Assignment, code string) {
    <td id="bpassignment">
        // for _, assignment := range assignments {
        //     <p>{ assignment.String() }</p>
        // }
        <button
            hx-post={ "/courses/blueprint/" + code }
            hx-target="#bpassignment"
            hx-swap="outerHTML">
            Add
        </button>
        if len(assignments) == 1 {
        <button
            hx-delete={ "/courses/blueprint/" + code }
            hx-target="#bpassignment"
            hx-swap="outerHTML">
            Remove
        </button>
        }
    </td>
}

templ Search() {
    <form
        hx-get={ "/courses/search?user=" + strconv.Itoa(user) }
        hx-target="#courses"
        hx-swap="outerHTML"
        hx-include="[name=search],[name=sort]"
    >
        <input type="text" name="search" id="search" placeholder="Search..." />
        <button type="submit">Search</button>
        <label for="sort">Sort by:</label>
        <select name="sort" id="sort">
            <option value={ strconv.Itoa(relevance) }>Relevance</option>
            <option value={ strconv.Itoa(recommended) }>Recommended</option>
            <option value={ strconv.Itoa(rating) }>Rating</option>
            <option value={ strconv.Itoa(mostPopular) }>Most Popular</option>
            <option value={ strconv.Itoa(newest) }>Newest</option>
        </select>
    </form>
}

templ paginationButton(text string, page, hitsPerPage int) {
    <button
        hx-get={ "/courses/search?user=" + strconv.Itoa(user) }
        hx-target="#courses"
        hx-swap="outerHTML show:top"
        hx-include="[name=search],[name=sort]"
        hx-vals={ `"page": ` + strconv.Itoa(page) + `, "hitsPerPage": ` + strconv.Itoa(hitsPerPage) }
    >
        { text }
    </button>
}

templ loadMoreButton(page, hitsPerPage int) {
    <button
        hx-get={ "/courses/search?user=" + strconv.Itoa(user) }
        hx-target="#courses"
        hx-swap="outerHTML"
        hx-include="[name=search],[name=sort]"
        hx-vals={ `"page": ` + strconv.Itoa(page) + `, "hitsPerPage": ` + strconv.Itoa(hitsPerPage) }
    >
        Load More
    </button>
}

templ Courses(coursesPage *coursesPage) {
    <div id="courses">
        if coursesPage.totalPages == 0 {
            <p>No courses found</p>
        } else {
        <h2>{ coursesPage.sortedBy.String() + ":" }</h2>
        <table>
            <thead>
                <tr>
                    <th>Code</th>
                    <th>Title</th>
                    <th>Credits</th>
                    <th>Winter</th>
                    <th>Summer</th>
                    <th>Teacher(s)</th>
                    <th>Rating</th>
                    <th>Blueprint</th>
                </tr>
            </thead>
            <tbody>
            for _, course := range coursesPage.courses {
                <tr>
                    <td> @utils.CourseLink(course.code) </td>
                    <td>{ course.name }</td>
                    <td>{ strconv.Itoa(course.credits) }</td>
                    @winterSummer(&course)
                    <td>{ course.teachers.string() }</td>
                    <td>{ strconv.Itoa(course.rating) }</td>
                    @BlueprintAssignment(course.blueprintAssignments, course.code)
                </tr>
            }
            </tbody>
        </table>
        <p>Page { strconv.Itoa(coursesPage.page) } of { strconv.Itoa(coursesPage.totalPages) }</p>
        <div>
            if coursesPage.page > 1 {
                @paginationButton("Previous Page", coursesPage.page - 1, coursesPage.pageSize)
            }
            if coursesPage.page < coursesPage.totalPages {
                @paginationButton("Next Page", coursesPage.page + 1, coursesPage.pageSize)
                @loadMoreButton(coursesPage.page, coursesPage.pageSize + coursesPerPage)
            }
        </div>
        }
    </div>
}

templ Content(coursesPage *coursesPage) {
    @Search()
    @Courses(coursesPage)
}

templ Page(coursesPage *coursesPage) {
    @utils.Page("Courses") {
        @Content(coursesPage)
    }
}