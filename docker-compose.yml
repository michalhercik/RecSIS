services:
  recommender:
    container_name: recsis-recommender
    build:
      dockerfile: Dockerfile
      context: ./recommender/
    ports:
      - 8002:8002
    env_file:
      - path: ./dev_env/recommender-postgres.env
    # environment:
    #   RECSIS_RECOMMENDER_DB_PASS: ${RECSIS_RECOMMENDER_DB_PASS}
    #   MEILI_MASTER_KEY: MASTER_KEY
  elt:
    container_name: recsis-elt
    build:
      dockerfile: Dockerfile
      context: ./elt/
      target: dev-stage
    depends_on:
      postgres:
        condition: service_healthy
        restart: true
      meilisearch:
        condition: service_healthy
        restart: true
    env_file:
      - path: ./dev_env/elt-postgres.env
      - path: ./dev_env/elt.env
    # environment:
    #   - ACHERON_USER=${ACHERON_USER:-}
    #   - SIS_DB_USER=${SIS_DB_USER}
    #   - SIS_DB_PASS=${SIS_DB_PASS}
    #   - RECSIS_ELT_DB_PASS=${RECSIS_ELT_DB_PASS}
    #   - MEILI_MASTER_KEY=${MEILI_MASTER_KEY}
    networks:
      - recsis-network
    volumes:
      - ~/.ssh/id_rsa:/root/.ssh/id_rsa
  webapp:
    container_name: recsis-webapp
    build:
      dockerfile: Dockerfile
      context: ./webapp/
      target: deploy-stage
    depends_on:
      postgres:
        condition: service_healthy
        restart: true
      meilisearch:
        condition: service_healthy
      elt:
        condition: service_completed_successfully
    ports:
      - 443:8000
    env_file:
      - path: ./dev_env/webapp-postgres.env
      - path: ./dev_env/meili-master-key.env
    # environment:
    #   - RECSIS_WEBAPP_DB_PASS=${RECSIS_WEBAPP_DB_PASS}
    #   - MEILI_MASTER_KEY=${MEILI_MASTER_KEY}
    networks:
      - recsis-network
    volumes:
      - /var/recsis-cert/:/app/recsis-cert/:ro
  postgres:
    container_name: recsis-postgres
    image: postgres
    env_file:
      - path: ./dev_env/postgres.env
      - path: ./dev_env/elt-postgres.env
      - path: ./dev_env/webapp-postgres.env
      - path: ./dev_env/recommender-postgres.env
    # environment:
    #   POSTGRES_DB: ${POSTGRES_DB}
    #   POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    #   RECSIS_ELT_DB_PASS: ${RECSIS_ELT_DB_PASS}
    #   RECSIS_WEBAPP_DB_PASS: ${RECSIS_WEBAPP_DB_PASS}
    #   RECSIS_RECOMMENDER_DB_PASS: ${RECSIS_RECOMMENDER_DB_PASS}
    #   PGDATA: /data/postgres
    volumes:
       - ./init_db:/docker-entrypoint-initdb.d
       - ./postgres_data:/data/postgres
    ports:
      - "5432:5432"
    networks:
      - recsis-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h postgres -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
      start_interval: 1s
  adminer:
    container_name: recsis-adminer
    depends_on:
      postgres:
        condition: service_healthy
    image: adminer
    restart: always
    ports:
      - 8080:8080
    networks:
      - recsis-network
  meilisearch:
    container_name: recsis-meilisearch
    image: getmeili/meilisearch:v1.16
    env_file:
      - path: ./dev_env/meili-master-key.env
      - path: ./dev_env/meilisearch.env
    # environment:
    #   MEILI_MASTER_KEY: MASTER_KEY
    #   MEILI_HTTP_PAYLOAD_SIZE_LIMIT: "200MB"
    #   SNAPSHOT_DIR: /meili_data/snapshots
    #   MEILI_IMPORT_SNAPSHOT: /meili_data/snapshots/data.ms.snapshot
    #   MEILI_IGNORE_SNAPSHOT_IF_DB_EXISTS: "true"
    #   MEILI_IGNORE_MISSING_SNAPSHOT: "true"
    volumes:
      - ./meili_data:/meili_data
    ports:
      - 7700:7700
    networks:
      - recsis-network
    healthcheck:
      test: set -o pipefail;curl -fsS http://meilisearch:7700/health | grep -q '{"status":"available"}'
      interval: 1s
      timeout: 5s
      retries: 10
  bert:
    container_name: recsis-bert
    build:
      dockerfile: Dockerfile
      context: ./bert/
      target: builder
    depends_on:
      postgres:
        condition: service_healthy
        restart: true
    ports:
      - 8003:8003
    networks:
      - recsis-network
  mockcas:
    container_name: recsis-mock-cas
    build:
      dockerfile: Dockerfile
      context: ./mock_cas/
      target: dev-stage
    volumes:
    - ./cert/:/app/cert/
    ports:
      - 8001:8001
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - recsis-network

networks:
  recsis-network:
    driver: bridge
