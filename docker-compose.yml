services:
  recsis:
    container_name: recsis-webapp
    build:
      dockerfile: Dockerfile
      context: ./src/
      target: dev-stage
    ports:
      - 443:8000
      - 80:80
    depends_on:
      postgres:
        condition: service_healthy
      recommender:
        condition: service_healthy
    networks:
      - recsis-network
    volumes:
      - ./utils/:/app/utils/
      - /var/recsis-cert/:/app/recsis-cert/:ro
      # - ./log:/app/log
    develop:
      watch:
        - action: rebuild
          path: ./src
          ignore:
            - "*_templ.go"
  postgres:
    container_name: recsis-postgres
    image: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-recsis}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-recsis}
      PGDATA: /data/postgres
    volumes:
      #  - postgres:/data/postgres
       - ./init_db:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - recsis-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 1s
      timeout: 5s
      retries: 10
  adminer:
    container_name: recsis-adminer
    image: adminer
    restart: always
    ports:
      - 8080:8080
    networks:
      - recsis-network
  meilisearch:
    container_name: recsis-meilisearch
    image: getmeili/meilisearch
    environment:
      MEILI_MASTER_KEY: MASTER_KEY
    volumes:
      - ./meili_data:/meili_data
    ports:
      - 7700:7700
    networks:
      - recsis-network
  recommender:
    container_name: recsis-recommender
    build:
      dockerfile: Dockerfile
      context: ./recommender/
      target: dev-stage
    ports:
      - 8002:8002
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - recsis-network

networks:
  recsis-network:
    driver: bridge
