package home

import (
    "github.com/michalhercik/RecSIS/language"

    "fmt"
    "math/rand"
)

templ Skeleton(lang language.Language) {
    {{
        const seed = 21
        rng := rand.New(rand.NewSource(int64(seed)))
    }}
    <div
        id="home-skeleton"
        class="container pt-3 placeholder-glow"
        x-data
        x-intersect.once={ fmt.Sprintf("document.title = '%s | RecSIS'", texts[lang].PageTitle) }
        @resize.window="setSkeletonCardsWidth()">
        <h4> @placeholder(1) </h4>
        <p>
            @placeholder(3)&nbsp;
            @placeholder(1)&nbsp;
            @placeholder(2)
        </p>

        <div class="pb-4">
            <h4> @placeholder(3) </h4>
            @skeletonCardsRow("rec", rng)
        </div>

        <div class="pb-4">
            <h4> @placeholder(2) </h4>
            @skeletonCardsRow("new", rng)
        </div>

        @skeletonScripts()
    </div>
}

templ skeletonCardsRow(ID string, rng *rand.Rand) {
    <div class="d-flex justify-content-between align-items-center pt-2">
        @skeletonChevron()
        <div id={ fmt.Sprintf("skeleton-cards-row-%s", ID) } class="d-flex flex-row flex-no-wrap overflow-hidden w-100 gap-1 px-1">
            for i := 0; i < 6; i++ {
                <div class="card small-card">
                    <div class="card-header lh-1 py-1">
                        <div class="d-flex justify-content-between w-100">
                            <h6 class="mb-0 placeholder bg-secondary col-4"></h6> // code
                            <small class="placeholder bg-secondary col-4"></small> // credits
                        </div>
                        <div class="text-center w-100">
                            <small class="placeholder bg-secondary col-4"></small> // semester, hours, exams
                        </div>
                    </div>
                    <div class="card-body justify-content-between d-flex flex-column h-100">
                        // title
                        <h6 class="card-title pb-1">
                            for j := 0; j < 3+rng.Intn(6); j++ {
                                @placeholder(2 + rng.Intn(4))&nbsp;
                            }
                        </h6>
                        // guarantors
                        <h6 class="card-subtitle text-muted">
                            @placeholder(3)&nbsp;
                            @placeholder(4)&nbsp;
                        </h6>
                    </div>
                </div>
            }
        </div>
        @skeletonChevron()
    </div>
}

templ skeletonChevron() {
    <button
        class="btn px-0 py-2 placeholder bg-secondary">
        <i class="bi bi-chevron-compact-left fs-4 opacity-0"></i>
    </button>
}

templ skeletonScripts() {
    <script>
        setSkeletonCardsWidth();

        function setSkeletonCardsWidth() {
            const container = document.querySelector(".container");
            const recContainer = document.getElementById("skeleton-cards-row-rec");
            const newContainer = document.getElementById("skeleton-cards-row-new");
            if (recContainer && newContainer) {
                const recCards = recContainer.querySelectorAll(".card");
                const newCards = newContainer.querySelectorAll(".card");

                // Set the width of the cards to be the same
                const recCardWidth = calculateSkeletonCardWidth(container);
                recCards.forEach(card => {
                    card.style.width = `${recCardWidth}px`;
                    card.style.minWidth = `${recCardWidth}px`;
                });

                const newCardWidth = calculateSkeletonCardWidth(container);
                newCards.forEach(card => {
                    card.style.width = `${newCardWidth}px`;
                    card.style.minWidth = `${newCardWidth}px`;
                });
            }
        }

        function calculateSkeletonCardWidth(container) {
            const containerWidth = container.clientWidth - 84; // Subtracting 8px for the padding of the inner container and 2 * 26px for buttons and 24px for container padding
            const minCardWidth = 200; // Minimum width for each card
            const gap = 4; // Gap between cards

            // Calculate the width of each card based on the container width and number of visible cards
            const visibleCards = Math.max(Math.floor((containerWidth + gap) / (minCardWidth + gap)), 1);
            return (containerWidth - (visibleCards - 1) * gap) / visibleCards;
        }
    </script>
}

templ placeholder(size int) {
    <span class={ fmt.Sprintf("placeholder bg-secondary col-%d", size) }></span>
}