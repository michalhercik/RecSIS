package coursedetail

import (
    "github.com/michalhercik/RecSIS/utils"
    "strconv"
	"strings"
    "fmt"
    // TODO should use this for sanitizing? might use own policy
    "github.com/microcosm-cc/bluemonday"
)

const user = 42

var p *bluemonday.Policy

func itos(i int) string {
    return strconv.Itoa(i)
}

templ Ratings(ratings CourseRatings, courseCode string) {
    <div id="rating">
        <p class="text-warning">Under construction</p> // TODO: remove
        Overall Rating: { ratings.Overall.String() }
        <button hx-post={ fmt.Sprintf("/course/like/%s", courseCode) } hx-target="#rating" hx-swap="outerHTML">Like</button>
        <button hx-post={ fmt.Sprintf("/course/dislike/%s", courseCode) } hx-target="#rating" hx-swap="outerHTML">Dislike</button>
        Difficulty Rating: { ratings.Difficulty.String() }
        Workload Rating: { ratings.Workload.String() }
        Usefulness Rating: { ratings.Usefulness.String() }
        Fun Rating: { ratings.Fun.String() }
    </div>
}

templ BlueprintAssignment(assignments []Assignment, code string) {
    <div id="bpassignment">
        <p class="text-warning">Under construction</p> // TODO: remove
        Blueprint assignment:
        for _, assignment := range assignments {
            <p>{ assignment.String() }</p>
        }
        <button
            hx-post={ "/course/" + code + "/blueprint" }
            hx-target="#bpassignment"
            hx-swap="outerHTML">
            Add
        </button>
        if len(assignments) == 1 {
        <button
            hx-delete={ "/course/" + code + "/blueprint" }
            hx-target="#bpassignment"
            hx-swap="outerHTML">
            Remove
        </button>
        }
    </div>
}

templ hoursExams(course *Course, t text) {
    {{ semCount := course.SemesterCount }}
    if semCount == 1 {
    <tr>
        <td>{ t.ScopeExam }:</td>
        <td>{ itos(course.LectureRange1) + "/" + itos(course.SeminarRange1) + ", " + course.ExamType}</td>
    </tr>
    }
    if semCount == 2 {
    <tr>
        <td rowspan="2">{ t.ScopeExam }:</td>
        <td>{ "winter s.:" + itos(course.LectureRange1) + "/" + itos(course.SeminarRange1) + ", " + course.ExamType}</td>
    </tr>
    <tr>
        <td></td>
        <td>{ "summer s.:" + itos(course.LectureRange2) + "/" + itos(course.SeminarRange2) + ", " + course.ExamType}</td>
    </tr>
    }
}

func courseSISLink(code string, t text) string {
    if t.Language == "cs" {
        return "https://is.cuni.cz/studium/predmety/index.php?do=predmet&kod=" + code
    } else if t.Language == "en" {
        return "https://is.cuni.cz/studium/eng/predmety/index.php?do=predmet&kod=" + code
    }
    return "unsupported language"
}

templ BasicInfo(course *Course, t text) {
    // TODO only if not empty/nil/...
    <div id="basicinfo">
        <table class="table table-borderless">
            // TODO: this should be the name but in the other language (Czech/English)
            // <tr>
            //     <td>Czech title:</td><td>{ course.Name }</td>
            // </tr>
            <tr>
                <td>{ t.Faculty }:</td><td>{ course.Faculty }</td>
            </tr>
            <tr>
                <td>{ t.Semester }:</td><td>{ course.Start }</td>
            </tr>
            <tr>
                <td>{ t.ECredits }:</td><td>{ itos(course.Credits) }</td>
            </tr>
            @hoursExams(course, t)
            <tr>
                <td>{ t.Capacity }:</td><td>{ course.Capacity }</td>
            </tr>
            <tr>
                <td>{ t.StateOfCourse }:</td><td>{ course.State }</td>
            </tr>
            <tr>
                <td>{ t.LanguageOfCourse }:</td><td>{ course.Language }</td>
            </tr>
            <tr>
                <td>{ t.AdditionalInfo }:</td><td><a href={ templ.SafeURL(course.Link) }>{ course.Link }</a></td>
            </tr>
            <tr>
                <td>{ t.Guarantors }:</td><td>{ course.Guarantors[0].String() }</td>
            </tr>
            if len(course.Guarantors) > 1 {
                for _, teacher := range course.Guarantors[1:] {
                    <tr>
                        <td></td><td>{ teacher.String() }</td>
                    </tr>
                }
            }
            if len(course.Teachers) > 0 {
                <tr>
                    <td>{ t.Teachers }:</td><td>{ course.Teachers[0].String() }</td>
                </tr>
            }
            if len(course.Teachers) > 1 {
                for _, teacher := range course.Teachers[1:] {
                    <tr>
                        <td></td><td>{ teacher.String() }</td>
                    </tr>
                }
            }
            <tr>
                <td>{ t.SISLink }:</td><td><a href={ templ.SafeURL(courseSISLink(course.Code, t)) }>{ courseSISLink(course.Code, t) }</a></td>
            </tr>
        </table>
        // TODO may add extend button for more info
    </div>
}

templ renderSafeContent(content string) {
    // prefix <HTML> -> probably HTML content
    if strings.HasPrefix(content, "<HTML>") {
    // TODO not sure that table is best practice, but it works
    <table><tr><td>
    @templ.Raw(p.Sanitize(content))
    </td></tr></table>
    } else {
    // otherwise looks like markdown
    // TODO add some renderer for "markdown"
        { content }
    }
}

templ DetailField(desc Description) {
    if desc.Content != "" {
    <div>
        <h2>{ utils.CapitalizeFirstLetter(desc.Title) }</h2>
        <p style="text-align: justify">@renderSafeContent(desc.Content)</p>
    </div>
    }
}


templ Comments(comments []Comment, courseCode string, t text) {
    <div id="comments">
        <h2>{ t.Comments }</h2>
        <p class="text-warning">Under construction</p> // TODO: remove
        <ul>
            for _, comment := range comments {
            <li>
                <div>
                    <span>{ itos(comment.ID) }</span>
                </div>
                <div>
                    { comment.Content }
                </div>
            </li>
            }
        </ul>
        <form hx-post={ fmt.Sprintf("course/%s/comment", courseCode) } hx-target="#comments" hx-swap="outerHTML">
            <div x-data="{ adjustTextarea($event) {
                $event.target.style.height = 'auto';
                $event.target.style.height = ($event.target.scrollHeight) + 'px';
            } }">
                <label for="comment">Add a comment:</label><br>
                <textarea id="comment" name="comment" rows="1" cols="50" @input="adjustTextarea" style="overflow:hidden;"></textarea>
            </div>
            <div>
                <button type="submit">Submit</button>
            </div>
        </form>
    </div>
}

templ Content(course *Course, t text) {
    {{ p = bluemonday.UGCPolicy() }}
    <h1 class="text-center">{ course.Code + " - " + course.Name }</h1>
    @Ratings(course.CourseRatings, course.Code)
    @BlueprintAssignment(course.BlueprintAssignments, course.Code)
    @BasicInfo(course, t)
    // TODO add links to parts of the page
    @DetailField(course.Annotation)
    @DetailField(course.CompletionRequirements)
    @DetailField(course.ExamRequirements)
    @DetailField(course.Sylabus)
    // @Comments(course.Comments, course.Code, t)
}

templ Page(course *Course, t text) {
    @utils.Page(course.Code + " - " + course.Name, t.Utils) {
        <div class="container">
            @Content(course, t)
        </div>
    }
}

templ PageNotFound(code string, t text) {
    @utils.Page("Course not found", t.Utils) {
        @ContentNotFound(code, t)
    }
}

templ ContentNotFound(code string, t text) {
    <h1>{ t.CourseWithCode + code + t.NotFound }</h1>
}