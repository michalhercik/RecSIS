package coursedetail

import (
    "github.com/michalhercik/RecSIS/utils"
    "strconv"
)

templ rateModal(categories []CourseCategoryRating, code string, t text) {
    <div class="modal fade" id="rateModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
    <div class="modal-header">
        <h5 class="modal-title">Categorical rating</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
    </div>
    <div class="modal-body m-auto">
        for _, c := range categories {
            <table class="mb-2" x-data={ "{ hover: -1, value: " + strconv.Itoa(c.UserRating) + " }" }>
                <tr class="p-0">
                    <td></td>
                    <td>
                        <div class="d-flex justify-content-between">
                            <span class="fw-semibold">{ c.Title }</span>
                            <span class="fw-semibold" x-text="hover == -1 ? value : hover"></span>
                        </div>
                    </td>
                </tr>
                <tr class="p-0">
                    <td>
                        <button
                            class="btn btn-outline-none bi bi-trash-fill px-1 m-auto"
                            hx-delete={ "/course/rating/" + code + "/" + strconv.Itoa(c.Code) }
                            @click="value = 0">
                        </button>
                    </td>
                    <td>
                        for i := 1; i <= 10; i++ {
                            <button
                                class="btn btn-outline-none px-1 py-0 lh-1 fs-2 bi"
                                :class={ "[ " + strconv.Itoa(i) + " <= hover && 'bi-star-fill', hover != -1 && " + strconv.Itoa(i) + " > hover && 'bi-star', hover == -1 && value < " + strconv.Itoa(i) + " && 'bi-star', hover == -1 && " + strconv.Itoa(i) + " <= value && 'bi-star-fill' ]" }
                                @mouseover={ "hover = " + strconv.Itoa(i) }
                                @mouseleave={ "hover = -1" }
                                @click={ "value = " + strconv.Itoa(i) }
                                hx-put={ "/course/rating/" + code + "/" + strconv.Itoa(c.Code) }
                                hx-vals={ `"rating": ` + strconv.Itoa(i) }>
                            </button>
                        }
                    </td>
                </tr>
            </table>
        }
    </div>
    </div>
    </div>
    </div>
}

templ rateButton(rating NullInt64, icon, code string, rate int64) {
    <button
        class={
            "py-0 btn btn-outline-dark bi",
            templ.KV(icon + "-fill", rating.Valid && rating.Int64 == rate),
            templ.KV(icon, !rating.Valid || rating.Int64 != rate),
        } 
        if rating.Valid && rating.Int64 == rate {
        hx-delete={ "/course/rating/" + code }
        } else {
        hx-put={ "/course/rating/" + code }
        hx-vals={ `"rating": ` + strconv.Itoa(int(rate)) }
        }
        hx-target="#rating"
        hx-swap="outerHTML">
        { children... }
    </button>
}

// TODO: this is just for VSCode template coloring, it can be inlined
func ratingStr(avgRating NullFloat64, numberOfRatings int) string {
    if avgRating.Valid { 
        return " " + strconv.Itoa(int(avgRating.Float64 * 100)) + "% (" + strconv.Itoa(numberOfRatings) + ")"
    }
    return ""
}

templ likeButton(rating NullInt64, avgRating NullFloat64, numberOfRatings int, code string) {
    @rateButton(rating, "bi-hand-thumbs-up", code, positiveRating) {
        { ratingStr(avgRating, numberOfRatings) }
    }
}

templ dislikeButton(rating NullInt64, code string) {
    @rateButton(rating, "bi-hand-thumbs-down", code, negativeRating)
}

templ Ratings(userRating NullInt64, avgRating NullFloat64, categories []CourseCategoryRating, code string, t text) {
    {{
        // TODO: use data from DB
        numOfRatings := 42
    }}
    <div id="rating">
        <div>
            <div class="btn-group" role="group">
                @likeButton(userRating, avgRating, numOfRatings, code)
                @dislikeButton(userRating, code)
            </div>

            <button type="button" class="btn btn-secondary" data-bs-toggle="modal" data-bs-target="#rateModal">
                Additional Rating
            </button>

            // Modal with rating categories
            @rateModal(categories, code, t)
        </div>
        for _, c := range categories {
            <div>
                <div class="d-flex justify-content-between">
                    <span class="fw-semibold">{ c.Title }</span>
                    <span class="fw-semibold">{ strconv.FormatFloat(c.AvgRating, 'f', 1, 64) + " (" + strconv.Itoa(numOfRatings) + ")" }</span>
                </div>
                <div class="progress" role="progressbar" style="height: 10px;">
                    // this div needs width style for bootstrap progress bar
                    // golang template for some reason do not allow dynamic style atribute
                    // so this is one of the few known workarounds - DO NOT TOUCH
                    <div
                        class="progress-bar rounded-pill"
                        { templ.Attributes{"style": "width: " + strconv.FormatFloat(c.AvgRating * 10, 'f', 2, 64) + "%;"}... }>
                    </div>
                </div>
            </div>
        }
    </div>
}

templ blueprintAssignment(code string, t text) {
    <div class="d-flex justify-content-center">
        <div class="btn-group">
            <button type="button" class="btn btn-lg btn-outline-blueprint"
                hx-post={ "/blueprint/course/" + code }
                hx-vals={ `"year": 0, "semester": 0, "lang": "` + t.Language + `"` }
            >
                { t.Assign }
            </button>
            <button type="button" class="btn btn-lg btn-outline-blueprint dropdown-toggle dropdown-toggle-split"
                data-bs-toggle="dropdown" aria-expanded="false">
            </button>
            <ul class="dropdown-menu">
            // TODO: make dynamic, NOT 3 fixed years
                for year := 1; year <= 3; year++ {
                    <li class="mx-3"><button class="dropdown-item text-center"
                        hx-post={ "/blueprint/course/" + code }
                        hx-vals={ `"year": ` + strconv.Itoa(year) + `, "semester": 1, "lang": "` + t.Language + `"` }
                    >
                    { t.YearStr(year) + " " + t.WinterAssign }
                    </button></li>
                    <li class="mx-3"><button class="dropdown-item text-center"
                        hx-post={ "/blueprint/course/" + code }
                        hx-vals={ `"year": ` + strconv.Itoa(year) + `, "semester": 2, "lang": "` + t.Language + `"` }
                    >
                    { t.YearStr(year) + " " + t.SummerAssign }
                    </button></li>
                }
            </ul>
        </div>
    </div>
}

func hoursString(course *Course, t text) string {
    result := ""
    both := strconv.Itoa(course.LectureRange1) + "/" + strconv.Itoa(course.SeminarRange1)
    winter := strconv.Itoa(course.LectureRange1) + "/" + strconv.Itoa(course.SeminarRange1)
    summer := strconv.Itoa(course.LectureRange2) + "/" + strconv.Itoa(course.SeminarRange2)

    switch course.Start {
    case teachingWinterOnly:
        result += winter
    case teachingSummerOnly:
        result += summer
    case teachingBoth:
        result += both
    }

    if course.SemesterCount == 2 {
        switch course.Start {
        case teachingWinterOnly:
            result += ", " + summer
        case teachingSummerOnly:
            result += ", " + winter
        case teachingBoth:
            result = "ERROR" // TODO: what should be done in this case? can it even happen?
        }
    }

    return result
}

func courseSISLink(code string, t text) string {
    if t.Language == "cs" {
        return "https://is.cuni.cz/studium/predmety/index.php?do=predmet&kod=" + code
    } else if t.Language == "en" {
        return "https://is.cuni.cz/studium/eng/predmety/index.php?do=predmet&kod=" + code
    }
    return "unsupported language"
}

templ accordionItem(desc NullDescription, id string) {
    if desc.Valid {
    <div class="accordion-item">
        <h2 class="accordion-header">
            <button class="accordion-button fs-4" type="button" data-bs-toggle="collapse" data-bs-target={ "#panel-" + id } aria-expanded="true" aria-controls={ "panel-" + id }>
                { utils.CapitalizeFirstLetter(desc.Title) }
            </button>
        </h2>
        <div id={ "panel-" + id } class="accordion-collapse collapse show">
            <div
                id={ "content-" + id }
                class="accordion-body"
                style="text-align: justify"
                x-init={ "insertContent('" + id + "', `" + desc.SanitizeContent(id == "annotation") + "`)" }>
            </div>
        </div>
        // inserting content as shadow DOM
        <script>
        function insertContent(id, content) {
            const shadowRoot = document.getElementById("content-" + id).attachShadow({ mode: 'open' });
            shadowRoot.innerHTML = `
                <style>
                    p {
                        margin-top: 10px;
                        margin-bottom: 10px;
                    }
                </style>
                ${content}
            `;
        }
        </script>
    </div>
    }
}

templ ribbon(ba Assignments, t text) {
    //if len(ba) > 0 {
        <div class="ribbon-detail">
            <span>{ ba.String(t.Language) }</span>
        </div>
    //}
}

templ requisites(course *Course, t text) {
    if course.Prereq.String() != "" {
        <p class="mb-1"><strong>{ t.Prerequisites }</strong></p>
        <p class="mb-2">{ course.Prereq.String() }</p>
    }
    if course.Coreq.String() != "" {
        <p class="mb-1"><strong>{ t.Corequisites }</strong></p>
        <p class="mb-2">{ course.Coreq.String() }</p>
    }
    if course.Interchange.String() != "" {
        <p class="mb-1"><strong>{ t.Interchange }</strong></p>
        <p class="mb-2">{ course.Interchange.String() }</p>
    }
    if course.Incompa.String() != "" {
        <p class="mb-1"><strong>{ t.Incompatible }</strong></p>
        <p class="mb-2">{ course.Incompa.String() }</p>
    }
}

templ standartBadge(icon, text string) {
    <span class="badge rounded-pill text-bg-light fs-6 my-1">
        <i class={ "bi " + icon }></i> { text }
    </span>
}

templ badges(course *Course, t text) {
    <div class="d-flex">
        <div class="flex-grow-1">
            @standartBadge("bi-coin", t.ECredits + ": " + strconv.Itoa(course.Credits))
            @standartBadge("bi-journal-bookmark-fill", course.Start.String(t.Language))
            @standartBadge("bi-calendar-week", hoursString(course, t) + " " + course.ExamType)
        </div>
        <div class="flex-grow-1 text-end">
            <span class="badge rounded-pill bg-blueprint fs-6 my-1">
                <i class="bi bi-stickies"></i> in blueprint
            </span>
            <span class="badge rounded-pill bg-success fs-6 my-1">
                <i class="bi bi-stickies"></i> completed
            </span>
            <span class="badge rounded-pill bg-danger fs-6 my-1">
                <i class="bi bi-stickies"></i> in degree plan
            </span>
        </div>
    </div>
    <div class="card-body">
        @standartBadge("bi-mortarboard", course.Faculty)
        @standartBadge("bi-chat-left-dots", course.Language)
        @standartBadge("bi-check-circle", course.State)
        @standartBadge("bi-person-lines-fill", course.Capacity)
        for _, c := range course.Classes {
            @standartBadge("bi-people", c.Name)
        }
        for _, c := range course.Classifications {
            @standartBadge("bi-folder", c.Name)
        }
    </div>
}

templ teacherStyledRow(t Teacher) {
    <tr>
        <td class="text-end teachers-first-column">
            if t.TitleBefore != "" {
                <small style="font-size: 0.6rem;">{ t.TitleBefore + " " }</small>
            }
        </td>
        <td>
            if t.TitleAfter != "" {
                <span class="fs-6 text-dark fw-semibold">{ t.FirstName + " " + t.LastName }</span><small style="font-size: 0.6rem;">{ ", " + t.TitleAfter }</small>
            } else {
                <span class="fs-6 text-dark fw-semibold">{ t.FirstName + " " + t.LastName }</span>
            }
        </td>
    </tr>
}

templ guarantorsTable(guarantors TeacherSlice, t text) {
    if len(guarantors) > 0 {
        <p id="guarantors-part" class="mb-1"><strong>{ t.Guarantors }</strong></p>
        <table id="guarantors-table" class="mb-2">
        for _, g := range guarantors {
            @teacherStyledRow(g)
        }
        </table>
    }
}

templ teachersTable(teachers TeacherSlice, t text) {
    if len(teachers) > 0 {
        <table id="teachers-table">
        for _, teacher := range teachers {
            @teacherStyledRow(teacher)
        }
        </table>
    }
}

templ teacherStyled(t Teacher) {
    if len(t.SisID) == 0 {
        // TODO: pripominky k predmetu (as text), if not valid than this text, add to translate
        <span class="fs-6 text-dark fw-semibold">GLOBAL</span> 
    } else {
        if t.TitleBefore != "" {
            <small style="font-size: 0.6rem;">{ t.TitleBefore + " " }</small>
        }
        if t.TitleAfter != "" {
            <span class="fs-6 text-dark fw-semibold">{ t.FirstName + " " + t.LastName }</span><small style="font-size: 0.6rem;">{ ", " + t.TitleAfter }</small>
        } else {
            <span class="fs-6 text-dark fw-semibold">{ t.FirstName + " " + t.LastName }</span>
        }
    }
}

templ accordion(course *Course, t text) {
    <div class="accordion accordion-flush">
        @accordionItem(course.Annotation, "annotation")
        @accordionItem(course.Syllabus, "syllabus")
        @accordionItem(course.PassingTerms, "passing-terms")
        @accordionItem(course.Literature, "literature")
        @accordionItem(course.AssesmentRequirements, "assesment-requirements")
        @accordionItem(course.EntryRequirements, "entry-requirements")
        @accordionItem(course.Aim, "aim")
    </div>
}

templ comments(comments []Comment, t text) {
    if len(comments) == 0 {
        <div class="alert alert-primary" role="alert">
            { t.NoComments }
        </div>
    } else {
        for _, comment := range comments {
            <div class="card mb-3">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <p class="mb-0">
                        @teacherStyled(comment.TargetTeacher)
                        { " " + comment.TargetType + " " + comment.AcademicYearString() }
                    </p>
                    <p class="mb-0">
                        { t.YearStr(comment.StudiesYear) + ", " + comment.StudiesType + ", " + comment.StudiesField }
                    </p>
                </div>
                <div class="card-body" style="text-align: justify">
                    { comment.Content }
                </div>
            </div>
        }
    }
}

templ details(course *Course, t text) {
    <ul class="nav nav-tabs" role="tablist">
        <li class="nav-item" role="presentation">
            <button class="nav-link active" data-bs-toggle="tab" data-bs-target="#detail-tab-pane" type="button" role="tab" aria-controls="detail-tab-pane" aria-selected="true">{ t.Detail }</button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" data-bs-toggle="tab" data-bs-target="#comments-tab-pane" type="button" role="tab" aria-controls="comments-tab-pane" aria-selected="false">{ t.Comments }</button>
        </li>
        if len(course.Teachers) > 0 {
            <li class="nav-item" role="presentation">
                <button class="nav-link" data-bs-toggle="tab" data-bs-target="#teachers-tab-pane" type="button" role="tab" aria-controls="teachers-tab-pane" aria-selected="false">{ t.Teachers }</button>
            </li>
        }
    </ul>
    <div class="tab-content" id="myTabContent">
        <div class="tab-pane fade show active pt-2" id="detail-tab-pane" role="tabpanel" tabindex="0">
            @accordion(course, t)
        </div>
        <div class="tab-pane fade pt-2" id="comments-tab-pane" role="tabpanel" tabindex="0">
            @comments(course.Comments, t)
        </div>
        if len(course.Teachers) > 0 {
            <div class="tab-pane fade pt-2 d-flex justify-content-center" id="teachers-tab-pane" role="tabpanel" tabindex="0">
                @teachersTable(course.Teachers, t)
            </div> 
        }
    </div>
}

templ Content(course *Course, t text) {
    <h1 class="text-center my-3">{ course.Code + " - " + course.Name }</h1>
    <div class="my-3">
        @badges(course, t)
    </div>
    <div class="my-3">
        <div class="d-flex">
            <div class="flex-grow-1" style="flex: 1;">
                @guarantorsTable(course.Guarantors, t)
                @requisites(course, t)
            </div>
            <div class="flex-grow-1" style="flex: 1;">
                @Ratings(course.UserOverallRating, course.AvgOverallRating, course.CategoryRatings, course.Code, t)
            </div>
        </div>
        if course.Link != "" {
            <div>
                <p><strong>{ t.AdditionalInfo + ": " }</strong><a href={ templ.SafeURL(course.Link) }>{ course.Link }</a></p>
            </div>
        }
        <div class="mt-3 text-center">
            <p><strong>{ t.SISLink + ": " }</strong><a href={ templ.SafeURL(courseSISLink(course.Code, t)) }>{ courseSISLink(course.Code, t) }</a></p>
        </div>
        @blueprintAssignment(course.Code, t)
    </div>
    // switch between detailed information, comments and teachers
    @details(course, t)
}

templ Page(course *Course, t text) {
    @utils.Page(course.Code + " - " + course.Name, t.Utils) {
        <div class="container pt-2">
            @Content(course, t)
        </div>
    }
}

templ PageNotFound(code string, t text) {
    @utils.Page("Course not found", t.Utils) {
        @ContentNotFound(code, t)
    }
}

templ ContentNotFound(code string, t text) {
    <h1>{ t.CourseWithCode + code + t.NotFound }</h1>
}