package coursedetail

import (
    "github.com/michalhercik/RecSIS/utils"
    "strconv"

    // TODO: remove after DB update
    "math/rand"
)

templ rateButton(rating NullInt64, icon, code string, rate int64) {
    <button
        class={
            "py-0 btn btn-outline-none bi",
            templ.KV(icon + "-fill", rating.Valid && rating.Int64 == rate),
            templ.KV(icon, !rating.Valid || rating.Int64 != rate),
        } 
        if rating.Valid && rating.Int64 == rate {
        hx-delete={ "/course/rating/" + code }
        } else {
        hx-put={ "/course/rating/" + code }
        hx-vals={ `"rating": ` + strconv.Itoa(int(rate)) }
        }
        hx-target="#rating"
        hx-swap="outerHTML">
    </button>
}

templ Ratings(rating NullInt64, categories []CourseCategoryRating, code string) {
    {{
        // TODO: use data from DB
        numOfRatings := 5798
        globalRating := 0.89123
        // TODO: remove after DB update, instead use global calculated rating from DB
        categoryRating := 0.0
    }}
    <div id="rating">
        <div>
            @rateButton(rating, "bi-hand-thumbs-down", code, negativeRating)
            { strconv.Itoa(int(globalRating * 100)) + "% (" + strconv.Itoa(numOfRatings) + ")" }
            @rateButton(rating, "bi-hand-thumbs-up", code, positiveRating)

            <button type="button" class="btn btn-secondary" data-bs-toggle="modal" data-bs-target="#rateModal">
                Add Additional Rating
            </button>

            // Modal with rating categories
            <div class="modal fade" id="rateModal" tabindex="-1">
            <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Categorical rating</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                for _, c := range categories {
                    <table>
                        <tr>
                            <td></td>
                            <td>
                                <div class="d-flex justify-content-between">
                                    <span>{ c.Title }</span>
                                    <span>{ strconv.Itoa(c.Rating) }</span>
                                </div>
                            </td>
                        </tr>
                        <tr>
                            <td class="d-flex justify-content-center" style="width: 20px;">
                                <button
                                    class="btn btn-sm btn-outline-none bi bi-trash-fill p-0"
                                    style="font-size: 0.8rem;">
                                </button>
                            </td>
                            <td class="w-100">
                                <div class="progress-stacked" x-data="{ hover: -1 }">
                                    for i := 0; i < c.Rating; i++ {
                                        <div class="progress" role="progressbar" style="width: 20%">
                                            <div
                                                class="progress-bar"
                                                :class={ strconv.Itoa(i) + " <= hover && 'bg-warning'" }
                                                @mouseover={ "hover = " + strconv.Itoa(i) }
                                                @mouseleave={ "hover = -1" }>
                                            </div>
                                        </div>
                                    }
                                    for i := c.Rating; i < 5; i++ {
                                        <div class="progress" role="progressbar" style="width: 20%">
                                            <div
                                                class="progress-bar"
                                                :class={ strconv.Itoa(i) + " <= hover ? 'bg-warning' : 'bg-light'" }
                                                @mouseover={ "hover = " + strconv.Itoa(i) }
                                                @mouseleave={ "hover = -1" }>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </td>
                        </tr>
                    </table>
                }
            </div>
            </div>
            </div>
            </div>
        </div>
        for _, c := range categories {
            {{
                // TODO: remove after DB update
                categoryRating = float64(rand.Intn(101)) / 100.0
            }}
            <div>
                <div class="d-flex justify-content-between">
                    <span>{ c.Title }</span>
                    <span>{ strconv.FormatFloat(categoryRating, 'f', 2, 64) }</span>
                </div>
                <div class="progress" role="progressbar">
                    // this div needs width style for bootstrap progress bar
                    // golang template for some reason do not allow dynamic style atribute
                    // so this is one of the few known workarounds - DO NOT TOUCH 
                    // TODO: tweak the color styles constants
                    <div
                        class={ "progress-bar", templ.KV("bg-success", categoryRating > 0.95), templ.KV("bg-danger", categoryRating < 0.20) }
                        { templ.Attributes{"style": "width: " + strconv.FormatFloat(categoryRating * 100, 'f', 2, 64) + "%;"}... }>
                    </div>
                </div>
            </div>
        }
    </div>
}

templ blueprintAssignment(code string, t text) {
    <div class="d-flex justify-content-center">
        <div class="btn-group">
            <button type="button" class="btn btn-lg btn-outline-blueprint"
                hx-post={ "/blueprint/course/" + code }  
                hx-vals={ `"year": 0, "semester": 0, "lang": "` + t.Language + `"` }
            >
                { t.Assign }
            </button>
            <button type="button" class="btn btn-lg btn-outline-blueprint dropdown-toggle dropdown-toggle-split"
                data-bs-toggle="dropdown" aria-expanded="false">
            </button>
            <ul class="dropdown-menu">
            // TODO: make dynamic, NOT 3 fixed years
                for year := 1; year <= 3; year++ {
                    <li class="mx-3"><button class="dropdown-item text-center"
                        hx-post={ "/blueprint/course/" + code }
                        hx-vals={ `"year": ` + strconv.Itoa(year) + `, "semester": 1, "lang": "` + t.Language + `"` }
                    >
                    { t.YearStr(year) + " " + t.Winter }
                    </button></li>
                    <li class="mx-3"><button class="dropdown-item text-center"
                        hx-post={ "/blueprint/course/" + code }
                        hx-vals={ `"year": ` + strconv.Itoa(year) + `, "semester": 2, "lang": "` + t.Language + `"` }
                    >
                    { t.YearStr(year) + " " + t.Summer }
                    </button></li>
                }
            </ul>
        </div>
    </div>
}

func semesterHoursExamsString(course *Course, t text) string {
    result := course.Start.String(t.Language) + " "
    both := strconv.Itoa(course.LectureRange1) + "/" + strconv.Itoa(course.SeminarRange1)
    winter := strconv.Itoa(course.LectureRange1) + "/" + strconv.Itoa(course.SeminarRange1)
    summer := strconv.Itoa(course.LectureRange2) + "/" + strconv.Itoa(course.SeminarRange2)
    
    switch course.Start {
    case teachingWinterOnly:
        result += winter
    case teachingSummerOnly:
        result += summer
    case teachingBoth:
        result += both
    }

    if course.SemesterCount == 2 {
        switch course.Start {
        case teachingWinterOnly:
            result += " " + t.SummerAssign + " " + summer
        case teachingSummerOnly:
            result += " " + t.WinterAssign + " " + winter
        case teachingBoth:
            result = "ERROR" // TODO: what should be done in this case? can it even happen?
        }
    }

    return result + ", " + course.ExamType
}

func courseSISLink(code string, t text) string {
    if t.Language == "cs" {
        return "https://is.cuni.cz/studium/predmety/index.php?do=predmet&kod=" + code
    } else if t.Language == "en" {
        return "https://is.cuni.cz/studium/eng/predmety/index.php?do=predmet&kod=" + code
    }
    return "unsupported language"
}

templ accordionItem(desc NullDescription, id string) {
    if desc.Valid {
    <div class="accordion-item">
        <h2 class="accordion-header">
            <button class="accordion-button fs-4" type="button" data-bs-toggle="collapse" data-bs-target={ "#panel-" + id } aria-expanded="true" aria-controls={ "panel-" + id }>
                { utils.CapitalizeFirstLetter(desc.Title) }
            </button>
        </h2>
        <div id={ "panel-" + id } class="accordion-collapse collapse show">
            <div
                id={ "content-" + id }
                class="accordion-body"
                style="text-align: justify"
                x-init={ "insertContent('" + id + "', `" + desc.SanitizeContent(id == "annotation") + "`)" }>
            </div>
        </div>
        // inserting content as shadow DOM
        <script>
        function insertContent(id, content) {
            const shadowRoot = document.getElementById("content-" + id).attachShadow({ mode: 'open' });
            shadowRoot.innerHTML = `
                <style>
                    p {
                        margin-top: 10px;
                        margin-bottom: 10px;
                    }
                </style>
                ${content}
            `;
        }
        </script>
    </div>
    }
}

templ ribbon(ba Assignments, t text) {
    //if len(ba) > 0 {
        <div class="ribbon-detail">
            <span>{ ba.String(t.Language) }</span>
        </div>
    //}
}

templ guarantors(guarantors []Teacher) {
    <p
        class="card-subtitle mb-2 text-muted text-center">
        for i, g := range guarantors {
            if g.TitleBefore != "" {
                <small style="font-size: 0.75rem;">{ g.TitleBefore + " " }</small>
            }
            if g.TitleAfter != "" {
                <span class="fs-5 text-dark fw-semibold">{ g.FirstName + " " + g.LastName }</span><small style="font-size: 0.75rem;">{ ", " + g.TitleAfter }</small>
            } else {
                <span class="fs-5 text-dark fw-semibold">{ g.FirstName + " " + g.LastName }</span>
            }
            if i < len(guarantors) - 1 {
                // space between guarantors
                &emsp; 
            }
        }
    </p>
}

templ teacherStyledRow(t Teacher, position int) {
    <tr x-show={ "showAll || " + strconv.Itoa(position) + " < 10" }>
        <td class="text-end teachers-first-column">
            if t.TitleBefore != "" {
                    <small style="font-size: 0.6rem;">{ t.TitleBefore + " " }</small>
            }
        </td>
        <td>
            if t.TitleAfter != "" {
                <span class="fs-6 text-dark fw-semibold">{ t.FirstName + " " + t.LastName }</span><small style="font-size: 0.6rem;">{ ", " + t.TitleAfter }</small>
            } else {
                <span class="fs-6 text-dark fw-semibold">{ t.FirstName + " " + t.LastName }</span>
            }
        </td>
    </tr>
}

templ accordion(course *Course, t text) {
    <div class="accordion accordion-flush">
        @accordionItem(course.Annotation, "annotation")
        @accordionItem(course.Syllabus, "syllabus")
        @accordionItem(course.PassingTerms, "passing-terms")
        @accordionItem(course.Literature, "literature")
        @accordionItem(course.AssesmentRequirements, "assesment-requirements")
        @accordionItem(course.EntryRequirements, "entry-requirements")
        @accordionItem(course.Aim, "aim")
    </div>
}

templ Content(course *Course, t text) {
    // TODO only if not empty/nil/...
    <div
        id="basic-info"
        class="card"
        style="width: 100%;"
    >
        <div class="card-header d-flex justify-content-between align-items-center">
            <h6 class="mb-0 fs-4">{ course.Code }</h6>
            <p class="mb-0 fs-4">{ semesterHoursExamsString(course, t) }</p>
            <p class="mb-0 fs-4">{ t.ECredits + ": " + strconv.Itoa(course.Credits) }</p>
        </div>
        <div class="card-body d-flex flex-column align-items-center position-relative">
            @ribbon(course.BlueprintAssignments, t)
            <h1 class="card-title text-center" style="width: 80%">{ course.Name }</h1>
            @guarantors(course.Guarantors)
        </div>
        <div class="card-body">
            <div class="d-flex justify-content-between" style="padding: 0 5%;">
                <div class="flex-grow-1 d-flex flex-column me-3" style="flex: 1;">
                    <p class="mb-1"><strong>{ t.Faculty }</strong></p>
                    <p class="mb-2">{ course.Faculty }</p>
                    <p class="mb-1"><strong>{ t.Capacity }</strong></p>
                    <p class="mb-2">{ course.Capacity }</p>
                    <p class="mb-1"><strong>{ t.StateOfCourse }</strong></p>
                    <p class="mb-2">{ course.State }</p>
                    <p class="mb-1"><strong>{ t.LanguageOfCourse }</strong></p>
                    <p class="mb-2">{ course.Language }</p>
                    if course.Link != "" {
                        <p class="mb-1"><strong>{ t.AdditionalInfo }</strong></p>
                        <p class="mb-2"><a href={ templ.SafeURL(course.Link) }>{ course.Link }</a></p>
                    }
                </div>
                <div class="flex-grow-1 d-flex flex-column ms-3" style="flex: 1;">
                    if len(course.Teachers) > 0 {
                        <p id="teachers-part" class="mb-1"><strong>{ t.Teachers }</strong></p>
                        <table id="teachers-table" x-data="{ showAll: false }">
                        for i, teacher := range course.Teachers {
                            @teacherStyledRow(teacher, i)
                        }
                        if len(course.Teachers) > 10 {
                            <tr><td></td><td>
                            <button
                                class="btn btn-link text-secondary"
                                @click="showAll = !showAll; if (!showAll) scrollToTeachers()"
                                x-text={ "showAll ? '" + t.ShowLess + "' : '" + t.ShowMore + "'" }>
                            </button>
                            </td></tr>
                        }
                        </table>
                        <script>
                        function scrollToTeachers() {
                            const anchor = document.getElementById('teachers-part');
                            const offset = -52; // top navbar height
                            const topPosition = anchor.getBoundingClientRect().top + window.scrollY + offset;
                            window.scrollTo({ top: topPosition, behavior: 'smooth' });
                        }
                        </script>
                    }
                </div>
            </div>
            @Ratings(course.OverallRating, course.CategoryRatings, course.Code)
            <div class="mt-3 text-center">
                <p><strong>{ t.SISLink + ": " }</strong><a href={ templ.SafeURL(courseSISLink(course.Code, t)) }>{ courseSISLink(course.Code, t) }</a></p>
            </div>
            @blueprintAssignment(course.Code, t)
        </div>
        @accordion(course, t)
    </div>
}

templ Page(course *Course, t text) {
    @utils.Page(course.Code + " - " + course.Name, t.Utils) {
        <div class="container pt-2">
            @Content(course, t)
        </div>
    }
}

templ PageNotFound(code string, t text) {
    @utils.Page("Course not found", t.Utils) {
        @ContentNotFound(code, t)
    }
}

templ ContentNotFound(code string, t text) {
    <h1>{ t.CourseWithCode + code + t.NotFound }</h1>
}