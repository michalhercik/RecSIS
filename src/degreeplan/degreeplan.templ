package degreeplan

import (
    "github.com/michalhercik/RecSIS/utils"
    "fmt"
)

templ Content(dp *DegreePlan, t text, bpBtn PartialBlueprintAdd) {
    <div class="container pt-3" hx-indicator="#loader">
        for _, bloc := range dp.blocs {
            // bloc title, icon, credits and limit
            @completionStatusBadges(&bloc, t)
            @blocName(&bloc, "d-md-none", "px-1 my-1", t)
            // table with courses
            <table class="table table-sm table-hover degree-plan-table">
                @tableHeader(&bloc, t)
                <tbody>
                    for _, course := range bloc.Courses {
                        @CourseRow(&course, bloc.IsCompulsory, bpBtn, t)
                    }
                </tbody>
            </table>
        }
    </div>
}

templ completionStatusBadges(bloc *Bloc, t text) {
    <div class="d-flex gap-2 status-badges">
        <span class="badge bg-success">
            { fmt.Sprintf(" %d/%d", bloc.completedCredits(), bloc.Limit) }
        </span>
        <span class="badge bg-blueprint">
            { fmt.Sprintf("%d/%d", bloc.assignedCredits(), bloc.Limit) }
        </span>
        <span class="badge bg-unassigned">
            { fmt.Sprintf("%d/%d", bloc.blueprintCredits(), bloc.Limit) }
        </span>
    </div>
}

templ tableHeader(bloc *Bloc, t text) {
    <thead>
        <tr>
            // checkbox
            <th></th>
            if bloc.Name != "" {
                // code
                <th>
                    @blocName(bloc, "d-none d-md-block", "text-nowrap", t)
                    <span class="d-md-none">{ t.Code }</span>
                </th>
                // title
                <th><span class="d-md-none">{ t.Title }</span></th>
            } else {
                // code
                <th>{ t.Code }</th>
                // title
                <th>{ t.Title }</th>
            }
            // status
            <th></th>
            // credits
            <th class="th-overflow credits-column">{ t.Credits }</th>
            // winter
            <th class="d-none d-lg-table-cell">{ t.Winter }</th>
            // summer
            <th class="d-none d-lg-table-cell">{ t.Summer }</th>
            // guarantors
            <th class="d-none d-xl-table-cell">{ t.Guarantors }</th>
            // blueprint button
            <th class="th-overflow"><span class="d-none d-lg-inline">{ t.Blueprint }</span></th>
        </tr>
    </thead>
}

templ blocName(bloc *Bloc, show, classes string, t text) {
    if bloc.Name != "" {
        <h5 class={ "mb-0", classes, show }>
            { utils.CapitalizeFirstLetter(bloc.Name) }
            @statusIcon(bloc, t)
        </h5>
    }
}

templ CourseRow(course *Course, isCompulsory bool, bpBtn PartialBlueprintAdd, t text) {
    <tr
        id={ fmt.Sprintf("assign-row-%s", course.Code) }
        x-data="{ hoverRow: false }"
        @mouseover="hoverRow = true"
        @mouseleave="hoverRow = false">
        // checkbox
        <td></td>
        // <td class="text-center align-middle" @click="if (smallScreen && !$event.target.closest('input[type=checkbox]')) handleTdClick($event)"> @checkbox(course.ID) </td>
        // code
        <td> @utils.CourseLink(course.Code, t.Utils) </td>
        // title
        <td class={ templ.KV("fw-bold", isCompulsory) }> @utils.TitleCourseLink(course.Code, course.Title, true, t.Utils) </td>
        // status
        <td class="align-middle lh-1"> @statusBadge(course, t) </td>
        // credits
        <td class="text-end credits-column">{ fmt.Sprintf("%d", course.Credits) }</td>
        // winter
        <td class="d-none d-lg-table-cell">{ winterString(course) }</td>
        // summer
        <td class="d-none d-lg-table-cell">{ summerString(course) }</td>
        // guarantors
        <td class="d-none d-xl-table-cell">{ course.Guarantors.string() }</td>
        // blueprint button
        <td class="text-start align-middle p-0">
            @bpBtn(course.Code, "outerHTML", "body")
        </td>
    </tr>
}

templ checkbox(ID int) {
    <div class="checkbox-container position-relative" x-data>
        <input
            type="checkbox"
            id={ fmt.Sprintf("checkbox%d", ID) }
            class="form-check-input bp-checkbox"
            name="selected"
            value={ fmt.Sprintf("%d", ID) }
            @change="checkedNumber = $event.target.checked ? checkedNumber + 1 : checkedNumber - 1;"
            @uncheck-all.window="$el.checked = false;"
        />
        // circle overlay for easier clicking
        <div class="d-none d-md-inline">
            <div
                class="circle-overlay"
                @click="handleCircleClick($event)">
            </div>
        </div>
    </div>
}

templ statusIcon(bloc *Bloc, t text) {
    if bloc.isCompleted() {
        // most important is completion status
        <i class="bi bi-check-lg text-success"></i>
    } else if bloc.isAssigned() {
        // if not completed, check if assigned
        <i class="bi bi-basket2 blueprint-color"></i>
    } else if bloc.hasLimit() {
        // if not even assigned and has limit, then it is not completed
        <i class="bi bi-x-lg text-danger"></i>
    }
}

templ statusBadge(course *Course, t text) {
    // TODO: add course completion status -> change `false` to `course.Completed`
    if false {
        // most important is completion status
        @badge("bg-success", t.Completed)
    } else if course.isAssigned() {
        // if not completed, check if assigned
        @badge("bg-blueprint", t.InBlueprint)
    } else if course.isUnassigned() {
        // if not even assigned, check if unassigned
        @badge("bg-unassigned", t.Unassigned)
    } else {
        // if nothing else, then it is not completed
        @badge("bg-danger", t.NotCompleted)
    }
}

templ badge(color, text string) {
    // small badge for mobile
    <span class={ "d-none d-md-inline-block rounded-pill badge", color }> { text } </span>
    // big badge for desktop
    <span class={ "badge-circle d-inline-flex d-md-none align-center rounded-circle", color }>
        <span class="visually-hidden">{ text }</span>
    </span>
}

func winterString(course *Course) string {
    winterText := ""
    if course.Start == teachingWinterOnly || course.Start == teachingBoth {
        winterText = fmt.Sprintf("%d/%d, %s", course.LectureRange1, course.SeminarRange1, course.ExamType)
    } else {
        winterText = "---"
    }
    return winterText
}

func summerString(course *Course) string {
    summerText := ""
    if course.Start == teachingSummerOnly {
        summerText = fmt.Sprintf("%d/%d, %s", course.LectureRange2, course.SeminarRange2, course.ExamType)
    } else if course.Start == teachingBoth {
        summerText = fmt.Sprintf("%d/%d, %s", course.LectureRange1, course.SeminarRange1, course.ExamType)
    } else {
        summerText = "---"
    }
    return summerText
}