package degreeplan

import (
    "github.com/michalhercik/RecSIS/utils"
    "fmt"
)

templ Content(dp *DegreePlan, t text, bpBtnRow PartialBlueprintAdd, bpBtnChecked PartialBlueprintAdd) {
    <div
        id="degreeplan-content"
        class="container position-relative"
        x-data="{ checkedNumber: 0, smallScreen: window.innerWidth < 768, searchOpened: false }"
        x-init="$nextTick(() => updateStickyOffset())"
        @resize.window="smallScreen = window.innerWidth < 768"
        hx-indicator="#loader"
    >
        @chooseDegreePlanModal(t)
        @checkedCoursesMenu(dp.bpNumberOfSemesters(), bpBtnChecked, t)
        for _, bloc := range dp.blocs {
            // bloc title, icon, credits and limit
            @completionStatusBadges(&bloc, t)
            @blocName(&bloc, "d-md-none", "px-1 my-1", t)
            // table with courses
            <table class="table table-sm degree-plan-table mb-4" :class="{ 'table-hover': !smallScreen }">
                @tableHeader(&bloc, t)
                <tbody>
                    for _, course := range bloc.Courses {
                        @CourseRow(&course, bloc.IsCompulsory, bpBtnRow, t)
                    }
                </tbody>
            </table>
        }
        <script defer src="/js/degreeplan.js"></script>
    </div>
}

templ chooseDegreePlanModal(t text) {
    <button
        type="button"
        class="btn bg-degreeplan position-absolute choose-degree-plan-btn"
        data-bs-toggle="modal" data-bs-target="#chooseDegreePlanModal">
        { t.ShowDegreePlan }
    </button>

    <div class="modal fade" id="chooseDegreePlanModal" tabindex="-1" aria-labelledby="chooseDegreePlanModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="chooseDegreePlanModalLabel">{ t.ChooseDegreePlan }</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div id="choose-degree-plan-modal-body" class="modal-body">
                    <div class="input-group mb-3">
                        <input
                            type="text"
                            name="q"
                            class="form-control search-input"
                            placeholder={ t.DegreePlanPlaceholder }
                            hx-get={ t.Utils.Language.Path("/degreeplan/search") }
                            hx-trigger="keyup changed delay:200ms"
                            hx-target="#dp-results"
                            autocomplete="off">
                        <div class="form-floating dp-select-year-width">
                            <select id="dp-year" class="form-select" name="dp-year">
                                <option selected value="2025">2025</option>
                                for i := 2024; i >= 2015; i-- {
                                    <option value={ fmt.Sprintf("%d", i) }>{ fmt.Sprintf("%d", i) }</option>
                                }
                            </select>
                            <label for="dp-year">{ t.EnrollmentYear }</label>
                        </div>
                    </div>
                    @quickSearchResults()
                </div>
            </div>
        </div>
    </div>
}

templ quickSearchResults() {
    <div id="dp-results">
        { children... }
    </div>
}

templ QuickSearchResultsContent(results []QuickDegreePlan, t text) {
    @quickSearchResults() {
        if len(results) == 0 {
            <div class="alert alert-info" role="alert">
                { t.NoDegreePlanResults }
            </div>
        } else {
            <table class="table table-sm table-borderless mb-0" hx-include="#dp-year">
                for _, result := range results {
                    <tr>
                        <td><a
                            href={ templ.URL(t.Utils.Language.Path("/degreeplan/" + result.Code)) }
                            data-bs-dismiss="modal">
                            { result.Code }
                        </a></td>
                        <td class="text-wrap"><a
                            href={ templ.URL(t.Utils.Language.Path("/degreeplan/" + result.Code)) }
                            data-bs-dismiss="modal">
                            { result.Name }
                        </a> </td>
                        <td class="text-end">
                            <span class="badge bg-info">{ result.Type }</span>
                        </td>
                    </tr>
                }
            </table>
        }
    }
}

templ checkedCoursesMenu(semCount int, bpBtn PartialBlueprintAdd, t text) {
    // take care of checked courses
    <div id="dp-checked-courses-menu" @resize.window="updateStickyOffset" class="pe-none bg-transparent">
        <div x-cloak x-show="checkedNumber > 0" class="pe-auto bg-white">
            // uncheck all checkboxes
            <button
                class="btn big-mobile-btn btn-outline-secondary border-0 bi bi-dash-square"
                @click="checkedNumber = 0; $dispatch('uncheck-all'); $el.blur();">
            </button>
            // assign
            @bpBtn("outerHTML", "#degreeplan-content", "input:checked[name=selected]", make([]bool, semCount))
        </div>
    </div>
}

templ completionStatusBadges(bloc *Bloc, t text) {
    <h5 class="d-flex gap-2 status-badges mb-0">
        <div class="d-flex justify-content-start">
            <span class="badge bg-success rounded-end-0 py-2 text-decoration-line-through">{ t.Completed }</span>
            <span class="badge bg-success-dark rounded-start-0 py-2 text-decoration-line-through">
                { fmt.Sprintf(" %d/%d", bloc.completedCredits(), bloc.Limit) }
            </span>
        </div>
        <div class="d-flex justify-content-start">
            <span class="badge bg-blueprint rounded-end-0 py-2">{ t.Blueprint }</span>
            <span class="badge bg-blueprint-dark rounded-start-0 py-2">
                { fmt.Sprintf("%d/%d", bloc.assignedCredits(), bloc.Limit) }
                if bloc.assignedCredits() != bloc.blueprintCredits() {
                    <span class="small-dark-text">{ fmt.Sprintf("%d/%d", bloc.blueprintCredits(), bloc.Limit) }</span>
                }
            </span>
        </div>
    </h5>
}

templ tableHeader(bloc *Bloc, t text) {
    <thead>
        <tr>
            // checkbox + status
            <th></th>
            if bloc.Name != "" {
                // code
                <th class="d-none d-md-table-cell">
                    @blocName(bloc, "d-none d-md-block", "text-nowrap", t)
                </th>
                // title
                <th></th>
            } else {
                // code
                <th class="d-none d-md-table-cell">{ t.Code }</th>
                // title
                <th><span class="d-none d-md-inline">{ t.Title }</span></th>
            }
            // credits
            <th class="d-none d-md-table-cell th-overflow credits-column">{ t.Credits }</th>
            // winter
            <th class="d-none d-lg-table-cell">{ t.Winter }</th>
            // summer
            <th class="d-none d-lg-table-cell">{ t.Summer }</th>
            // guarantors
            <th class="d-none d-xl-table-cell">{ t.Guarantors }</th>
            // blueprint button
            <th class="d-none d-md-table-cell th-overflow">
                <span class="d-none d-lg-inline">{ t.Blueprint }</span>
            </th>
        </tr>
    </thead>
}

templ blocName(bloc *Bloc, show, classes string, t text) {
    if bloc.Name != "" {
        <h5 class={ "mb-0", classes, show }>
            { utils.CapitalizeFirstLetter(bloc.Name) }
            @statusIcon(bloc, t)
        </h5>
    }
}

templ statusIcon(bloc *Bloc, t text) {
    if bloc.isCompleted() {
        // most important is completion status
        <i class="bi bi-check-lg text-success"></i>
    } else if bloc.isAssigned() {
        // if not completed, check if assigned
        <i class="bi bi-basket2 blueprint-color"></i>
    } else if bloc.hasLimit() {
        // if not even assigned and has limit, then it is not completed
        <i class="bi bi-x-lg text-danger"></i>
    }
}

templ CourseRow(course *Course, isCompulsory bool, bpBtn PartialBlueprintAdd, t text) {
    <tr
        id={ fmt.Sprintf("dp-row-%s", course.Code) }
        x-data="{ hoverRow: false }"
        @mouseover="hoverRow = true"
        @mouseleave="hoverRow = false">
        // checkbox + status
        <td
            class="text-center align-middle position-relative"
            @click.self="if (smallScreen) handleTdClick($event)">
            @checkbox(course)
            <div class="d-md-none">
                @warningIcon(course, t)
            </div>
        </td>
        // code
        <td class="d-none d-md-table-cell position-relative">
            @utils.CourseLink(course.Code, t.Utils)
            @warningIcon(course, t)
        </td>
        // title
        <td>
            <div class="d-flex justify-content-between">
                <span class={ "d-none d-md-inline", templ.KV("fw-bold", isCompulsory) }>
                    @utils.TitleCourseLink(course.Code, course.Title, true, t.Utils)
                </span>
                <span class="d-none d-md-inline d-lg-none dp-lg-semester">
                    { fmt.Sprintf("%s %s, %s", semesterString(course, t), hoursString(course, t), course.ExamType) }
                </span>
            </div>
            @mobileInfoTd(course, isCompulsory, t)
        </td>
        // credits
        <td class="d-none d-md-table-cell text-end credits-column">{ fmt.Sprintf("%d", course.Credits) }</td>
        // winter
        <td class="d-none d-lg-table-cell">{ winterString(course) }</td>
        // summer
        <td class="d-none d-lg-table-cell">{ summerString(course) }</td>
        // guarantors
        <td class="d-none d-xl-table-cell">{ course.Guarantors.string() }</td>
        // blueprint button
        <td class="d-none d-md-table-cell text-start align-middle p-0">
            @bpBtn("outerHTML", "#degreeplan-content", "", course.BlueprintSemesters, course.Code)
        </td>
    </tr>
}

templ checkbox(course *Course) {
    <div class="checkbox-container position-relative">
        // circle under the checkbox - course status
        <div class={ "circle-underlay", course.statusBackgroundColor() }></div>
        // checkbox
        <input
            type="checkbox"
            id={ fmt.Sprintf("dp-checkbox-%s", course.Code) }
            class="form-check-input dp-checkbox"
            name="selected"
            value={ fmt.Sprintf("%s", course.Code) }
            @change={ fmt.Sprintf("checkedNumber = $event.target.checked ? checkedNumber + 1 : checkedNumber - 1; updateCheckedCoursesMenu(%d)", len(course.BlueprintSemesters) )}
            @uncheck-all.window="$el.checked = false;"
        />
        // circle overlay for easier clicking
        <div class="d-none d-md-inline">
            <div
                role="button"
                class="circle-overlay"
                @click="handleCircleClick($event)">
            </div>
        </div>
    </div>
}

templ warningIcon(course *Course, t text) {
    if course.isUnassigned() && !course.isAssigned() {
        <span
            class="bi bi-exclamation-lg text-danger fs-4 position-absolute dp-warning"
            data-bs-toggle="tooltip"
            data-bs-placement="bottom"
            data-bs-title={ t.CourseIsUnassigned }>
        </span>
    }
}

templ mobileInfoTd(course *Course, isCompulsory bool, t text) {
    <div class="d-flex flex-column d-md-none">
        <div class="d-flex justify-content-between align-items-center small lh-1">
            <span class="text-muted dp-mobile-code">
                { course.Code }
            </span>
            <span class="text-muted dp-mobile-semester">
                { fmt.Sprintf("%s %s, %s", semesterString(course, t), hoursString(course, t), course.ExamType) }
            </span>
            <span class="text-muted dp-mobile-credits">
                { fmt.Sprintf("%s: %d", t.CreditsShort, course.Credits) }
            </span>
        </div>
        <span class={ "fw-semibold small-screen-title", templ.KV("fw-bold", isCompulsory) }>
            @utils.TitleCourseLink(course.Code, course.Title, true, t.Utils)
        </span>
    </div>
}

func winterString(course *Course) string {
    winterText := ""
    if course.Start == teachingWinterOnly || course.Start == teachingBoth {
        winterText = fmt.Sprintf("%d/%d, %s", course.LectureRange1, course.SeminarRange1, course.ExamType)
    } else {
        winterText = "---"
    }
    return winterText
}

func summerString(course *Course) string {
    summerText := ""
    if course.Start == teachingSummerOnly {
        summerText = fmt.Sprintf("%d/%d, %s", course.LectureRange2, course.SeminarRange2, course.ExamType)
    } else if course.Start == teachingBoth {
        summerText = fmt.Sprintf("%d/%d, %s", course.LectureRange1, course.SeminarRange1, course.ExamType)
    } else {
        summerText = "---"
    }
    return summerText
}

func semesterString(c *Course, t text) string {
    switch c.Start {
        case teachingBoth:
            return t.Both
        case teachingWinterOnly:
            return t.Winter
        case teachingSummerOnly:
            return t.Summer
        default:
            return ""
    }
}

// TODO: after refactor to lectureWinter + valid, etc use this
// func hoursString(course *Course, t text) string {
//     result := ""
//     winter := course.LectureRangeWinter.Valid && course.SeminarRangeWinter.Valid
//     summer := course.LectureRangeSummer.Valid && course.SeminarRangeSummer.Valid
//     if winter {
//         result += fmt.Sprintf("%d/%d", course.LectureRangeWinter.Int64, course.SeminarRangeWinter.Int64)
//     }
//     if winter && summer {
//         result += ", "
//     }
//     if summer {
//         result += fmt.Sprintf("%d/%d", course.LectureRangeSummer.Int64, course.SeminarRangeSummer.Int64)
//     }
//     return result
// }
func hoursString(course *Course, t text) string {
    result := ""
    both := fmt.Sprintf("%d/%d", course.LectureRange1, course.SeminarRange1)
    winter := fmt.Sprintf("%d/%d", course.LectureRange1, course.SeminarRange1)
    summer := fmt.Sprintf("%d/%d", course.LectureRange2, course.SeminarRange2)

    switch course.Start {
        case teachingWinterOnly:
            result += winter
        case teachingSummerOnly:
            result += summer
        case teachingBoth:
            result += both
    }

    if course.SemesterCount == 2 {
        switch course.Start {
        case teachingWinterOnly:
            result += " " + t.Summer + " " + summer
        case teachingSummerOnly:
            result += " " + t.Winter + " " + winter
        case teachingBoth:
            result = "ERROR" // TODO: what should be done in this case? can it even happen?
        }
    }

    return result
}