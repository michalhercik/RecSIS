package degreeplan

templ scripts() {
	<script>
		setupCheckboxShiftClick();
		updateStickyOffset();
		initializeTooltips();

		// shift click for multiple checkboxes
		function setupCheckboxShiftClick() {
			let lastChecked = null;
			const checkboxes = document.querySelectorAll('input[type="checkbox"][name="selected-courses"]');
			checkboxes.forEach(checkbox => {
				checkbox.addEventListener('click', function (e) {
					if (lastChecked && lastChecked !== this && e.shiftKey) {
						let inBetween = false;
						checkboxes.forEach(box => {
							if (box === this || box === lastChecked) {
								inBetween = !inBetween;
							}
							else if (inBetween && box.checked !== this.checked) {
								box.checked = this.checked;
								box.dispatchEvent(new Event('change'));
							}
						});
						if (lastChecked.checked !== this.checked) {
							lastChecked.checked = this.checked;
							lastChecked.dispatchEvent(new Event('change'));
						}
					}
					lastChecked = this;
				});
			});
		}

		// pass through (shift-)click event to checkbox
		function handleCircleClick(event) {
			const checkbox = event.target.parentElement.previousElementSibling;
			if (checkbox) {
				// Create a new MouseEvent, preserving shift key and other properties
				const clickEvent = new MouseEvent('click', {
					bubbles: true,
					cancelable: true,
					shiftKey: event.shiftKey,
				});

				checkbox.dispatchEvent(clickEvent);
			}
		}

		// pass through click event to checkbox on small screens
		function handleTdClick(event) {
			const checkbox = event.target.querySelector('input[type="checkbox"][name="selected-courses"]');
			if (checkbox) {
				// Create a new MouseEvent, preserving shift key and other properties
				const clickEvent = new MouseEvent('click', {
					bubbles: true,
					cancelable: true,
					shiftKey: event.shiftKey,
				});

				checkbox.dispatchEvent(clickEvent);
			}
		}

		// Update the sticky offset for the checked-courses-menu based on the header height
		function updateStickyOffset() {
			const header = document.querySelector('header');
			const menu = document.getElementById('dp-checked-courses-menu');
			if (header && menu) {
				const height = header.offsetHeight;
				menu.style.top = height + 'px';
			}
		}

		// bootstrap tooltip initialization
		function initializeTooltips() {
			// Initialize new tooltips
			const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle="tooltip"]')
			const tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl))
		};

		// Add checked courses to BP btn can add only to the union of not yet assigned semesters of all checked courses 
		function updateCheckedCoursesMenu(semesterCount) {
			const checkedCourses = Array.from(document.querySelectorAll('input[type="checkbox"][name="selected-courses"]:checked'));
			const disabledSemesters = Array(semesterCount).fill(false);

			checkedCourses.forEach(checkbox => {
				// Get the table row
				const row = checkbox.closest('tr');
				if (!row) return;
				// Get the last td (blueprint button cell)
				const lastTd = row.querySelector('td:last-child');
				if (!lastTd) return;

				// Find the assign to unassigned button
				const plusBtn = lastTd.querySelector('button.assign-to-unassigned-btn');
				if (plusBtn && plusBtn.disabled) {
					// Mark first semester (unassigned) as disabled
					disabledSemesters[0] = true;
				}

				// Find dropdown items (semester assign buttons)
				const dropdownItems = lastTd.querySelectorAll('.dropdown-menu .dropdown-item');
				dropdownItems.forEach((item, idx) => {
					if (item.disabled) {
						// Mark this semester as disabled
						disabledSemesters[idx + 1] = true;
					}
				});
			});

			// Now update the checked-courses-menu buttons
			const menu = document.getElementById('dp-checked-courses-menu');
			if (!menu) return;
			const innerDiv = menu.querySelector('div > div');
			if (!innerDiv) return;

			// Update the assign-to-unassigned button (first semester)
			const assignBtn = innerDiv.querySelector('button.assign-to-unassigned-btn');
			if (assignBtn) {
				assignBtn.disabled = disabledSemesters[0];
			}

			// Update dropdown items (other semesters)
			const dropdownItems = innerDiv.querySelectorAll('.dropdown-menu .dropdown-item');
			dropdownItems.forEach((item, idx) => {
				if (idx < disabledSemesters.length) {
					item.disabled = disabledSemesters[idx + 1];
				}
			});
		}
	</script>
}