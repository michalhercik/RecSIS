package degreeplan

import (
    "github.com/michalhercik/RecSIS/utils"
    "strconv"
)

func hoursExamsString(lecture, seminar int, examType string) string {
    return strconv.Itoa(lecture) + "/" + strconv.Itoa(seminar) + ", " + examType
}

func winterString(course *Course) string {
    winterText := ""
    if course.Start == teachingWinterOnly || course.Start == teachingBoth {
        winterText = strconv.Itoa(course.LectureRange1) + "/" + strconv.Itoa(course.SeminarRange1) + ", " + course.ExamType
    } else {
        winterText = "---"
    }
    return winterText
}

func summerString(course *Course) string {
    summerText := ""
    if course.Start == teachingSummerOnly {
        summerText = strconv.Itoa(course.LectureRange2) + "/" + strconv.Itoa(course.SeminarRange2) + ", " + course.ExamType
    } else if course.Start == teachingBoth {
        summerText = strconv.Itoa(course.LectureRange1) + "/" + strconv.Itoa(course.SeminarRange1) + ", " + course.ExamType
    } else {
        summerText = "---"
    }
    return summerText
}

templ blueprintAssignment(code string, t text) {
    <div class="btn-group">
        <button type="button" class="btn btn-sm btn-outline-blueprint"
            hx-post={ "/blueprint/course/" + code }  
            hx-vals={ `"year": 0, "semester": 0, "lang": "` + t.Language + `"` }
        >
            { t.Assign }
        </button>
        <button type="button" class="btn btn-sm btn-outline-blueprint dropdown-toggle dropdown-toggle-split"
            data-bs-toggle="dropdown" aria-expanded="false">
        </button>
        <ul class="dropdown-menu">
        // TODO: make dynamic, NOT 3 fixed years
            for year := 1; year <= 3; year++ {
                <li class="mx-3"><button class="dropdown-item text-center"
                    hx-post={ "/blueprint/course/" + code }  
                    hx-vals={ `"year": ` + strconv.Itoa(year) + `, "semester": 1, "lang": "` + t.Language + `"` } 
                >
                { t.YearStr(year) + " " + t.WinterAssign }
                </button></li>
                <li class="mx-3"><button class="dropdown-item text-center"
                    hx-post={ "/blueprint/course/" + code }  
                    hx-vals={ `"year": ` + strconv.Itoa(year) + `, "semester": 2, "lang": "` + t.Language + `"` } 
                >
                { t.YearStr(year) + " " + t.SummerAssign }
                </button></li>
            }
        </ul>
    </div>
}

templ Content(dp *DegreePlan, t text) {
    <br> // TODO: if there is better solution to add space, then delete this line
    for _, bloc := range dp.blocs {
        {{
            inBLueprintCredits := 0
            for _, course := range bloc.Courses {
                if course.InBlueprint {
                    inBLueprintCredits += course.Credits
                }
            }
        }}
        <div class="d-flex justify-content-between align-items-center">
            <h5>{ utils.CapitalizeFirstLetter(bloc.Name) }</h5>
            <div>
                <p
                    class="me-2"
                    style="color: rgb(4, 108, 181); display: inline-block;">
                    { strconv.Itoa(inBLueprintCredits) + "/" + strconv.Itoa(bloc.Limit) }
                </p>
                <p
                    class="me-2"
                    style="color: rgb(19, 92, 4); display: inline-block;">
                    { "0/" + strconv.Itoa(bloc.Limit) }
                </p>
            </div>
        </div>
        <table class="table degree-plan-table">
            <thead>
                <tr>
                    <th>{ t.Code }</th>
                    <th>{ t.Title }</th>
                    <th>/*{ t.Status }*/</th> // TODO: headline or not?
                    <th class="text-end">{ t.Credits }</th>
                    <th>{ t.Winter }</th>
                    <th>{ t.Summer }</th>
                    <th>{ t.Blueprint }</th>
                </tr>
            </thead>
            <tbody>
            for _, course := range bloc.Courses {
                <tr> 
                    <td>
                        @utils.CourseLink(course.Code, t.Utils)
                    </td>
                    <td>
                        @utils.TitleCourseLink(course.Code, course.Title, t.Utils)
                    </td>
                    <td>
                    // TODO: add course completion status -> change `false` to `course.Completed`
                    if false {
                        <span class="badge bg-success">{ t.Completed }</span>
                    } else if course.InBlueprint {
                        <span class="badge bg-blueprint">{ t.InBlueprint }</span>
                    } else {
                        <span class="badge bg-danger">{ t.NotCompleted }</span>
                    }
                    </td>
                    <td
                        class="credits-column text-end">
                        { strconv.Itoa(course.Credits) }
                    </td>
                    <td>
                        { winterString(&course) }
                    </td>
                    <td>
                        { summerString(&course) }
                    </td>
                    <td>
                        @blueprintAssignment(course.Code, t)
                    </td>
                </tr>
            }
            </tbody>
        </table>
    }
}

templ Page(dp *DegreePlan, t text) {
    @utils.Page(t.Utils.DegreePlan, t.Utils) {
        <div class="container">
            @Content(dp, t)
        </div>
    }
}