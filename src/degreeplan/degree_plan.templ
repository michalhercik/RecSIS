package degreeplan

import (
    "github.com/michalhercik/RecSIS/utils"
    "fmt"
)

templ Content(dp *DegreePlan, t text, bpBtn PartialBlueprintAdd) {
    <div class="container pt-3" hx-indicator="#loader">
        for _, bloc := range dp.blocs {
            if bloc.Name != "" {
                <h6 class="d-md-none">
                    { fmt.Sprintf("%s", utils.CapitalizeFirstLetter(bloc.Name)) }
                    if bloc.hasLimit() {
                        <span class="d-md-none">{ fmt.Sprintf("(≥%d %s)", bloc.Limit, t.CreditsShort) }</span>
                    }
                    @statusIcon(&bloc, t)
                </h6>
            }
            <table class="table table-sm table-hover degree-plan-table">
                @tableHeader(&bloc, t)
                <tbody>
                    for _, course := range bloc.Courses {
                        @CourseRow(&course, t, bpBtn)
                    }
                </tbody>
            </table>
        }
    </div>
}

templ tableHeader(bloc *Bloc, t text) {
    <thead>
        <tr>
            if bloc.Name == "" {
                <th>{ t.Code }</th>
                <th>{ t.Title }</th>
            } else {
                <th>
                    <h5 class="mb-0 text-nowrap d-none d-md-block">
                        { fmt.Sprintf("%s", utils.CapitalizeFirstLetter(bloc.Name)) }
                        @statusIcon(bloc, t)
                    </h5>
                    <span class="d-md-none">{ t.Code }</span>
                </th>
                <th>
                    <span class="d-md-none">{ t.Title }</span>
                </th>
            }
            <th></th>
            <th class="th-overflow pe-0"> @creditsHeader(bloc, t) </th>
            <th class="d-none d-md-table-cell">
                if bloc.hasLimit() {
                    { fmt.Sprintf("(≥%d)", bloc.Limit) }
                }
            </th>
            <th class="d-none d-lg-table-cell">{ t.Winter }</th>
            <th class="d-none d-lg-table-cell">{ t.Summer }</th>
            <th class="d-none d-xl-table-cell">{ t.Guarantors }</th>
            <th class="th-overflow"><span class="d-none d-lg-inline">{ t.Blueprint }</span></th>
        </tr>
    </thead>
}

templ creditsHeader(bloc *Bloc, t text) {
    <span>{ fmt.Sprintf("%s:", t.Credits) }</span>
    <span class="text-success">{ fmt.Sprintf("%d", bloc.completedCredits()) }</span>
    <span>|</span>
    <span class="blueprint-color">{ fmt.Sprintf("%d", bloc.inBlueprintCredits()) }</span>
}

// templ courseRow(course *Course, bloc *Bloc, t text) {
templ CourseRow(course *Course, t text, bpBtn PartialBlueprintAdd) {
    <tr
        id={ fmt.Sprintf("assign-row-%s", course.Code) }
        x-data="{ hoverRow: false }"
        @mouseover="hoverRow = true"
        @mouseleave="hoverRow = false">
        <td> @utils.CourseLink(course.Code, t.Utils) </td>
        <td> @utils.TitleCourseLink(course.Code, course.Title, t.Utils) </td>
        <td class="align-middle lh-1"> @statusBadge(course, t) </td>
        <td class="text-end pe-0">{ fmt.Sprintf("%d", course.Credits) }</td>
        <td class="d-none d-md-table-cell"></td>
        <td class="d-none d-lg-table-cell">{ winterString(course) }</td>
        <td class="d-none d-lg-table-cell">{ summerString(course) }</td>
        // TODO: here must be { course.Guarantors }
        <td class="d-none d-xl-table-cell">M. Hercík, M. Medek, L. Peška, J. Novák</td>
        <td class="text-start align-middle p-0">
            @bpBtn(course.Code, "outerHTML", "tr#assign-row-" + course.Code)
        </td>
    </tr>
}

templ statusIcon(bloc *Bloc, t text) {
    if bloc.completed() {
        <i class="bi bi-check-lg text-success"></i>
    } else if bloc.inBlueprint() {
        <i class="bi bi-basket2 blueprint-color"></i>
    } else if bloc.hasLimit() {
        <i class="bi bi-x-lg text-danger"></i>
    }
}

templ statusBadge(course *Course, t text) {
    // TODO: add course completion status -> change `false` to `course.Completed`
    if false {
        @badge("bg-success", t.Completed)
    } else if course.InBlueprint {
        @badge("bg-blueprint", t.InBlueprint)
    } else {
        @badge("bg-danger", t.NotCompleted)
    }
}

templ badge(color, text string) {
    <span class={ "d-none d-md-inline-block rounded-pill badge", color }> { text } </span>
    <span class={ "badge-circle d-inline-flex d-md-none align-center rounded-circle", color }>
        <span class="visually-hidden">{ text }</span>
    </span>
}

func winterString(course *Course) string {
    winterText := ""
    if course.Start == teachingWinterOnly || course.Start == teachingBoth {
        winterText = fmt.Sprintf("%d/%d, %s", course.LectureRange1, course.SeminarRange1, course.ExamType)
    } else {
        winterText = "---"
    }
    return winterText
}

func summerString(course *Course) string {
    summerText := ""
    if course.Start == teachingSummerOnly {
        summerText = fmt.Sprintf("%d/%d, %s", course.LectureRange2, course.SeminarRange2, course.ExamType)
    } else if course.Start == teachingBoth {
        summerText = fmt.Sprintf("%d/%d, %s", course.LectureRange1, course.SeminarRange1, course.ExamType)
    } else {
        summerText = "---"
    }
    return summerText
}

// templ badge(color, text string) {
//     <span class={ "d-none d-md-inline-block rounded-pill badge " + color }>
//         { text }
//     </span>
//     <span class={ "d-inline-flex d-md-none ms-2 align-center rounded-circle " + color } style="width: 20px; height: 20px;">
//         <span class="visually-hidden">{ text }</span>
//     </span>
// }

// templ Content(dp *DegreePlan, t text, bpBtn PartialBlueprintAdd) {
//     <div class="container">
//         <div class="pt-3">
//             for _, bloc := range dp.blocs {
//                 if bloc.Name != "" {
//                     <h6 class="d-md-none">
//                         { fmt.Sprintf("%s", utils.CapitalizeFirstLetter(bloc.Name)) }
//                         if bloc.hasLimit() {
//                             <span class="d-md-none">{ fmt.Sprintf("(≥%d %s)", bloc.Limit, t.CreditsShort) }</span>
//                         }
//                         if bloc.completed() {
//                             <i class="bi bi-check-lg text-success"></i>
//                         } else if bloc.inBlueprint() {
//                             <i class="bi bi-basket2 blueprint-color"></i>
//                         } else if bloc.hasLimit() {
//                             <i class="bi bi-x-lg text-danger"></i>
//                         }
//                     </h6>
//                 }
//                 <table class="table table-sm table-hover degree-plan-table" x-data="{ hoverAnyRow: false }">
//                     <thead>
//                         <tr>
//                             if bloc.Name == "" {
//                                 <th>{ t.Code }</th>
//                                 <th>{ t.Title }</th>
//                             } else {
//                                 <th>
//                                     <h5 class="mb-0 text-nowrap d-none d-md-block">
//                                         { fmt.Sprintf("%s", utils.CapitalizeFirstLetter(bloc.Name)) }
//                                         if bloc.completed() {
//                                             <i class="bi bi-check-lg text-success"></i>
//                                         } else if bloc.inBlueprint() {
//                                             <i class="bi bi-basket2 blueprint-color"></i>
//                                         } else if bloc.hasLimit() {
//                                             <i class="bi bi-x-lg text-danger"></i>
//                                         }
//                                     </h5>
//                                     <span class="d-md-none">{ t.Code }</span>
//                                 </th>
//                                 <th>
//                                     <span class="d-md-none">{ t.Title }</span>
//                                 </th>
//                             }
//                             <th></th>
//                             <th class="th-overflow pe-0">
//                                 { fmt.Sprintf("%s:", t.Credits) }
//                                 <span style="color: rgb(19, 92, 4);">{ fmt.Sprintf("%d", bloc.completedCredits()) }</span> | <span style="color: rgb(4, 108, 181);">{ fmt.Sprintf("%d", bloc.inBlueprintCredits()) }</span>
//                             </th>
//                             <th class="d-none d-md-table-cell">
//                                 if bloc.hasLimit() {
//                                     { fmt.Sprintf("(≥%d)", bloc.Limit) }
//                                 }
//                             </th>
//                             <th class="d-none d-lg-table-cell">{ t.Winter }</th>
//                             <th class="d-none d-lg-table-cell">{ t.Summer }</th>
//                             <th class="d-none d-xl-table-cell" :class="{ 'dp-guarantors-hover': hoverAnyRow }">{ t.Guarantors }</th>
//                             <th :class="{ 'dp-buttons-hover': hoverAnyRow }"></th>
//                         </tr>
//                     </thead>
//                     <tbody>
//                     for _, course := range bloc.Courses {
//                         @CourseRecord(course, t, bpBtn)
//                     }
//                     </tbody>
//                 </table>
//             }
//         </div>
//     </div>
// }

// templ Page(dp *DegreePlan, t text, bpBtn PartialBlueprintAdd) {
//     @utils.Page(t.Utils.DegreePlan, t.Utils) {
//         <div class="container">
//             <div class="pt-3">
//                 @Content(dp, t, bpBtn)
//             </div>
//         </div>
//     }
// }

// templ CourseRecord(course Course, t text, bpBtn PartialBlueprintAdd) {
//     <tr
//         id={ course.Code }
//         x-data="{ hoverRow: false }"
//         @mouseover="hoverRow = true; hoverAnyRow = true;"
//         @mouseleave="hoverRow = false; hoverAnyRow = false;">
//         <td>
//             @utils.CourseLink(course.Code, t.Utils)
//         </td>
//         <td>
//             @utils.TitleCourseLink(course.Code, course.Title, t.Utils)
//         </td>
//         <td class="align-middle lh-1">
//         // TODO: add course completion status -> change `false` to `course.Completed`
//         if false {
//             @badge("bg-success", t.Completed)
//         } else if course.InBlueprint {
//             @badge("bg-blueprint", t.InBlueprint)
//         } else {
//             @badge("bg-danger", t.NotCompleted)
//         }
//         </td>
//         <td class="text-end pe-0">
//             { fmt.Sprintf("%d", course.Credits) }
//         </td>
//         <td class="d-none d-md-table-cell"></td>
//         <td class="d-none d-lg-table-cell">{ winterString(&course) }</td>
//         <td class="d-none d-lg-table-cell">{ summerString(&course) }</td>
//         <td class="d-none d-xl-table-cell" :class="{ 'dp-guarantors-hover': hoverRow }" :colspan="hoverRow ? '1' : '2'">M. Hercík, M. Medek, L. Peška, J. Novák</td>
//         <template x-if="hoverRow">
//             <td class="text-start align-middle p-0" :class="{ 'dp-buttons-hover': hoverRow }">
//                 @blueprintAssignment(course.Code, t, bpBtn)
//             </td>
//         </template>
//     </tr>
// }