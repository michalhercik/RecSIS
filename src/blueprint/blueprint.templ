package blueprint

import (
    "github.com/michalhercik/RecSIS/utils"
    "strconv"
)

const lastPosition = -1

templ DefaultCourseAdditionPresenter(info insertedCourseInfo) {}

templ renderCreditTable(years []AcademicYear, t text) {
    if len(years) > 0 {
    <table id="CreditsSum" class="table table-striped">
        <thead>
            <tr>
                <th>{ t.YearBig }</th>
                <th class="text-center">{ t.Semester }</th>
                <th class="text-end">{ t.Credits }</th>
            </tr>
        </thead>
        <tbody>
            {{ totalSum := 0 }}
            for _,year := range years {
                {{
                    totalSum += year.credits()
                    yearStr := strconv.Itoa(year.position)
                }}
                <tr id={"SumWinterYear" + yearStr}>
                    <td>{ yearStr }</td>
                    <td class="text-center">{ t.WinterLong }</td>
                    <td class="text-end credits-column">{ strconv.Itoa(year.winterCredits()) }</td>
                </tr>
                <tr id={"SumSummerYear" + yearStr}>
                    <td></td>
                    <td class="text-center">{ t.SummerLong }</td>
                    <td class="text-end credits-column">{ strconv.Itoa(year.summerCredits()) }</td>
                </tr>
            }
        </tbody>
        <tfoot class="table-group-divider">
            <tr>
                <td colspan="2">{ t.Total }</td>
                <td class="text-end credits-column">{ strconv.Itoa(totalSum) }</td>
            </tr>
        </tfoot>
    </table>
    }
}

// top floating menu with buttons, ...
templ optionMenu(data *Blueprint, t text) {
    {{
        yearCount := len(data.years) - 1
        anyYears := len(data.years) > 1
    }}
    <div class="option-menu sticky-top p-2" x-data="{ showCredits: false, openAssign: false, tooltipEnabled: true }">
        // change number of years
        { t.NumOfYears + ":" }
        <button
            class="btn btn-sm btn-outline-dark"
            hx-delete="/blueprint/year"
            hx-vals={ `"lang": "` + t.Language + `"` }
            hx-target="main"
            :disabled={ strconv.Itoa(yearCount) + " <= 0" }>
            <i class="bi bi-dash"></i>
        </button>
        { strconv.Itoa(yearCount) }
        <button
            class="btn btn-sm btn-outline-dark"
            hx-post="/blueprint/year"
            hx-vals={ `"lang": "` + t.Language + `"` }
            hx-target="main">
            <i class="bi bi-plus"></i>
        </button>

        // show/hide credits
        <div style="position: relative; display: inline-block;">
            <button
                @click="showCredits = !showCredits"
                :disabled={ strconv.FormatBool(!anyYears) }
                class="btn btn-sm btn-outline-dark">
                { t.Credits } <i :class="showCredits ? 'bi bi-caret-up-fill' : 'bi bi-caret-down-fill'"></i>
            </button>

            <div x-cloak x-show="showCredits" class="credits-box">
                @renderCreditTable(data.years[1:], t)
            </div>
        </div>

        // take care of checked courses
        // unassign
        <button
            x-cloak
            x-show="checkedNumber > 0"
            data-bs-toggle="tooltip"
            data-bs-placement="bottom"
            data-bs-title={ t.TTUnassignChecked }
            @click="bootstrap.Tooltip.getInstance($el).dispose();"
            @mouseleave="initializeTooltips()"
            class="btn btn-outline-dark btn-sm bi bi-dash-circle"
            hx-patch="/blueprint/courses"
            hx-vals={ `"type": "selected", "year": 0, "semester": 0, "position": -1, "lang": "` + t.Language + `"` }
            hx-include="input[type=checkbox]:checked"
            hx-target="main">
        </button>
        // assign
        <div style="position: relative; display: inline-block;">
            <button
                x-cloak
                x-show="checkedNumber > 0"
                data-bs-toggle="tooltip"
                data-bs-placement="bottom"
                data-bs-title={ t.TTAssignChecked }
                class="btn btn-outline-dark btn-sm bi bi-arrows-move"
                @click="openAssign = !openAssign;
                        tooltipEnabled = !tooltipEnabled;
                        let tooltip = bootstrap.Tooltip.getInstance($el);
                        if (tooltipEnabled) {
                            initializeTooltips();
                        } else {
                            tooltip.disable();
                            tooltip.hide();
                        }">
            </button>
            <div
                x-cloak
                x-show="openAssign"
                class="assign-box"
                @click.outside="openAssign = false"
            >
                for i := 1; i <= yearCount; i++ {
                <button
                    type="button"
                    class="btn btn-outline-secondary btn-sm text-nowrap"
                    style="--bs-btn-border-color: transparent; min-width: 120px;"
                    hx-patch="/blueprint/courses"
                    hx-vals={ `"type": "selected", "year": ` + strconv.Itoa(i) + `, "semester": 1, "position": -1, "lang": "` + t.Language + `"` }
                    hx-include="input[type=checkbox]:checked"
                    hx-target="main">
                    { t.YearStr(i) + " " + t.Winter }
                </button>
                <button
                    type="button"
                    class="btn btn-outline-secondary btn-sm text-nowrap"
                    style="--bs-btn-border-color: transparent; min-width: 120px;"
                    hx-patch="/blueprint/courses"
                    hx-vals={ `"type": "selected", "year": ` + strconv.Itoa(i) + `, "semester": 2, "position": -1, "lang": "` + t.Language + `"` }
                    hx-include="input[type=checkbox]:checked"
                    hx-target="main">
                    { t.YearStr(i) + " " + t.Summer }
                </button>
                }
            </div>
        </div>
        // remove
        <button
            x-cloak
            x-show="checkedNumber > 0"
            data-bs-toggle="tooltip"
            data-bs-placement="bottom"
            data-bs-title={ t.TTRemoveChecked }
            @click="bootstrap.Tooltip.getInstance($el).dispose();"
            @mouseleave="initializeTooltips()"
            class="btn btn-outline-dark btn-sm bi bi-trash-fill"
            hx-delete="/blueprint/courses"
            hx-vals={ `"type": "selected", "lang": "` + t.Language + `"` }
            hx-include="input[type=checkbox]:checked"
            hx-target="main">
        </button>
    </div>
}

func hoursExamsString(lecture, seminar int, examType string) string {
    return strconv.Itoa(lecture) + "/" + strconv.Itoa(seminar) + ", " + examType
}

// TODO: refactor DB to 1 = Winter, 2 = Summer, then remove this
templ winterSummer(course *Course) {
    switch course.SemesterCount {
    case 1:
        switch course.Start {
        case teachingWinterOnly:
            <td>{ hoursExamsString(course.LectureRange1, course.SeminarRange1, course.ExamType) }</td>
            <td>---</td>
        case teachingSummerOnly:
            <td>---</td>
            <td>{ hoursExamsString(course.LectureRange1, course.SeminarRange1, course.ExamType) }</td>
        case teachingBoth:
            <td>{ hoursExamsString(course.LectureRange1, course.SeminarRange1, course.ExamType) }</td>
            <td>{ hoursExamsString(course.LectureRange1, course.SeminarRange1, course.ExamType) }</td>
        default:
            <td>unsupported</td>
            <td>unsupported</td>
        }
    case 2:
        switch course.Start {
        case teachingWinterOnly:
            <td>{ hoursExamsString(course.LectureRange1, course.SeminarRange1, course.ExamType) }</td>
            <td>{ hoursExamsString(course.LectureRange2, course.SeminarRange2, course.ExamType) }</td>
        case teachingSummerOnly:
            <td>{ hoursExamsString(course.LectureRange2, course.SeminarRange2, course.ExamType) }</td>
            <td>{ hoursExamsString(course.LectureRange1, course.SeminarRange1, course.ExamType) }</td>
        case teachingBoth:
            <td>unsupported</td>
            <td>unsupported</td>
        default:
            <td>unsupported</td>
            <td>unsupported</td>
        }
    default:
        <td>unsupported</td>
        <td>unsupported</td>
    }
}

templ renderUnassigned(unassigned AcademicYear, yearCount int, t text) {
    @unassignedHeadline(t)
    // if there are unassigned courses
    <div x-show="showUnassigned">
        <table class="table table-sm blueprint-table" :class=" isSorting || 'table-hover' ">
            <thead>
                <tr>
                    <th></th>
                    <th>{ t.Code }</th>
                    <th>{ t.Title }</th>
                    <th class="text-center">{ t.Credits }</th>
                    <th>{ t.Winter }</th>
                    <th>{ t.Summer }</th>
                    <th>{ t.Teachers }</th>
                    <th></th>
                </tr>
            </thead>
            <tbody
                x-sort={ `sortHxPatch($item, 0, 0, $position, "` + t.Language + `")` }
                x-sort:group="courses"
            >
                for _, course := range unassigned.unassigned {
                <tr
                    id={ "code" + course.Code }
                    x-data="{ hover: false, hoverOnAssign: false, openAssign: false, tooltipEnabled: true}"
                    @mouseover="hover = true"
                    @mouseleave="hover = false, openAssign = false, initializeTooltips()"
                    x-sort:item={ strconv.Itoa(course.ID) }
                >
                    <td>
                        <div class="checkbox-container">
                            <input
                                type="checkbox"
                                id={ "checkbox" + strconv.Itoa(course.ID) }
                                class="form-check-input"
                                style="border: 1px solid #2c2c2c !important;"
                                name="selected"
                                value={ strconv.Itoa(course.ID) }
                                @change="checkedNumber = $event.target.checked ? checkedNumber + 1 : checkedNumber - 1"
                            />
                            <div class="circle-overlay" @click="handleCircleClick"></div>
                        </div>
                    </td>
                    <td> @utils.CourseLink(course.Code, t.Utils) </td>
                    <td>{ course.Title }</td>
                    <td class="credits-column text-end">{ strconv.Itoa(course.Credits) }</td>
                    @winterSummer(&course)
                    <td>{ course.Guarantors.string() }</td>
                    <td class="text-end align-middle short">
                        // move button
                        <div style="position: relative; display: inline-block;">
                            <button
                                x-cloak
                                x-show="(hover || hoverOnAssign) && !isSorting"
                                data-bs-toggle="tooltip"
                                data-bs-placement="bottom"
                                data-bs-title={ t.TTAssign }
                                class="btn btn-outline-secondary btn-sm bi bi-arrows-move"
                                style="--bs-btn-border-color: transparent;"
                                @click="openAssign = !openAssign;
                                        tooltipEnabled = !tooltipEnabled;
                                        let tooltip = bootstrap.Tooltip.getInstance($el);
                                        if (tooltipEnabled) {
                                            initializeTooltips();
                                        } else {
                                            tooltip.disable();
                                            tooltip.hide();
                                        }">
                            </button>
                            <div
                                x-cloak
                                x-show="openAssign && hover && !isSorting"
                                class="assign-box"
                                @mouseover="hoverOnAssign = true"
                                @mouseleave="hoverOnAssign = false"
                            >
                                @assignMenu(yearCount, course.ID, t)
                            </div>
                        </div>
                        // delete button
                        <button
                            x-cloak
                            x-show="hover && !isSorting"
                            data-bs-toggle="tooltip"
                            data-bs-placement="bottom"
                            data-bs-title={ t.TTRemove }
                            @click="bootstrap.Tooltip.getInstance($el).dispose();"
                            @mouseleave="initializeTooltips()"
                            class="btn btn-outline-secondary btn-sm bi bi-trash-fill"
                            style="--bs-btn-border-color: transparent;"
                            hx-delete={ "/blueprint/course/" + strconv.Itoa(course.ID) }
                            hx-vals={ `"lang": "` + t.Language + `"` }
                            hx-target="main">
                        </button>
                        // drag button
                        <button
                            x-cloak
                            x-show="hover && !isSorting"
                            data-bs-toggle="tooltip"
                            data-bs-placement="bottom"
                            data-bs-title={ t.TTMove }
                            class="btn btn-sm bi bi-grip-horizontal"
                            style="--bs-btn-active-border-color: transparent;"
                            x-sort:handle>
                        </button>
                    </td>
                </tr>
                }
                // dummy row for sorting error (Cannot read properties of null (reading 'nextSibling')) fix
                <tr class="dummy-row" x-sort:item style="display: none;"></tr>
            </tbody>
        </table>
    </div>
}

templ assignMenu(yearCount, courseID int, t text) {
    for i := 1; i <= yearCount; i++ {
        <button
            type="button"
            class="btn btn-outline-secondary btn-sm text-nowrap"
            style="--bs-btn-border-color: transparent; min-width: 120px;"
            hx-patch={ "/blueprint/course/" + strconv.Itoa(courseID) }
            hx-vals={ `"year": ` + strconv.Itoa(i) + `, "semester": 1, "position": -1, "lang": "` + t.Language + `"` }
            hx-target="main">
            { t.YearStr(i) + " " + t.Winter }
        </button>
        <button
            type="button"
            class="btn btn-outline-secondary btn-sm text-nowrap"
            style="--bs-btn-border-color: transparent; min-width: 120px;"
            hx-patch={ "/blueprint/course/" + strconv.Itoa(courseID) }
            hx-vals={ `"year": ` + strconv.Itoa(i) + `, "semester": 2, "position": -1, "lang": "` + t.Language + `"` }
            hx-target="main">
            { t.YearStr(i) + " " + t.Summer }
        </button>
    }
}

templ renderCourseTable(courses []Course, isWinter bool, yearNum, yearCount int, t text) {
    {{
        semester := 1
        show := "Winter"
        if !isWinter {
            show = "Summer"
            semester = 2
        }
        show = show + strconv.Itoa(yearNum) + " && Year" + strconv.Itoa(yearNum)
    }}
    <div x-show={ show }>
        <table class="table table-sm blueprint-table" :class=" isSorting || 'table-hover' ">
            <thead>
                <tr>
                    <th></th>
                    <th>{ t.Code }</th>
                    <th>{ t.Title }</th>
                    <th class="text-center">{ t.Credits }</th>
                    <th>{ t.Winter }</th>
                    <th>{ t.Summer }</th>
                    <th>{ t.Teachers }</th>
                    <th></th>
                </tr>
            </thead>
            <tbody
                x-sort={ `sortHxPatch($item, ` + strconv.Itoa(yearNum) + `, ` + strconv.Itoa(semester) + `, $position, "` + t.Language + `")` }
                x-sort:group="courses"
            >
                for _, course := range courses {
                <tr
                    x-data="{ hover: false, hoverOnAssign: false, openAssign: false, tooltipEnabled: true }"
                    @mouseover="hover = true"
                    @mouseleave="hover = false, openAssign = false, initializeTooltips()"
                    x-sort:item={ strconv.Itoa(course.ID) }
                >
                    <td>
                        <div class="checkbox-container">
                            <input
                                type="checkbox"
                                id={ "checkbox" + strconv.Itoa(course.ID) }
                                class="form-check-input"
                                style="border: 1px solid #2c2c2c !important;"
                                name="selected"
                                value={ strconv.Itoa(course.ID) }
                                @change="checkedNumber = $event.target.checked ? checkedNumber + 1 : checkedNumber - 1"
                            />
                            <div class="circle-overlay" @click="handleCircleClick"></div>
                        </div>
                    </td>
                    <td> @utils.CourseLink(course.Code, t.Utils) </td>
                    <td>{ course.Title }</td>
                    <td class="credits-column text-end">{ strconv.Itoa(course.Credits) }</td>
                    @winterSummer(&course)
                    <td>{ course.Guarantors.string() }</td>
                    <td class="text-end align-middle short">
                        // unassign button
                        <button
                            x-cloak
                            x-show="(hover || hoverOnAssign) && !isSorting"
                            data-bs-toggle="tooltip"
                            data-bs-placement="bottom"
                            data-bs-title={ t.TTUnassign }
                            @click="bootstrap.Tooltip.getInstance($el).dispose();"
                            @mouseleave="initializeTooltips()"
                            class="btn btn-outline-secondary btn-sm bi bi-dash-circle"
                            style="--bs-btn-border-color: transparent;"
                            hx-patch={ "/blueprint/course/" + strconv.Itoa(course.ID) }
                            hx-vals={ `"year": 0, "semester": 0, "position": -1, "lang": "` + t.Language + `"` }
                            hx-target="main">
                        </button>
                        // move button
                        <div style="position: relative; display: inline-block;">
                            <button
                                x-cloak
                                x-show="(hover || hoverOnAssign) && !isSorting"
                                data-bs-toggle="tooltip"
                                data-bs-placement="bottom"
                                data-bs-title={ t.TTReassign }
                                class="btn btn-outline-secondary btn-sm bi bi-arrows-move"
                                style="--bs-btn-border-color: transparent;"
                                @click="openAssign = !openAssign;
                                        tooltipEnabled = !tooltipEnabled;
                                        let tooltip = bootstrap.Tooltip.getInstance($el);
                                        if (tooltipEnabled) {
                                            initializeTooltips();
                                        } else {
                                            tooltip.disable();
                                            tooltip.hide();
                                        }">
                            </button>
                            <div
                                x-cloak
                                x-show="openAssign && hover && !isSorting"
                                class="assign-box"
                                @mouseover="hoverOnAssign = true"
                                @mouseleave="hoverOnAssign = false"
                            >
                                @assignMenu(yearCount, course.ID, t)
                            </div>
                        </div>
                        // delete button
                        <button
                            x-cloak
                            x-show="(hover || hoverOnAssign) && !isSorting"
                            data-bs-toggle="tooltip"
                            data-bs-placement="bottom"
                            data-bs-title={ t.TTRemove }
                            @click="bootstrap.Tooltip.getInstance($el).dispose();"
                            @mouseleave="initializeTooltips()"
                            class="btn btn-outline-secondary btn-sm bi bi-trash-fill"
                            style="--bs-btn-border-color: transparent;"
                            hx-delete={ "/blueprint/course/" + strconv.Itoa(course.ID) }
                            hx-vals={ `"lang": "` + t.Language + `"` }
                            hx-target="main">
                        </button>
                        // drag button
                        <button
                            x-cloak
                            x-show="(hover || hoverOnAssign) && !isSorting"
                            data-bs-toggle="tooltip"
                            data-bs-placement="bottom"
                            data-bs-title={ t.TTMove }
                            class="btn btn-sm bi bi-grip-horizontal"
                            style="--bs-btn-active-border-color: transparent;"
                            x-sort:handle>
                        </button>
                    </td>
                </tr>
                }
                // dummy row for sorting error (Cannot read properties of null (reading 'nextSibling')) fix
                <tr class="dummy-row" x-sort:item style="display: none;"></tr>
            </tbody>
        </table>
    </div>
}

templ unassignedHeadline(t text) {
    // <div>
    //     <table class="table table-sm table-hover blueprint-background blueprint-table headline">
    //         <tbody>
    //             <tr
    //                 x-data="{ hover: false }"
    //                 @mouseover="hover = true"
    //                 @mouseleave="hover = false"
    //                 @click="if (!$event.target.closest('button')) { showUnassigned = !showUnassigned }"
    //             >
    //                 <td class="short">
    //                     <i
    //                         :class="showUnassigned ? 'bi bi-caret-down-fill' : 'bi bi-caret-up-fill'">
    //                     </i>
    //                 </td>
    //                 <td class="short yeartext">{ t.Unassigned }</td>
    //                 for i := 0; i < 5; i++ {
    //                     <td class="short"></td>
    //                 }
    //                 <td class="short text-end align-middle" style="line-height: 1;">
    //                     // remove all unassigned courses button
    //                     <button
    //                         x-show="hover && !isSorting"
    //                         data-bs-toggle="tooltip"
    //                         data-bs-placement="bottom"
    //                         data-bs-title={ t.TTRemoveUnassigned }
    //                         class="btn btn-outline-secondary btn-sm bi bi-trash-fill"
    //                         style="--bs-btn-border-color: transparent; font-size: 0.75rem; padding: 4px 4px; line-height: 1;"
    //                         hx-delete="/blueprint/courses"
    //                         hx-vals={ `"type": "year", "year": 0, "lang": "` + t.Language + `"` }
    //                         hx-target="main">
    //                     </button>
    //                 </td>
    //             </tr>
    //         </tbody>
    //     </table>
    // </div>
    <div>
        <table class="table table-borderless blueprint-table mb-0">
            <tbody>
                <tr>
                    <td class="text-end align-middle p-0" style="line-height: 1;">
                        <button
                            @click="showUnassigned = !showUnassigned"
                            class="btn btn-sm btn-outline-secondary w-100 p-0"
                            :class="showUnassigned ? 'bi bi-caret-down-fill' : 'bi bi-caret-up-fill'"
                            style="--bs-btn-border-color: transparent; aspect-ratio: 1 / 1;">
                        </button>
                    </td>
                    <td><h5 class="mb-0">{ t.Unassigned }</h5></td>
                    for i := 0; i < 5; i++ {
                        <td></td>
                    }
                    <td class="text-end align-middle pt-0 pb-0" style="line-height: 1;">
                        // remove all unassigned courses button
                        <button
                            data-bs-toggle="tooltip"
                            data-bs-placement="bottom"
                            data-bs-title={ t.TTRemoveUnassigned }
                            class="btn btn-outline-secondary btn-sm bi bi-trash-fill"
                            style="--bs-btn-border-color: transparent;"
                            hx-delete="/blueprint/courses"
                            hx-vals={ `"type": "year", "year": 0, "lang": "` + t.Language + `"` }
                            hx-target="main">
                        </button>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
}


templ yearHeadline(yearNum, credits int, t text) {
    // <div>
    //     <table class="table table-sm table-hover blueprint-background blueprint-table headline">
    //         <tbody>
    //             <tr
    //                 x-data="{ hover: false }"
    //                 @mouseover="hover = true"
    //                 @mouseleave="hover = false"
    //                 @click={ "if (!$event.target.closest('button')) { " + "Year" + strconv.Itoa(yearNum) + " = !" + "Year" + strconv.Itoa(yearNum) + " }" }
    //             >
    //                 <td class="short">
    //                     <i
    //                         :class={ "Year" + strconv.Itoa(yearNum) + " ? 'bi bi-caret-down-fill' : 'bi bi-caret-up-fill'" }>
    //                     </i>
    //                 </td>
    //                 <td class="short yeartext">{ t.YearStr(yearNum) }</td>
    //                 <td class="short"></td>
    //                 <td class="short yeartext credits-column text-end">{ strconv.Itoa(credits) }</td>
    //                 <td class="short"></td>
    //                 <td class="short"></td>
    //                 <td class="short"></td>
    //                 <td class="short text-end align-middle" style="line-height: 1;">
    //                     // unassign all courses button
    //                     <button
    //                         x-show="hover && !isSorting"
    //                         data-bs-toggle="tooltip"
    //                         data-bs-placement="bottom"
    //                         data-bs-title={ t.TTUnassignYear1 + strconv.Itoa(yearNum) + t.TTUnassignYear2 }
    //                         @click="bootstrap.Tooltip.getInstance($el).dispose();"
    //                         @mouseleave="initializeTooltips()"
    //                         class="btn btn-outline-secondary btn-sm bi bi-dash-circle"
    //                         style="--bs-btn-border-color: transparent; font-size: 0.75rem; padding: 4px 4px; line-height: 1;"
    //                         hx-patch="/blueprint/courses"
    //                         hx-vals={ `"type": "year-unassign", "year": ` + strconv.Itoa(yearNum) +`, "semester": 0, "lang": "` + t.Language + `"` }
    //                         hx-target="main">
    //                     </button>
    //                     // remove all courses button
    //                     <button
    //                         x-show="hover && !isSorting"
    //                         data-bs-toggle="tooltip"
    //                         data-bs-placement="bottom"
    //                         data-bs-title={ t.TTRemoveYear1 + strconv.Itoa(yearNum) + t.TTRemoveYear2 }
    //                         @click="bootstrap.Tooltip.getInstance($el).dispose();"
    //                         @mouseleave="initializeTooltips()"
    //                         class="btn btn-outline-secondary btn-sm bi bi-trash-fill"
    //                         style="--bs-btn-border-color: transparent; font-size: 0.75rem; padding: 4px 4px; line-height: 1;"
    //                         hx-delete="/blueprint/courses"
    //                         hx-vals={ `"type": "year", "year": ` + strconv.Itoa(yearNum) + `, "lang": "` + t.Language + `"` }
    //                         hx-target="main">
    //                     </button>
    //                 </td>
    //             </tr>
    //         </tbody>
    //     </table>
    // </div>
    <div>
        <table class="table table-borderless blueprint-table mb-0">
            <tbody>
                <tr>
                    <td class="text-end align-middle p-0" style="line-height: 1;">
                        <button
                            @click={ "Year" + strconv.Itoa(yearNum) + " = !" + "Year" + strconv.Itoa(yearNum) }
                            class="btn btn-sm btn-outline-secondary w-100 p-0"
                            :class={ "Year" + strconv.Itoa(yearNum) + " ? 'bi bi-caret-down-fill' : 'bi bi-caret-up-fill'" }
                            style="--bs-btn-border-color: transparent; aspect-ratio: 1 / 1;">
                        </button>
                    </td>
                    <td><h5 class="mb-0">{ t.YearStr(yearNum) }</h5></td>
                    <td></td>
                    <td class="credits-column text-end"><h5 class="mb-0">{ strconv.Itoa(credits) }</h5></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td class="text-end align-middle pt-0 pb-0" style="line-height: 1;">
                        // unassign all courses button
                        <button
                            data-bs-toggle="tooltip"
                            data-bs-placement="bottom"
                            data-bs-title={ t.TTUnassignYear1 + strconv.Itoa(yearNum) + t.TTUnassignYear2 }
                            @click="bootstrap.Tooltip.getInstance($el).dispose();"
                            @mouseleave="initializeTooltips()"
                            class="btn btn-outline-secondary btn-sm bi bi-dash-circle"
                            style="--bs-btn-border-color: transparent;"
                            hx-patch="/blueprint/courses"
                            hx-vals={ `"type": "year-unassign", "year": ` + strconv.Itoa(yearNum) +`, "semester": 0, "lang": "` + t.Language + `"` }
                            hx-target="main">
                        </button>
                        // remove all courses button
                        <button
                            data-bs-toggle="tooltip"
                            data-bs-placement="bottom"
                            data-bs-title={ t.TTRemoveYear1 + strconv.Itoa(yearNum) + t.TTRemoveYear2 }
                            @click="bootstrap.Tooltip.getInstance($el).dispose();"
                            @mouseleave="initializeTooltips()"
                            class="btn btn-outline-secondary btn-sm bi bi-trash-fill"
                            style="--bs-btn-border-color: transparent;"
                            hx-delete="/blueprint/courses"
                            hx-vals={ `"type": "year", "year": ` + strconv.Itoa(yearNum) + `, "lang": "` + t.Language + `"` }
                            hx-target="main">
                        </button>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
}

templ semesterHeadline(semester, year, credits int, t text) {
    {{
        semesterVar := ""
        semesterText := ""
        unassignTT := ""
        removeTT := ""
        if semester == 1 {
            semesterVar = "Winter"
            semesterText = t.Winter
            unassignTT = t.TTUnassignWinter
            removeTT = t.TTRemoveWinter
        } else if semester == 2 {
            semesterVar = "Summer"
            semesterText = t.Summer
            unassignTT = t.TTUnassignSummer
            removeTT = t.TTRemoveSummer
        }
    }}
    // <div x-show={ "Year" + strconv.Itoa(year) }>
    //     <table class="table table-sm table-hover blueprint-background blueprint-table">
    //         <tbody>
    //             <tr
    //                 x-data="{ hover: false }"
    //                 @mouseover="hover = true"
    //                 @mouseleave="hover = false"
    //                 @click={ "if (!$event.target.closest('button')) { " + semesterVar + strconv.Itoa(year) + " = !" + semesterVar + strconv.Itoa(year) + " }" }
    //             >
    //                 <td class="short">
    //                     <i
    //                         :class={ semesterVar + strconv.Itoa(year) + " ? 'bi bi-caret-down-fill' : 'bi bi-caret-up-fill'" }>
    //                     </i>
    //                 </td>
    //                 <td class="short semtext">{ semesterText }</td>
    //                 <td class="short"></td>
    //                 <td class="short semtext credits-column text-end">{ strconv.Itoa(credits) }</td>
    //                 <td class="short"></td>
    //                 <td class="short"></td>
    //                 <td class="short"></td>
    //                 <td class="short text-end align-middle" style="line-height: 1;">
    //                     // unassign all courses button
    //                     <button
    //                         x-show="hover && !isSorting"
    //                         data-bs-toggle="tooltip"
    //                         data-bs-placement="bottom"
    //                         data-bs-title={ unassignTT }
    //                         @click="bootstrap.Tooltip.getInstance($el).dispose();"
    //                         @mouseleave="initializeTooltips()"
    //                         class="btn btn-outline-secondary btn-sm bi bi-dash-circle"
    //                         style="--bs-btn-border-color: transparent; font-size: 0.75rem; padding: 4px 4px; line-height: 1;"
    //                         hx-patch={ "/blueprint/courses" }
    //                         hx-vals={ `"type": "semester-unassign", "year": ` + strconv.Itoa(year) + `, "semester": ` + strconv.Itoa(semester) + `, "lang": "` + t.Language + `"` }
    //                         hx-target="main">
    //                     </button>
    //                     // remove all courses button
    //                     <button
    //                         x-show="hover && !isSorting"
    //                         data-bs-toggle="tooltip"
    //                         data-bs-placement="bottom"
    //                         data-bs-title={ removeTT }
    //                         @click="bootstrap.Tooltip.getInstance($el).dispose();"
    //                         @mouseleave="initializeTooltips()"
    //                         class="btn btn-outline-secondary btn-sm bi bi-trash-fill"
    //                         style="--bs-btn-border-color: transparent; font-size: 0.75rem; padding: 4px 4px; line-height: 1;"
    //                         hx-delete="/blueprint/courses"
    //                         hx-vals={ `"type": "semester", "year": ` + strconv.Itoa(year) + `, "semester": ` + strconv.Itoa(semester) + `, "lang": "` + t.Language + `"` }
    //                         hx-target="main">
    //                     </button>
    //                 </td>
    //             </tr>
    //         </tbody>
    //     </table>
    // </div>
    <div x-show={ "Year" + strconv.Itoa(year) }>
        <table class="table table-borderless blueprint-table mb-0">
            <tbody>
                <tr>
                    <td class="text-end align-middle p-0" style="line-height: 1;">
                        <button
                            @click={ semesterVar + strconv.Itoa(year) + " = !" + semesterVar + strconv.Itoa(year) }
                            class="btn btn-sm btn-outline-secondary w-100 p-0"
                            :class={ semesterVar + strconv.Itoa(year) + " ? 'bi bi-caret-down-fill' : 'bi bi-caret-up-fill'" }
                            style="--bs-btn-border-color: transparent; aspect-ratio: 1 / 1;">
                        </button>
                    </td>
                    <td><h6 class="mb-0">{ semesterText }</h6></td>
                    <td></td>
                    <td class="fst-italic credits-column text-end"><h6 class="mb-0">{ strconv.Itoa(credits) }</h6></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td class="text-end align-middle pt-0 pb-0" style="line-height: 1;">
                        // unassign all courses button
                        <button
                            data-bs-toggle="tooltip"
                            data-bs-placement="bottom"
                            data-bs-title={ unassignTT }
                            @click="bootstrap.Tooltip.getInstance($el).dispose();"
                            @mouseleave="initializeTooltips()"
                            class="btn btn-outline-secondary btn-sm bi bi-dash-circle"
                            style="--bs-btn-border-color: transparent;"
                            hx-patch={ "/blueprint/courses" }
                            hx-vals={ `"type": "semester-unassign", "year": ` + strconv.Itoa(year) + `, "semester": ` + strconv.Itoa(semester) + `, "lang": "` + t.Language + `"` }
                            hx-target="main">
                        </button>
                        // remove all courses button
                        <button
                            data-bs-toggle="tooltip"
                            data-bs-placement="bottom"
                            data-bs-title={ removeTT }
                            @click="bootstrap.Tooltip.getInstance($el).dispose();"
                            @mouseleave="initializeTooltips()"
                            class="btn btn-outline-secondary btn-sm bi bi-trash-fill"
                            style="--bs-btn-border-color: transparent;"
                            hx-delete="/blueprint/courses"
                            hx-vals={ `"type": "semester", "year": ` + strconv.Itoa(year) + `, "semester": ` + strconv.Itoa(semester) + `, "lang": "` + t.Language + `"` }
                            hx-target="main">
                        </button>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
}

templ renderYear(year AcademicYear, yearCount int, t text) {
    <div id={"BlueprintYear" + strconv.Itoa(year.position)}>
        @yearHeadline(year.position, year.credits(), t)
        @semesterHeadline(1, year.position, year.winterCredits(), t)
        @renderCourseTable(year.winter, true, year.position, yearCount, t)
        @semesterHeadline(2, year.position, year.summerCredits(), t)
        @renderCourseTable(year.summer, false, year.position, yearCount, t)
    </div>
}

templ renderYears(years []AcademicYear, t text) {
    for _, year := range years {
        @renderYear(year, len(years), t)
    }
}

templ Content(data *Blueprint, t text) {
    {{
        winter := ""
        summer := ""
        year := ""
        for i := 1; i < len(data.years); i++ {
            winter += " Winter" + strconv.Itoa(i) + ": true,"
            summer += " Summer" + strconv.Itoa(i) + ": true,"
            year += " Year" + strconv.Itoa(i) + ": true,"
        }
        xdata := "{ checkedNumber: 0, showUnassigned: true," + winter + summer + year + " "
        // drag&drop (sorting) focus/hover chrome bug (https://alpinejs.dev/plugins/sort#css-hover-bug) solution
        xdata += `
            isSorting: false,
            checkSortingClass() { this.isSorting = document.body.classList.contains('sorting') },
            init() {
                this.checkSortingClass();
                const observer = new MutationObserver(() => this.checkSortingClass());
                observer.observe(document.body, { attributes: true, attributeFilter: ['class'] });
            },
        }`

    }}
    <script>
        // bootstrap tooltip initialization
        function initializeTooltips() {
            // Dispose of existing tooltips
            var tooltipElements = document.querySelectorAll('.tooltip');
            tooltipElements.forEach(function (tooltipEl) {
                tooltipEl.remove();
            });

            // Initialize new tooltips
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                var tooltip = new bootstrap.Tooltip(tooltipTriggerEl, {
                    delay: { show: 750 } // define delay for tooltip show
                });

                // Override the show method to check for visibility
                var originalShow = tooltip.show;
                tooltip.show = function () {
                    if (tooltipTriggerEl.offsetParent !== null) {
                        originalShow.call(tooltip);
                    }
                };

                return tooltip;
            });
        };

        document.addEventListener('DOMContentLoaded', function () {
            initializeTooltips();
            setupCheckboxShiftClick();
        });

        document.addEventListener('htmx:afterSwap', function (e) {
            setupCheckboxShiftClick();
        });

        // shift click for multiple checkboxes
        function setupCheckboxShiftClick() {
            let lastChecked = null;
            const checkboxes = document.querySelectorAll('input[type="checkbox"][name="selected"]');
            checkboxes.forEach(checkbox => {
                checkbox.addEventListener('click', function (e) {
                    if (lastChecked && lastChecked !== this && e.shiftKey) {
                        let inBetween = false;
                        checkboxes.forEach(box => {
                            if (box === this || box === lastChecked) {
                                inBetween = !inBetween;
                            }
                            else if (inBetween && box.checked !== this.checked) {
                                box.checked = this.checked;
                                box.dispatchEvent(new Event('change'));
                            }
                        });
                        if (lastChecked.checked !== this.checked) {
                            lastChecked.checked = this.checked;
                            lastChecked.dispatchEvent(new Event('change'));
                        }
                    }
                    lastChecked = this;
                });
            });
        }

        // pass through (shift-)click event to checkbox
        function handleCircleClick(event) {
            const checkbox = event.target.previousElementSibling;
            if (checkbox) {
                // Create a new MouseEvent, preserving shift key and other properties
                const clickEvent = new MouseEvent('click', {
                    bubbles: true,
                    cancelable: true,
                    shiftKey: event.shiftKey,
                });

                checkbox.dispatchEvent(clickEvent);
            }
        }

        // update position of course in database using dynamic htmx patch
        function sortHxPatch(item, year, semester, position, language) {
            htmx.ajax('PATCH', '/blueprint/course/' + item, {
                target: 'main',
                values: { year: year, semester: semester, position: position + 1, lang: language }
            });
        }
    </script>

    <div x-data={ xdata } x-init="init()" class="mx-3">
        @optionMenu(data, t)
        @renderUnassigned(data.years[0], len(data.years) - 1, t)
        if len(data.years) >= 2 {
            @renderYears(data.years[1:], t)
        }
    </div>
}

templ Page(data *Blueprint, t text) {
    @utils.Page(t.Utils.Blueprint, t.Utils) {
        @Content(data, t)
    }
}

templ InternalServerErrorContent(t text) {
    // TODO translate
    <h1>Internal Server Error</h1>
    <p>Something went wrong</p>
}

templ InternalServerErrorPage(t text) {
    // TODO translate
    @utils.Page("Internal Server Error", t.Utils) {
        @InternalServerErrorContent(t)
    }
}