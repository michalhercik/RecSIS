package blueprint

import (
    "github.com/michalhercik/RecSIS/utils"
    "strconv"
    "strings"
)

const lastPosition = -1

templ DefaultCourseAdditionPresenter(info insertedCourseInfo) {

}

// hx-vals generator methods
func vType(typeStr string) string     { return `"type": "` + typeStr + `"` }
func vYear(year int) string           { return `"year": ` + strconv.Itoa(year) }
func vSem(semester int) string        { return `"semester": ` + strconv.Itoa(semester) }
func vPos() string                    { return `"position": ` + strconv.Itoa(lastPosition) }
func vLang(t text) string             { return `"lang": "` + t.Language + `"` }

func mergeVals(vals ...string) string { return strings.Join(vals, ", ") }

templ renderCreditTable(years []AcademicYear, t text) {
    if len(years) > 0 {
    <table id="credits-sum" class="table table-striped">
        <thead>
            <tr>
                <th>{ t.YearBig }</th>
                <th class="text-center">{ t.Semester }</th>
                <th class="text-end">{ t.Credits }</th>
            </tr>
        </thead>
        <tbody>
            {{ totalSum := 0 }}
            for _,year := range years {
                {{
                    totalSum += year.credits()
                    yearStr := strconv.Itoa(year.position)
                }}
                <tr id={"sum-winter-year-" + yearStr}>
                    <td>{ yearStr }</td>
                    <td class="text-center">{ t.WinterLong }</td>
                    <td class="text-end credits-column">{ strconv.Itoa(year.winterCredits()) }</td>
                </tr>
                <tr id={"sum-summer-year-" + yearStr}>
                    <td></td>
                    <td class="text-center">{ t.SummerLong }</td>
                    <td class="text-end credits-column">{ strconv.Itoa(year.summerCredits()) }</td>
                </tr>
            }
        </tbody>
        <tfoot class="table-group-divider">
            <tr>
                <td colspan="2">{ t.Total }</td>
                <td class="text-end credits-column">{ strconv.Itoa(totalSum) }</td>
            </tr>
        </tfoot>
    </table>
    }
}

templ adjustCoursesButton(transparent bool, icon, xShow, tooltip, vals, include string, method templ.Attributes) {
    <button
        if (xShow != "") {
            x-cloak
            x-show={ xShow }
        }
        data-bs-toggle="tooltip"
        data-bs-placement="bottom"
        data-bs-title={ tooltip }
        @click="bootstrap.Tooltip.getInstance($el).dispose();"
        @mouseleave="initializeTooltips()"
        class={ "btn btn-outline-secondary btn-sm bi " + icon }
        if (transparent) {
            style="--bs-btn-border-color: transparent;"
        }
        { method... }
        hx-vals={ vals }
        if (include != "") {
            hx-include={ include }
        }
        hx-target="main">
    </button>
}

templ unassignCoursesButton(transparent bool, xShow, tooltip, vals, include string) {
    @adjustCoursesButton(transparent, "bi-dash-circle", xShow, tooltip, vals, include, templ.Attributes{"hx-patch": "/blueprint/courses"})
}

templ removeCoursesButton(transparent bool, xShow, tooltip, vals, include string) {
    @adjustCoursesButton(transparent, "bi-trash-fill", xShow, tooltip, vals, include, templ.Attributes{"hx-delete": "/blueprint/courses"})
}

templ checkbox(ID int) {
    <div class="checkbox-container">
        <input
            type="checkbox"
            id={ "checkbox" + strconv.Itoa(ID) }
            class="form-check-input"
            style="border: 1px solid #2c2c2c !important;"
            name="selected"
            value={ strconv.Itoa(ID) }
            @change="checkedNumber = $event.target.checked ? checkedNumber + 1 : checkedNumber - 1"
        />
        <div class="circle-overlay" @click="handleCircleClick"></div>
    </div>
}

templ unassignCourseButton(ID int, t text) {
    @adjustCoursesButton(true, "bi-dash-circle", "hover && !isSorting", t.TTUnassign, mergeVals(vYear(0), vSem(0), vPos(), vLang(t)), "", templ.Attributes{"hx-patch": "/blueprint/course/" + strconv.Itoa(ID)})
}

templ assignSemesterButton(year, semester int, patch, vals, include, semesterText string, t text) {
    <button
        type="button"
        class="btn btn-outline-secondary btn-sm text-nowrap"
        style="--bs-btn-border-color: transparent; min-width: 120px;"
        hx-patch={ patch }
        hx-vals={ mergeVals(vYear(year), vSem(semester), vPos(), vLang(t)) + vals }
        if (include != "") {
            hx-include={ include }
        }
        hx-target="main">
        { t.YearStr(year) + " " + semesterText }
    </button>
}

templ assignMenu(yearCount int, patch, vals, include string, t text) {
    for i := 1; i <= yearCount; i++ {
        @assignSemesterButton(i, int(assignmentWinter), patch, vals, include, t.Winter, t)
        @assignSemesterButton(i, int(assignmentSummer), patch, vals, include, t.Summer, t)
    }
}

templ assignCourseButtonInternal(transparent bool, tooltip, showCondButton, showCondBox, patch, vals, include string, yearCount int, t text) {
    <div style="position: relative; display: inline-block;">
        <button
            x-cloak
            x-show={ showCondButton }
            data-bs-toggle="tooltip"
            data-bs-placement="bottom"
            data-bs-title={ tooltip }
            class="btn btn-outline-secondary btn-sm bi bi-arrows-move"
            if (transparent) {
                style="--bs-btn-border-color: transparent;"
            }
            @click="openAssign = !openAssign;
                    tooltipEnabled = !tooltipEnabled;
                    let tooltip = bootstrap.Tooltip.getInstance($el);
                    if (tooltipEnabled) {
                        initializeTooltips();
                    } else {
                        tooltip.disable();
                        tooltip.hide();
                    }">
        </button>
        <div
            x-cloak
            x-show={ "openAssign" + showCondBox }
            class="assign-box"
            @click.outside="openAssign = false"
        >
            @assignMenu(yearCount, patch, vals, include, t)
        </div>
    </div>
}

templ assignCoursesButton(yearCount int, t text) {
    @assignCourseButtonInternal(false, t.TTAssignChecked, "checkedNumber > 0", "", "/blueprint/courses", `, ` + vType(selectedMove), "input[type=checkbox]:checked", yearCount, t)
}

templ assignCourseButton(tooltip string, yearCount, ID int, t text) {
    @assignCourseButtonInternal(true, tooltip, "hover && !isSorting", " && hover && !isSorting", "/blueprint/course/" + strconv.Itoa(ID), "", "", yearCount, t)
}

templ removeCourseButton(ID int, t text) {
    @adjustCoursesButton(true, "bi-trash-fill", "hover && !isSorting", t.TTRemove, vLang(t), "", templ.Attributes{"hx-delete": "/blueprint/course/" + strconv.Itoa(ID)})
}

// TODO: make floating somewhere, not top, redesign
// top floating menu with buttons, ...
templ optionMenu(data *Blueprint, t text) {
    {{
        yearCount := len(data.years) - 1
        anyYears := len(data.years) > 1
    }}
    <div class="option-menu p-2" x-data="{ showCredits: false, openAssign: false, tooltipEnabled: true }">
        // change number of years
        { t.NumOfYears + ":" }
        <button
            class="btn btn-sm btn-outline-secondary"
            hx-delete="/blueprint/year"
            hx-vals={ vLang(t) }
            hx-target="main"
            :disabled={ strconv.Itoa(yearCount) + " <= 0" }>
            <i class="bi bi-dash"></i>
        </button>
        { strconv.Itoa(yearCount) }
        <button
            class="btn btn-sm btn-outline-secondary"
            hx-post="/blueprint/year"
            hx-vals={ vLang(t) }
            hx-target="main">
            <i class="bi bi-plus"></i>
        </button>

        // show/hide credits
        <div style="position: relative; display: inline-block;">
            <button
                @click="showCredits = !showCredits"
                :disabled={ strconv.FormatBool(!anyYears) }
                class="btn btn-sm btn-outline-secondary">
                { t.Credits } <i :class="showCredits ? 'bi bi-caret-up-fill' : 'bi bi-caret-down-fill'"></i>
            </button>

            <div x-cloak x-show="showCredits" @click.outside="showCredits = false" class="credits-box">
                @renderCreditTable(data.years[1:], t)
            </div>
        </div>

        // take care of checked courses
        // unassign
        @unassignCoursesButton(false, "checkedNumber > 0", t.TTUnassignChecked, mergeVals(vType(selectedMove), vYear(0), vSem(0), vPos(), vLang(t)), "input[type=checkbox]:checked")
        // assign
        @assignCoursesButton(yearCount, t)
        // remove
        @removeCoursesButton(false, "checkedNumber > 0", t.TTRemoveChecked, mergeVals(vType(selectedRemove), vLang(t)), "input[type=checkbox]:checked")
    </div>
}

templ dragCourseButton(t text) {
    <button
        x-cloak
        x-show="hover && !isSorting"
        data-bs-toggle="tooltip"
        data-bs-placement="bottom"
        data-bs-title={ t.TTMove }
        class="btn btn-sm bi bi-grip-horizontal"
        style="--bs-btn-active-border-color: transparent;"
        x-sort:handle>
    </button>
}

templ showHideCoursesButton(showVar string) {
    <button
        @click={ showVar + " = !" + showVar }
        class="btn btn-sm btn-outline-secondary w-100 p-0"
        :class={ showVar + " ? 'bi bi-caret-down-fill' : 'bi bi-caret-up-fill'" }
        style="--bs-btn-border-color: transparent; aspect-ratio: 1 / 1;">
    </button>
}

func winterString(course *Course) string {
    winterText := ""
    if course.Start == teachingWinterOnly || course.Start == teachingBoth {
        winterText = strconv.Itoa(course.LectureRange1) + "/" + strconv.Itoa(course.SeminarRange1) + ", " + course.ExamType
    } else {
        winterText = "---"
    }
    return winterText
}

func summerString(course *Course) string {
    summerText := ""
    if course.Start == teachingSummerOnly {
        summerText = strconv.Itoa(course.LectureRange2) + "/" + strconv.Itoa(course.SeminarRange2) + ", " + course.ExamType
    } else if course.Start == teachingBoth {
        summerText = strconv.Itoa(course.LectureRange1) + "/" + strconv.Itoa(course.SeminarRange1) + ", " + course.ExamType
    } else {
        summerText = "---"
    }
    return summerText
}

templ coursesBody(courses []Course, canUnassign bool, showCondition, xSortMethod, assignTT string, yearCount int, t text) {
    <tbody
        x-show={ showCondition }
        x-sort={ xSortMethod }
        x-sort:group="courses"
    >
        for _, course := range courses {
        <tr
            x-data="{ hover: false, openAssign: false, tooltipEnabled: true }"
            @mouseover="hover = true"
            @mouseleave="hover = false, openAssign = false, initializeTooltips()"
            x-sort:item={ strconv.Itoa(course.ID) }
        >
            <td> @checkbox(course.ID) </td>
            <td> @utils.CourseLink(course.Code, t.Utils) </td>
            <td> @utils.TitleCourseLink(course.Code, course.Title, t.Utils) </td>
            <td class="credits-column text-end d-none d-md-table-cell">{ strconv.Itoa(course.Credits) }</td>
            <td class="d-none d-md-table-cell">{ winterString(&course) }</td>
            <td class="d-none d-md-table-cell">{ summerString(&course) }</td>
            <td class="d-none d-xl-table-cell">{ course.Guarantors.string() }</td>
            <td class="text-end align-middle pt-0 pb-0">
                if canUnassign {
                    // unassign button
                    @unassignCourseButton(course.ID, t)
                }
                // (re)assign button
                @assignCourseButton(assignTT, yearCount, course.ID, t)
                // remove course button
                @removeCourseButton(course.ID, t)
                // drag button
                @dragCourseButton(t)
            </td>
        </tr>
        }
        // dummy row for sorting error (Cannot read properties of null (reading 'nextSibling')) fix
        <tr class="dummy-row" x-sort:item style="display: none;"></tr>
    </tbody>
}

templ noCoursesTableContent(text, xSort string) {
    <thead><tr>
        <th></th> // checkbox
        <th><h5 class="mb-0 text-nowrap">{ text }</h5></th> // text (or code)
        <th></th> // title
        <th class="d-none d-md-table-cell"></th> // credits
        <th class="d-none d-md-table-cell"></th> // winter
        <th class="d-none d-md-table-cell"></th> // summer
        <th class="d-none d-xl-table-cell"></th> // guarantors
        <th></th> // buttons
    </tr></thead>
    <tbody x-sort={ xSort } x-sort:group="courses">
        // dummy row for sorting error (Cannot read properties of null (reading 'nextSibling')) fix
        <tr class="dummy-row" x-sort:item style="display: none;"></tr>
    </tbody>
}

func sortHxPatch(year, semester int, t text) string {
    yearStr := strconv.Itoa(year)
    semesterStr := strconv.Itoa(semester)
    return `sortHxPatch($item, ` + yearStr + `, ` + semesterStr + `, $position, "` + t.Language + `")`
}

templ unassignHeadline(t text) {
    <thead><tr>
        <th class="text-end align-middle p-0 bg-white" style="line-height: 1;">
            @showHideCoursesButton("showUnassigned")
        </th>
        <th><h5 class="mb-0 text-nowrap">{ t.Unassigned }</h5></th>
        <th></th>
        <th class="th-overflow credits-column d-none d-md-table-cell">{ t.Credits }</th>
        <th class="d-none d-md-table-cell">{ t.Winter }</th>
        <th class="d-none d-md-table-cell">{ t.Summer }</th>
        <th class="d-none d-xl-table-cell">{ t.Guarantors }</th>
        <th class="text-end align-middle pt-0 pb-0" style="line-height: 1;">
            // remove all unassigned courses button
            @removeCoursesButton(true, "", t.TTRemoveUnassigned, mergeVals(vType(yearRemove), vYear(0), vLang(t)), "")
        </th>
    </tr></thead>
}

templ unassignedTable(unassigned []Course, yearCount int, t text) {
    <div>
        <table class="table table-sm blueprint-table" :class=" isSorting || 'table-hover' ">
        if len(unassigned) > 0 {
        // if there are unassigned courses
            @unassignHeadline(t)
            @coursesBody(unassigned, false, "showUnassigned", sortHxPatch(0, 0, t), t.TTAssign, yearCount, t)
        } else {
        // if there are no unassigned courses
            @noCoursesTableContent(t.NoUnassignedText, sortHxPatch(0, 0, t))
        }
        </table>
    </div>
}

templ winterHeadline(year, yearCredits, winterCredits int, t text) {
    <thead><tr>
        <th class="text-end align-middle p-0 bg-white" style="line-height: 1;">
            @showHideCoursesButton("winter" + strconv.Itoa(year))
        </th>
        <th><h5 class="mb-0 text-nowrap">{ t.YearStr(year) + " " + t.Winter + " (" + strconv.Itoa(yearCredits) + ")" }</h5></th>
        <th></th>
        <th class="th-overflow credits-column d-none d-md-table-cell">{ t.Credits + ": " + strconv.Itoa(winterCredits) }</th>
        <th class="d-none d-md-table-cell">{ t.Winter }</th>
        <th class="d-none d-md-table-cell">{ t.Summer }</th>
        <th class="d-none d-xl-table-cell">{ t.Guarantors }</th>
        <th class="text-end align-middle pt-0 pb-0" style="line-height: 1;">
            // unassign all courses button
            @unassignCoursesButton(true, "", t.TTUnassignWinter, mergeVals(vType(semesterUnassign), vYear(year), vSem(int(assignmentWinter)), vLang(t)), "")
            // remove all courses button
            @removeCoursesButton(true, "", t.TTRemoveWinter, mergeVals(vType(semesterRemove), vYear(year), vSem(int(assignmentWinter)), vLang(t)), "")
        </th>
    </tr></thead>
}

templ winterTable(courses []Course, year, yearCount, yearCredits, winterCredits int, t text) {
    <div>
        <table class="table table-sm blueprint-table" :class=" isSorting || 'table-hover' ">
        if len(courses) > 0 {
        // if there are some courses
            @winterHeadline(year, yearCredits, winterCredits, t)
            @coursesBody(courses, true, "winter" + strconv.Itoa(year), sortHxPatch(year, int(assignmentWinter), t), t.TTReassign, yearCount, t)
        } else {
        // if there are no courses
            {{
                text := t.YearStr(year) + " " + t.Winter + " (" + strconv.Itoa(yearCredits) + ")" + " - " + t.EmptySemester
            }}
            @noCoursesTableContent(text, sortHxPatch(year, int(assignmentWinter), t))
        }
        </table>
    </div>
}

templ summerHeadline(year, yearCredits, summerCredits int, t text) {
    <thead><tr>
        <th class="text-end align-middle p-0 bg-white" style="line-height: 1;">
            @showHideCoursesButton("summer" + strconv.Itoa(year))
        </th>
        <th><h5 class="mb-0 text-nowrap">{ t.YearStr(year) + " " + t.Summer }</h5></th>
        <th></th>
        <th class="th-overflow credits-column d-none d-md-table-cell">{ t.Credits + ": " + strconv.Itoa(summerCredits) }</th>
        <th class="d-none d-md-table-cell">{ t.Winter }</th>
        <th class="d-none d-md-table-cell">{ t.Summer }</th>
        <th class="d-none d-xl-table-cell">{ t.Guarantors }</th>
        <th class="text-end align-middle pt-0 pb-0" style="line-height: 1;">
            // unassign all courses button
            @unassignCoursesButton(true, "", t.TTUnassignSummer, mergeVals(vType(semesterUnassign), vYear(year), vSem(int(assignmentSummer)), vLang(t)), "")
            // remove all courses button
            @removeCoursesButton(true, "", t.TTRemoveSummer, mergeVals(vType(semesterRemove), vYear(year), vSem(int(assignmentSummer)), vLang(t)), "")
        </th>
    </tr></thead>
}

templ summerTable(courses []Course, year, yearCount, yearCredits, summerCredits int, t text) {
    <div>
        <table class="table table-sm blueprint-table" :class=" isSorting || 'table-hover' ">
        if len(courses) > 0 {
        // if there are some courses
            @summerHeadline(year, yearCredits, summerCredits, t)
            @coursesBody(courses, true, "summer" + strconv.Itoa(year), sortHxPatch(year, int(assignmentSummer), t), t.TTReassign, yearCount, t)
        } else {
        // if there are no courses
            {{
                text := t.YearStr(year) + " " + t.Summer + " - " + t.EmptySemester
            }}
            @noCoursesTableContent(text, sortHxPatch(year, int(assignmentSummer), t))
        }
        </table>
    </div>
}

templ yearsTables(years []AcademicYear, t text) {
    for _, year := range years {
        <div id={ "blueprint-year-" + strconv.Itoa(year.position) }>
            // render winter
            @winterTable(year.winter, year.position, len(years), year.credits(), year.winterCredits(), t)
            // render summer
            @summerTable(year.summer, year.position, len(years), year.credits(), year.summerCredits(), t)
        </div>
    }
}

templ Content(data *Blueprint, t text) {
    <div x-data={ "data(" + strconv.Itoa(len(data.years)) + ")" } class="container">
        @optionMenu(data, t)
        @unassignedTable(data.years[0].unassigned, len(data.years) - 1, t)
        if len(data.years) > 1 {
            @yearsTables(data.years[1:], t)
        }
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            initializeTooltips();
            setupCheckboxShiftClick();
        });

        document.addEventListener('htmx:afterSwap', function (e) {
            setupCheckboxShiftClick();
            // Reinitialize Alpine when HTMX swaps in new content
            if (e.detail.target === document.body) {
                console.log("htmx:afterSwap.body");
                let initAlpine = new Event('alpine:init');
                document.dispatchEvent(initAlpine);
            }
        });

        document.addEventListener('alpine:init', () => {
            Alpine.data('data', (numberOfYears) => {
                const dynamicData = {};

                for (let i = 1; i <= numberOfYears; i++) {
                    dynamicData[`winter${i}`] = true;
                    dynamicData[`summer${i}`] = true;
                }

                return {
                    checkedNumber: 0,
                    showUnassigned: true,
                    ...dynamicData, // Spread the dynamically generated properties

                    // drag&drop (sorting) focus/hover chrome bug (https://alpinejs.dev/plugins/sort#css-hover-bug) solution
                    isSorting: false,
                    checkSortingClass() {
                        this.isSorting = document.body.classList.contains('sorting');
                    },
                    init() {
                        this.checkSortingClass();
                        const observer = new MutationObserver(() => this.checkSortingClass());
                        observer.observe(document.body, { attributes: true, attributeFilter: ['class'] });
                    },
                };
            });
        });

        // bootstrap tooltip initialization
        function initializeTooltips() {
            // Dispose of existing tooltips
            var tooltipElements = document.querySelectorAll('.tooltip');
            tooltipElements.forEach(function (tooltipEl) {
                tooltipEl.remove();
            });

            // Initialize new tooltips
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                var tooltip = new bootstrap.Tooltip(tooltipTriggerEl, {
                    delay: { show: 750 } // define delay for tooltip show
                });

                // Override the show method to check for visibility
                var originalShow = tooltip.show;
                tooltip.show = function () {
                    if (tooltipTriggerEl.offsetParent !== null) {
                        originalShow.call(tooltip);
                    }
                };

                return tooltip;
            });
        };

        // shift click for multiple checkboxes
        function setupCheckboxShiftClick() {
            let lastChecked = null;
            const checkboxes = document.querySelectorAll('input[type="checkbox"][name="selected"]');
            checkboxes.forEach(checkbox => {
                checkbox.addEventListener('click', function (e) {
                    if (lastChecked && lastChecked !== this && e.shiftKey) {
                        let inBetween = false;
                        checkboxes.forEach(box => {
                            if (box === this || box === lastChecked) {
                                inBetween = !inBetween;
                            }
                            else if (inBetween && box.checked !== this.checked) {
                                box.checked = this.checked;
                                box.dispatchEvent(new Event('change'));
                            }
                        });
                        if (lastChecked.checked !== this.checked) {
                            lastChecked.checked = this.checked;
                            lastChecked.dispatchEvent(new Event('change'));
                        }
                    }
                    lastChecked = this;
                });
            });
        }

        // pass through (shift-)click event to checkbox
        function handleCircleClick(event) {
            const checkbox = event.target.previousElementSibling;
            if (checkbox) {
                // Create a new MouseEvent, preserving shift key and other properties
                const clickEvent = new MouseEvent('click', {
                    bubbles: true,
                    cancelable: true,
                    shiftKey: event.shiftKey,
                });

                checkbox.dispatchEvent(clickEvent);
            }
        }

        // update position of course in database using dynamic htmx patch
        function sortHxPatch(item, year, semester, position, language) {
            htmx.ajax('PATCH', '/blueprint/course/' + item, {
                target: 'main',
                values: { year: year, semester: semester, position: position + 1, lang: language }
            });
        }
    </script>
}

templ Page(data *Blueprint, t text) {
    @utils.Page(t.Utils.Blueprint, t.Utils) {
        @Content(data, t)
    }
}

templ InternalServerErrorContent(t text) {
    // TODO translate
    <h1>Internal Server Error</h1>
    <p>Something went wrong</p>
}

templ InternalServerErrorPage(t text) {
    // TODO translate
    @utils.Page("Internal Server Error", t.Utils) {
        @InternalServerErrorContent(t)
    }
}