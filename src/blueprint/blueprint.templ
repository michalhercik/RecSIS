package blueprint

import (
    "github.com/michalhercik/RecSIS/utils"
    "strings"
    "fmt"
)

const lastPosition = -1
const ttDelay = "600"

templ Page(data *Blueprint, t text) {
    @utils.Page(t.Utils.Blueprint, t.Utils) {
        @Content(data, t)
    }
}

templ Content(data *Blueprint, t text) {
    <div x-data="{checkedNumber: 0, isSorting: false }" class="container pt-3" hx-indicator="#loader">
        @unassignedTable(data.years[0].unassigned.courses, data.years[0].unassigned.folded, len(data.years) - 1, t)
        if len(data.years) > 1 {
            @yearsTables(data.years[1:], t)
        }
        @summarizeFooter(data, t)
    </div>
    <script defer src="/js/blueprint.js"></script>
}

templ yearsTables(years []AcademicYear, t text) {
    {{ runningCredits := 0 }}
    for _, year := range years {
        <div id={ fmt.Sprintf("blueprint-year-%d", year.position) }>
            // render winter
            {{ runningCredits += year.winterCredits() }}
            @winterTable(year.winter.courses, year.winter.folded, year.position, len(years), runningCredits, year.credits(), year.winterCredits(), t)
            // render summer
            {{ runningCredits += year.summerCredits() }}
            @summerTable(year.summer.courses, year.summer.folded,  year.position, len(years), runningCredits, year.credits(), year.summerCredits(), t)
        </div>
    }
}

templ unassignHeadline(folded bool, t text) {
    <thead><tr>
        <th class="text-end align-middle p-0 bg-white lh-1">
            @showHideCoursesButton(0, unassignedStr, folded, t)
        </th>
        <th><h5 class="mb-0 text-nowrap">{ t.Unassigned }</h5></th>
        <th></th>
        if folded {
            <th class="th-overflow credits-column d-none d-md-table-cell"></th>
            <th class="d-none d-md-table-cell"></th>
            <th class="d-none d-md-table-cell"></th>
            <th class="d-none d-xl-table-cell"></th>
        } else {
            <th class="th-overflow credits-column d-none d-md-table-cell">{ t.Credits }</th>
            <th class="d-none d-md-table-cell">{ t.Winter }</th>
            <th class="d-none d-md-table-cell">{ t.Summer }</th>
            <th class="d-none d-xl-table-cell">{ t.Guarantors }</th>
        }
        <th class="text-end align-middle py-0 lh-1">
            // remove all unassigned courses button
            @removeCoursesButton(true, t.TTRemoveUnassigned, mergeVals(vType(yearRemove), vYear(0)), "", t)
        </th>
    </tr></thead>
}

templ unassignedTable(unassigned []Course, folded bool, yearCount int, t text) {
    <div>
        <table class="table table-sm blueprint-table" :class="isSorting || 'table-hover'">
        if len(unassigned) > 0 {
            // if there are unassigned courses
            @unassignHeadline(folded, t)
            if (!folded) {
                @coursesBody(unassigned, false, sortHxPatch(0, 0, t), t.TTReassign, yearCount, t)
            }
        } else {
            // if there are no unassigned courses
            @noCoursesTableContent(t.NoUnassignedText, sortHxPatch(0, 0, t))
        }
        </table>
    </div>
}

templ winterHeadline(year, runningCredits, yearCredits, winterCredits int, folded bool, t text) {
    <thead><tr>
        <th class="text-end align-middle p-0 bg-white lh-1">
            @showHideCoursesButton(year, winterStr, folded, t)
        </th>
        <th>
            @popoverHeadline(year, runningCredits, yearCredits, winterCredits, t.Winter, t)
        </th>
        <th></th>
        <th class="th-overflow credits-column d-none d-md-table-cell">{ fmt.Sprintf("%s: %d", t.Credits, winterCredits) }</th>
        if folded {
            <th class="d-none d-md-table-cell"></th>
            <th class="d-none d-md-table-cell"></th>
            <th class="d-none d-xl-table-cell"></th>
        } else {
            <th class="d-none d-md-table-cell">{ t.Winter }</th>
            <th class="d-none d-md-table-cell">{ t.Summer }</th>
            <th class="d-none d-xl-table-cell">{ t.Guarantors }</th>
        }
        <th class="text-end align-middle py-0 lh-1">
            // unassign all courses button
            @unassignCoursesButton(true, t.TTUnassignWinter, mergeVals(vType(semesterUnassign), vYear(year), vSem(int(assignmentWinter))), "", t)
            // remove all courses button
            @removeCoursesButton(true, t.TTRemoveWinter, mergeVals(vType(semesterRemove), vYear(year), vSem(int(assignmentWinter))), "", t)
        </th>
    </tr></thead>
}

templ winterTable(courses []Course, folded bool, year, yearCount, runningCredits, yearCredits, winterCredits int, t text) {
    <div>
        <table class="table table-sm blueprint-table" :class="isSorting || 'table-hover'">
        if len(courses) > 0 {
            // if there are some courses
            @winterHeadline(year, runningCredits, yearCredits, winterCredits, folded, t)
            if (!folded) {
                @coursesBody(courses, true, sortHxPatch(year, int(assignmentWinter), t), t.TTReassign, yearCount, t)
            }
        } else {
            // if there are no courses
            {{
                text := t.YearStr(year) + " " + t.Winter + " - " + t.EmptySemester
            }}
            @noCoursesTableContent(text, sortHxPatch(year, int(assignmentWinter), t))
        }
        </table>
    </div>
}

templ summerHeadline(year, runningCredits, yearCredits, summerCredits int, folded bool, t text) {
    <thead><tr>
        <th class="text-end align-middle p-0 bg-white lh-1">
            @showHideCoursesButton(year, summerStr, folded, t)
        </th>
        <th>
            @popoverHeadline(year, runningCredits, yearCredits, summerCredits, t.Summer, t)
        </th>
        <th></th>
        <th class="th-overflow credits-column d-none d-md-table-cell">{ fmt.Sprintf("%s: %d", t.Credits, summerCredits) }</th>
        if folded {
            <th class="d-none d-md-table-cell"></th>
            <th class="d-none d-md-table-cell"></th>
            <th class="d-none d-xl-table-cell"></th>
        } else {
            <th class="d-none d-md-table-cell">{ t.Winter }</th>
            <th class="d-none d-md-table-cell">{ t.Summer }</th>
            <th class="d-none d-xl-table-cell">{ t.Guarantors }</th>
        }
        <th class="text-end align-middle py-0 lh-1">
            // unassign all courses button
            @unassignCoursesButton(true, t.TTUnassignSummer, mergeVals(vType(semesterUnassign), vYear(year), vSem(int(assignmentSummer))), "", t)
            // remove all courses button
            @removeCoursesButton(true, t.TTRemoveSummer, mergeVals(vType(semesterRemove), vYear(year), vSem(int(assignmentSummer))), "", t)
        </th>
    </tr></thead>
}

templ summerTable(courses []Course, folded bool, year, yearCount, runningCredits, yearCredits, summerCredits int, t text) {
    <div>
        <table class="table table-sm blueprint-table" :class="isSorting || 'table-hover'">
        if len(courses) > 0 {
            // if there are some courses
            @summerHeadline(year, runningCredits, yearCredits, summerCredits, folded, t)
            if (!folded) {
                @coursesBody(courses, true, sortHxPatch(year, int(assignmentSummer), t), t.TTReassign, yearCount, t)
            }
        } else {
            // if there are no courses
            {{
                text := t.YearStr(year) + " " + t.Summer + " - " + t.EmptySemester
            }}
            @noCoursesTableContent(text, sortHxPatch(year, int(assignmentSummer), t))
        }
        </table>
    </div>
}

templ popoverHeadline(year, runningCredits, yearCredits, semesterCredits int, semester string, t text) {
    <h5
        class="mb-0 text-nowrap popover-headline"
        data-bs-toggle="popover"
        data-bs-trigger="hover" 
        data-bs-html="true"
        data-bs-placement="bottom"
        data-bs-title={ t.TTNumberOfCredits }
        data-bs-content={ fmt.Sprintf("%s: %d<br>%s: %d<br>%s: %d", t.TTSemesterCredits, semesterCredits, t.TTYearCredits, yearCredits, t.TTRunningCredits, runningCredits) }>
        { fmt.Sprintf("%s %s", t.YearStr(year), semester) }
    </h5>
}

templ showHideCoursesButton(year int, semester string, folded bool, t text) {
    <button
        class={ "btn btn-sm btn-outline-secondary w-100 p-0 border-0 ratio-1 bi", templ.KV("bi-caret-up-fill", folded), templ.KV("bi-caret-down-fill", !folded) }
        hx-patch={ t.Utils.LangLink(fmt.Sprintf("/blueprint/%d/%s", year, semester)) }
        hx-vals={ fmt.Sprintf(`"folded": %t`, !folded) }
        hx-target="main">
    </button>
}

templ coursesBody(courses []Course, canUnassign bool, xSortMethod, assignTT string, yearCount int, t text) {
    <tbody
        x-sort={ xSortMethod }
        x-sort:group="courses"
    >
        for _, course := range courses {
        <tr
            x-data="{ hover: false }"
            @mouseover="hover = true"
            @mouseleave="hover = false; initializeTooltips()"
            @dragstart="isSorting = true;"
            @dragend="isSorting = false"
            x-sort:item={ fmt.Sprintf("%d", course.ID) }
        >
            <td class="text-center"> @checkbox(course.ID, yearCount, t) </td>
            <td> @utils.CourseLink(course.Code, t.Utils) </td>
            <td> @utils.TitleCourseLink(course.Code, course.Title, t.Utils) </td>
            <td class="credits-column text-end d-none d-md-table-cell">{ fmt.Sprintf("%d", course.Credits) }</td>
            <td class="d-none d-md-table-cell">{ winterString(&course) }</td>
            <td class="d-none d-md-table-cell">{ summerString(&course) }</td>
            <td class="d-none d-xl-table-cell">{ course.Guarantors.string() }</td>
            <td class="text-end align-middle py-0">
                if canUnassign {
                    // unassign button
                    @unassignCourseButton(course.ID, t)
                }
                // (re)assign button
                @assignCourseButton(assignTT, yearCount, course.ID, t)
                // remove course button
                @removeCourseButton(course.ID, t)
                // drag button
                @dragCourseButton(t) 
            </td>
        </tr>
        }
        // dummy row for sorting error (Cannot read properties of null (reading 'nextSibling')) fix
        <tr class="dummy-row d-none" x-sort:item></tr>
    </tbody>
}

templ noCoursesTableContent(text, xSort string) {
    <thead><tr>
        <th></th> // checkbox
        <th><h5 class="mb-0 text-nowrap text-secondary">{ text }</h5></th> // text (or code)
        <th></th> // title
        <th class="d-none d-md-table-cell"></th> // credits
        <th class="d-none d-md-table-cell"></th> // winter
        <th class="d-none d-md-table-cell"></th> // summer
        <th class="d-none d-xl-table-cell"></th> // guarantors
        <th></th> // buttons
    </tr></thead>
    <tbody x-sort={ xSort } x-sort:group="courses">
        // dummy row for sorting error (Cannot read properties of null (reading 'nextSibling')) fix
        <tr class="dummy-row d-none" x-sort:item></tr>
    </tbody>
}

templ checkbox(ID, yearCount int, t text) {
    <div class="checkbox-container position-relative" x-data="{ checked: false, showMenu: false, hoverTimeout: null }">
        <input
            type="checkbox"
            id={ fmt.Sprintf("checkbox%d", ID) }
            class="form-check-input"
            name="selected"
            value={ fmt.Sprintf("%d", ID) }
            @change="checkedNumber = $event.target.checked ? checkedNumber + 1 : checkedNumber - 1; if (checked) { showMenu = false; clearTimeout(hoverTimeout); }; checked = !checked;"
        />
        <div
            class="circle-overlay"
            @click="handleCircleClick($event); hoverTimeout = setTimeout(() => { if (checked) { showMenu = true } }, 250);"
            @mouseover="if (checked) { hoverTimeout = setTimeout(() => showMenu = true, 150); }"
            @mouseleave="showMenu = false; clearTimeout(hoverTimeout);">
            <div x-cloak x-show="showMenu">
                // take care of checked courses
                <div class="option-menu">
                    // unassign
                    @unassignCoursesButton(false, t.TTUnassignChecked, mergeVals(vType(selectedMove), vYear(0), vSem(0), vPos()), "input[type=checkbox]:checked", t)
                    // assign
                    @assignCoursesButton(yearCount, t)
                    // remove
                    @removeCoursesButton(false, t.TTRemoveChecked, mergeVals(vType(selectedRemove)), "input[type=checkbox]:checked", t)
                </div>
            </div>
        </div>
    </div>
}

templ dragCourseButton(t text) {
    <button
        x-cloak
        x-show="hover && !isSorting"
        @mousedown="bootstrap.Tooltip.getOrCreateInstance($el).dispose();"
        data-bs-toggle="tooltip"
        data-bs-placement="bottom"
        data-bs-delay={ ttDelay }
        data-bs-title={ t.TTMove }
        class="btn btn-sm bi bi-grip-horizontal border-0"
        x-sort:handle>
    </button>
}

templ summarizeFooter(data *Blueprint, t text) {
    <table class="table table-sm blueprint-table">
        <thead><tr>
            <th></th>
            <th><h5 class="mb-0 text-nowrap">{ t.Total }</h5></th>
            <th></th>
            <th class="th-overflow credits-column d-none d-md-table-cell">{ fmt.Sprintf("%s: %d", t.Credits, data.totalCredits()) }</th>
            <th class="d-none d-md-table-cell"></th>
            <th class="d-none d-md-table-cell"></th>
            <th class="d-none d-xl-table-cell"></th>
            <th class="th-overflow align-middle py-0 lh-1">
                // change number of years
                // for this to overflow left, text order is left to right so the elements are in the opposite order
                <button
                    class="btn btn-sm btn-outline-secondary bi bi-plus"
                    hx-post={ t.Utils.LangLink("/blueprint/year") }
                    hx-target="main">
                </button>
                { fmt.Sprintf("%d", len(data.years) - 1) }
                if len(data.years[len(data.years) - 1].winter.courses) > 0 || len(data.years[len(data.years) - 1].summer.courses) > 0 {
                    // if the last year is non-empty, show modal
                    <button
                        class="btn btn-outline-secondary btn-sm bi bi-dash"
                        data-bs-toggle="modal"
                        data-bs-target="#coursesOptionModal"
                        :disabled={ fmt.Sprintf("%d <= 0", len(data.years) - 1) }>
                    </button>
                } else {
                    // if the last year is empty, show delete button
                    <button
                        class="btn btn-outline-secondary btn-sm bi bi-dash"
                        hx-delete={ t.Utils.LangLink("/blueprint/year") }
                        hx-vals={ vUnassign(false) }
                        hx-target="main"
                        :disabled={ fmt.Sprintf("%d <= 0", len(data.years) - 1) }>
                    </button>
                }
                { t.NumOfYears }
            </th>
        </tr></thead>
    </table>
    // modal for removing non-empty last year
    @deleteYearModal(len(data.years) - 1, t)
}

templ deleteYearModal(lastYear int, t text) {
    <div class="modal fade" id="coursesOptionModal" tabindex="-1" aria-labelledby="coursesOptionModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="coursesOptionModalLabel">{ t.ModalTitle }</h1>
                    <button class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">{ t.ModalContent }</div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" data-bs-dismiss="modal">{ t.Cancel }</button>
                    <button
                        data-bs-dismiss="modal"
                        class="btn btn-primary"
                        hx-delete={ t.Utils.LangLink("/blueprint/year") }
                        hx-vals={ vUnassign(false) }
                        hx-target="main">
                        { t.RemoveCourses }
                    </button>
                    <button
                        data-bs-dismiss="modal"
                        class="btn btn-primary"
                        hx-delete={ t.Utils.LangLink("/blueprint/year") }
                        hx-vals={ mergeVals(vUnassign(true), vYear(lastYear)) }
                        hx-target="main">
                        { t.UnassignCourses }
                    </button>
                </div>
            </div>
        </div>
    </div>
}

templ assignCourseButton(tooltip string, yearCount, ID int, t text) {
    @assignCourseButtonInternal(true, tooltip, "hover && !isSorting", t.Utils.LangLink(fmt.Sprintf("/blueprint/course/%d", ID)), "", "", yearCount, t)
}

templ assignCoursesButton(yearCount int, t text) {
    @assignCourseButtonInternal(false, t.TTAssignChecked, "", t.Utils.LangLink("/blueprint/courses"), `, ` + vType(selectedMove), "input[type=checkbox]:checked", yearCount, t)
}

templ assignCourseButtonInternal(transparent bool, tooltip, showCondButton, patch, vals, include string, yearCount int, t text) {
    <div class="dropdown-center position-relative d-inline-block" @mouseleave="bootstrap.Dropdown.getOrCreateInstance($refs.dropdown).hide(); initializeTooltips()">
        <button
            if (showCondButton != "") {
                x-cloak
                x-show={ showCondButton }
            }
            class={ "btn btn-outline-secondary btn-sm p-0", templ.KV("border-0", transparent) }
            data-bs-toggle="dropdown"
            data-bs-offset="0, 0"
            aria-expanded="false"
            x-ref="dropdown">
            <div
                class="move-button-filler bi bi-arrows-move"
                data-bs-toggle="tooltip"
                data-bs-placement="bottom"
                data-bs-delay={ ttDelay }
                data-bs-title={ tooltip }
                @click="bootstrap.Tooltip.getOrCreateInstance($el).dispose();">
            </div>
        </button>
        @assignMenu(yearCount, patch, vals, include, t)
    </div>
}

templ assignMenu(yearCount int, patch, vals, include string, t text) {
    <ul class="dropdown-menu">
        for year := 1; year <= yearCount; year++ {
            @assignSemesterButton(year, int(assignmentWinter), patch, vals, include, t.Winter, t)
            @assignSemesterButton(year, int(assignmentSummer), patch, vals, include, t.Summer, t)
        }
    </ul>
}

templ assignSemesterButton(year, semester int, patch, vals, include, semesterText string, t text) {
    <li class="mx-3">
        <button
            class="dropdown-item rounded text-center"
            hx-patch={ patch }
            hx-vals={ mergeVals(vYear(year), vSem(semester), vPos()) + vals }
            if (include != "") {
                hx-include={ include }
            }
            hx-target="main">
            { t.YearStr(year) + " " + semesterText }
        </button>
    </li>
}

templ removeCourseButton(ID int, t text) {
    @adjustCoursesButton(true, "bi-trash-fill", "hover && !isSorting", t.TTRemove, "", "", templ.Attributes{"hx-delete": t.Utils.LangLink(fmt.Sprintf("/blueprint/course/%d", ID))})
}

templ unassignCourseButton(ID int, t text) {
    @adjustCoursesButton(true, "bi-dash-circle", "hover && !isSorting", t.TTUnassign, mergeVals(vYear(0), vSem(0), vPos()), "", templ.Attributes{"hx-patch": t.Utils.LangLink(fmt.Sprintf("/blueprint/course/%d", ID))})
}

templ removeCoursesButton(transparent bool, tooltip, vals, include string, t text) {
    @adjustCoursesButton(transparent, "bi-trash-fill", "", tooltip, vals, include, templ.Attributes{"hx-delete": t.Utils.LangLink("/blueprint/courses")})
}

templ unassignCoursesButton(transparent bool, tooltip, vals, include string, t text) {
    @adjustCoursesButton(transparent, "bi-dash-circle", "", tooltip, vals, include, templ.Attributes{"hx-patch": t.Utils.LangLink("/blueprint/courses")})
}

templ adjustCoursesButton(transparent bool, icon, xShow, tooltip, vals, include string, method templ.Attributes) {
    <button
        if (xShow != "") {
            x-cloak
            x-show={ xShow }
        }
        data-bs-toggle="tooltip"
        data-bs-placement="bottom"
        data-bs-delay={ ttDelay }
        data-bs-title={ tooltip }
        @mouseleave="initializeTooltips()"
        class={ "btn btn-outline-secondary btn-sm bi", icon, templ.KV("border-0", transparent) }
        { method... }
        if (vals != "") {
            hx-vals={ vals }
        }
        if (include != "") {
            hx-include={ include }
        }
        hx-target="main">
    </button>
}

func winterString(course *Course) string {
    winterText := ""
    if course.Start == teachingWinterOnly || course.Start == teachingBoth {
        winterText = fmt.Sprintf("%d/%d, %s", course.LectureRange1, course.SeminarRange1, course.ExamType)
    } else {
        winterText = "---"
    }
    return winterText
}

func summerString(course *Course) string {
    summerText := ""
    if course.Start == teachingSummerOnly {
        summerText = fmt.Sprintf("%d/%d, %s", course.LectureRange2, course.SeminarRange2, course.ExamType)
    } else if course.Start == teachingBoth {
        summerText = fmt.Sprintf("%d/%d, %s", course.LectureRange1, course.SeminarRange1, course.ExamType)
    } else {
        summerText = "---"
    }
    return summerText
}

func sortHxPatch(year, semester int, t text) string {
    return fmt.Sprintf(`sortHxPatch($item, %d, %d, $position, "%s")`, year, semester, t.Utils.Language)
}

// hx-vals generator methods
func vType(typeStr string) string     { return fmt.Sprintf(`"type": "%s"`, typeStr) }
func vYear(year int) string           { return fmt.Sprintf(`"year": %d`, year) }
func vSem(semester int) string        { return fmt.Sprintf(`"semester": %d`, semester) }
func vPos() string                    { return fmt.Sprintf(`"position": %d`, lastPosition) }
func vUnassign(unassign bool) string  { return fmt.Sprintf(`"unassign": %t`, unassign) }

func mergeVals(vals ...string) string { return strings.Join(vals, ", ") }

templ InternalServerErrorContent(t text) {
    // TODO translate
    <h1>Internal Server Error</h1>
    <p>Something went wrong</p>
}

templ InternalServerErrorPage(t text) {
    // TODO translate
    @utils.Page("Internal Server Error", t.Utils) {
        @InternalServerErrorContent(t)
    }
}

templ DefaultCourseAdditionPresenter(info insertedCourseInfo) {}