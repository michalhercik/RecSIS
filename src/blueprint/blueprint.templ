package blueprint

import (
    "github.com/michalhercik/RecSIS/utils"
    "strconv"
    "strings"
    "fmt"
)

const lastPosition = -1
const ttDelay = "600"

templ DefaultCourseAdditionPresenter(info insertedCourseInfo) {

}

// hx-vals generator methods
func vType(typeStr string) string     { return fmt.Sprintf(`"type": "%s"`, typeStr) }
func vYear(year int) string           { return fmt.Sprintf(`"year": %d`, year) }
func vSem(semester int) string        { return fmt.Sprintf(`"semester": %d`, semester) }
func vPos() string                    { return fmt.Sprintf(`"position": %d`, lastPosition) }

func mergeVals(vals ...string) string { return strings.Join(vals, ", ") }

templ adjustCoursesButton(transparent bool, icon, xShow, tooltip, vals, include string, method templ.Attributes) {
    <button
        if (xShow != "") {
            x-cloak
            x-show={ xShow }
        }
        data-bs-toggle="tooltip"
        data-bs-placement="bottom"
        data-bs-delay={ ttDelay }
        data-bs-title={ tooltip }
        @click="bootstrap.Tooltip.getInstance($el).dispose();"
        @mouseleave="initializeTooltips()"
        class={ "btn btn-outline-secondary btn-sm bi " + icon }
        if (transparent) {
            style="--bs-btn-border-color: transparent;"
        }
        { method... }
        if (vals != "") {
            hx-vals={ vals }
        }
        if (include != "") {
            hx-include={ include }
        }
        hx-target="main">
    </button>
}

templ unassignCoursesButton(transparent bool, tooltip, vals, include string, t text) {
    @adjustCoursesButton(transparent, "bi-dash-circle", "", tooltip, vals, include, templ.Attributes{"hx-patch": t.Utils.LangLink("/blueprint/courses")})
}

templ removeCoursesButton(transparent bool, tooltip, vals, include string, t text) {
    @adjustCoursesButton(transparent, "bi-trash-fill", "", tooltip, vals, include, templ.Attributes{"hx-delete": t.Utils.LangLink("/blueprint/courses")})
}

templ unassignCourseButton(ID int, t text) {
    @adjustCoursesButton(true, "bi-dash-circle", "hover && !isSorting", t.TTUnassign, mergeVals(vYear(0), vSem(0), vPos()), "", templ.Attributes{"hx-patch": t.Utils.LangLink(fmt.Sprintf("/blueprint/course/%d", ID))})
}

templ assignSemesterButton(year, semester int, patch, vals, include, semesterText string, t text) {
    <button
        type="button"
        class="btn btn-outline-secondary btn-sm text-nowrap"
        style="--bs-btn-border-color: transparent; min-width: 120px;"
        hx-patch={ patch }
        hx-vals={ mergeVals(vYear(year), vSem(semester), vPos()) + vals }
        if (include != "") {
            hx-include={ include }
        }
        hx-target="main">
        { t.YearStr(year) + " " + semesterText }
    </button>
}

templ assignMenu(yearCount int, showCondBox, patch, vals, include string, t text) {
    <div
        x-cloak
        x-show={ "openAssign" + showCondBox }
        class="assign-box"
        @click.outside="openAssign = false"
    >
        for i := 1; i <= yearCount; i++ {
            @assignSemesterButton(i, int(assignmentWinter), patch, vals, include, t.Winter, t)
            @assignSemesterButton(i, int(assignmentSummer), patch, vals, include, t.Summer, t)
        }
    </div>
}

templ assignCourseButtonInternal(transparent bool, tooltip, showCondButton, showCondBox, patch, vals, include string, yearCount int, t text) {
    <div style="position: relative; display: inline-block;">
        <button
            if (showCondButton != "") {
                x-cloak
                x-show={ showCondButton }
            }
            data-bs-toggle="tooltip"
            data-bs-placement="bottom"
            data-bs-delay={ ttDelay }
            data-bs-title={ tooltip }
            class="btn btn-outline-secondary btn-sm bi bi-arrows-move"
            if (transparent) {
                style="--bs-btn-border-color: transparent;"
            }
            @click="openAssign = !openAssign;
                    let tooltip = bootstrap.Tooltip.getInstance($el);
                    if (openAssign) {
                        tooltip.disable();
                        tooltip.hide();
                    } else {
                        initializeTooltips();
                    }"
            @mouseleave="if (!openAssign) initializeTooltips()">
        </button>
        @assignMenu(yearCount, showCondBox, patch, vals, include, t)
    </div>
}

templ assignCoursesButton(yearCount int, t text) {
    @assignCourseButtonInternal(false, t.TTAssignChecked, "", "", t.Utils.LangLink("/blueprint/courses"), `, ` + vType(selectedMove), "input[type=checkbox]:checked", yearCount, t)
}

templ assignCourseButton(tooltip string, yearCount, ID int, t text) {
    @assignCourseButtonInternal(true, tooltip, "hover && !isSorting", " && hover && !isSorting", t.Utils.LangLink(fmt.Sprintf("/blueprint/course/%d", ID)), "", "", yearCount, t)
}

templ removeCourseButton(ID int, t text) {
    @adjustCoursesButton(true, "bi-trash-fill", "hover && !isSorting", t.TTRemove, "", "", templ.Attributes{"hx-delete": t.Utils.LangLink(fmt.Sprintf("/blueprint/course/%d", ID))})
}

templ summarizeFooter(data *Blueprint, t text) {
    <table class="table table-sm blueprint-table">
        <thead><tr>
            <th></th>
            <th><h5 class="mb-0 text-nowrap">{ t.Total }</h5></th>
            <th></th>
            <th class="th-overflow credits-column d-none d-md-table-cell">{ fmt.Sprintf("%s: %d", t.Credits, data.totalCredits()) }</th>
            <th class="d-none d-md-table-cell"></th>
            <th class="d-none d-md-table-cell"></th>
            <th class="d-none d-xl-table-cell"></th>
            <th class="th-overflow align-middle py-0 lh-1">
                // change number of years
                // for this to overflow left, text order is left to right so the elements are in the opposite order
                <button
                    class="btn btn-sm btn-outline-secondary bi bi-plus"
                    hx-post={ t.Utils.LangLink("/blueprint/year") }
                    hx-target="main">
                </button>
                { strconv.Itoa(len(data.years) - 1) }
                <button
                    class="btn btn-outline-secondary btn-sm bi bi-dash"
                    hx-delete={ t.Utils.LangLink("/blueprint/year") }
                    hx-target="main"
                    :disabled={ fmt.Sprintf("%d <= 0", len(data.years) - 1) }>
                </button>
                { t.NumOfYears }
            </th>
        </tr></thead>
    </table>
}

templ dragCourseButton(t text) {
    <button
        x-cloak
        x-show="hover && !isSorting"
        data-bs-toggle="tooltip"
        data-bs-placement="bottom"
        data-bs-delay={ ttDelay }
        data-bs-title={ t.TTMove }
        class="btn btn-sm bi bi-grip-horizontal"
        style="--bs-btn-active-border-color: transparent;"
        x-sort:handle>
    </button>
}

func winterString(course *Course) string {
    winterText := ""
    if course.Start == teachingWinterOnly || course.Start == teachingBoth {
        winterText = fmt.Sprintf("%d/%d, %s", course.LectureRange1, course.SeminarRange1, course.ExamType)
    } else {
        winterText = "---"
    }
    return winterText
}

func summerString(course *Course) string {
    summerText := ""
    if course.Start == teachingSummerOnly {
        summerText = fmt.Sprintf("%d/%d, %s", course.LectureRange2, course.SeminarRange2, course.ExamType)
    } else if course.Start == teachingBoth {
        summerText = fmt.Sprintf("%d/%d, %s", course.LectureRange1, course.SeminarRange1, course.ExamType)
    } else {
        summerText = "---"
    }
    return summerText
}

templ checkbox(ID, yearCount int, t text) {
    <div class="checkbox-container" x-data="{ checked: false, showMenu: false, hoverTimeout: null, openAssign: false }">
        <input
            type="checkbox"
            id={ fmt.Sprintf("checkbox%d", ID) }
            class="form-check-input"
            style="border: 1px solid #2c2c2c !important; z-index: 1 !important;"
            name="selected"
            value={ strconv.Itoa(ID) }
            @change="checkedNumber = $event.target.checked ? checkedNumber + 1 : checkedNumber - 1; if (checked) { showMenu = false; clearTimeout(hoverTimeout); openAssign = false };checked = !checked;"
        />
        <div
            class="circle-overlay"
            @click="handleCircleClick($event); hoverTimeout = setTimeout(() => { if (checked) { showMenu = true } }, 250);"
            @mouseover="if (checked) { hoverTimeout = setTimeout(() => showMenu = true, 150); }"
            @mouseleave="showMenu = false; clearTimeout(hoverTimeout); openAssign = false">
            <div x-cloak x-show="showMenu">
                // take care of checked courses
                <div class="option-menu">
                    // unassign
                    @unassignCoursesButton(false, t.TTUnassignChecked, mergeVals(vType(selectedMove), vYear(0), vSem(0), vPos()), "input[type=checkbox]:checked", t)
                    // assign
                    @assignCoursesButton(yearCount, t)
                    // remove
                    @removeCoursesButton(false, t.TTRemoveChecked, mergeVals(vType(selectedRemove)), "input[type=checkbox]:checked", t)
                </div>
            </div>
        </div>
    </div>
}

templ coursesBody(courses []Course, canUnassign bool, xSortMethod, assignTT string, yearCount int, t text) {
    <tbody
        x-cloak
        x-show="showCourses"
        x-sort={ xSortMethod }
        x-sort:group="courses"
    >
        for _, course := range courses {
        <tr
            x-data="{ hover: false, openAssign: false }"
            @mouseover="hover = true"
            @mouseleave="hover = false, openAssign = false, initializeTooltips()"
            x-sort:item={ strconv.Itoa(course.ID) }
        >
            <td class="text-center"> @checkbox(course.ID, yearCount, t) </td>
            <td> @utils.CourseLink(course.Code, t.Utils) </td>
            <td> @utils.TitleCourseLink(course.Code, course.Title, t.Utils) </td>
            <td class="credits-column text-end d-none d-md-table-cell">{ strconv.Itoa(course.Credits) }</td>
            <td class="d-none d-md-table-cell">{ winterString(&course) }</td>
            <td class="d-none d-md-table-cell">{ summerString(&course) }</td>
            <td class="d-none d-xl-table-cell">{ course.Guarantors.string() }</td>
            <td class="text-end align-middle py-0">
                if canUnassign {
                    // unassign button
                    @unassignCourseButton(course.ID, t)
                }
                // (re)assign button
                @assignCourseButton(assignTT, yearCount, course.ID, t)
                // remove course button
                @removeCourseButton(course.ID, t)
                // drag button
                @dragCourseButton(t) 
            </td>
        </tr>
        }
        // dummy row for sorting error (Cannot read properties of null (reading 'nextSibling')) fix
        <tr class="dummy-row" x-sort:item style="display: none;"></tr>
    </tbody>
}

templ noCoursesTableContent(text, xSort string) {
    <thead><tr>
        <th></th> // checkbox
        <th><h5 class="mb-0 text-nowrap text-secondary">{ text }</h5></th> // text (or code)
        <th></th> // title
        <th class="d-none d-md-table-cell"></th> // credits
        <th class="d-none d-md-table-cell"></th> // winter
        <th class="d-none d-md-table-cell"></th> // summer
        <th class="d-none d-xl-table-cell"></th> // guarantors
        <th></th> // buttons
    </tr></thead>
    <tbody x-sort={ xSort } x-sort:group="courses">
        // dummy row for sorting error (Cannot read properties of null (reading 'nextSibling')) fix
        <tr class="dummy-row" x-sort:item style="display: none;"></tr>
    </tbody>
}

func sortHxPatch(year, semester int, t text) string {
    return fmt.Sprintf(`sortHxPatch($item, %d, %d, $position, "%s")`, year, semester, t.Language)
}

templ showHideCoursesButton(year int, semester string, t text) {
    <button
        @click="showCourses = !showCourses"
        class="btn btn-sm btn-outline-secondary w-100 p-0"
        :class="showCourses ? 'bi bi-caret-down-fill' : 'bi bi-caret-up-fill'"
        style="--bs-btn-border-color: transparent; aspect-ratio: 1 / 1;"
        hx-patch={ t.Utils.LangLink(fmt.Sprintf("/blueprint/%d/%s", year, semester)) }
        :hx-vals="JSON.stringify({ folded: !showCourses })">
    </button>
}

templ unassignHeadline(t text) {
    <thead><tr>
        <th class="text-end align-middle p-0 bg-white lh-1">
            @showHideCoursesButton(0, unassignedStr, t)
        </th>
        <th><h5 class="mb-0 text-nowrap">{ t.Unassigned }</h5></th>
        <th></th>
        <th class="th-overflow credits-column d-none d-md-table-cell">{ t.Credits }</th>
        <th class="d-none d-md-table-cell">{ t.Winter }</th>
        <th class="d-none d-md-table-cell">{ t.Summer }</th>
        <th class="d-none d-xl-table-cell">{ t.Guarantors }</th>
        <th class="text-end align-middle py-0 lh-1">
            // remove all unassigned courses button
            @removeCoursesButton(true, t.TTRemoveUnassigned, mergeVals(vType(yearRemove), vYear(0)), "", t)
        </th>
    </tr></thead>
}

templ unassignedTable(unassigned []Course, folded bool, yearCount int, t text) {
    <div x-data={ fmt.Sprintf("{ showCourses: %t }", !folded) }>
        <table class="table table-sm blueprint-table" :class=" isSorting || 'table-hover' ">
        if len(unassigned) > 0 {
        // if there are unassigned courses
            @unassignHeadline(t)
            @coursesBody(unassigned, false, sortHxPatch(0, 0, t), t.TTAssign, yearCount, t)
        } else {
        // if there are no unassigned courses
            @noCoursesTableContent(t.NoUnassignedText, sortHxPatch(0, 0, t))
        }
        </table>
    </div>
}

templ popoverHeadline(year, runningCredits, yearCredits, semesterCredits int, semester string, t text) {
    <h5
        class="mb-0 text-nowrap"
        style="cursor: help;"
        data-bs-toggle="popover"
        data-bs-trigger="hover" 
        data-bs-html="true"
        data-bs-placement="bottom"
        data-bs-title={ t.TTNumberOfCredits }
        data-bs-content={ fmt.Sprintf("%s: %d<br>%s: %d<br>%s: %d", t.TTSemesterCredits, semesterCredits, t.TTYearCredits, yearCredits, t.TTRunningCredits, runningCredits) }>
        { fmt.Sprintf("%s %s", t.YearStr(year), semester) }
    </h5>
}

templ winterHeadline(year, runningCredits, yearCredits, winterCredits int, t text) {
    <thead><tr>
        <th class="text-end align-middle p-0 bg-white lh-1">
            @showHideCoursesButton(year, winterStr, t)
        </th>
        <th>
            @popoverHeadline(year, runningCredits, yearCredits, winterCredits, t.Winter, t)
        </th>
        <th></th>
        <th class="th-overflow credits-column d-none d-md-table-cell">{ fmt.Sprintf("%s: %d", t.Credits, winterCredits) }</th>
        <th class="d-none d-md-table-cell">{ t.Winter }</th>
        <th class="d-none d-md-table-cell">{ t.Summer }</th>
        <th class="d-none d-xl-table-cell">{ t.Guarantors }</th>
        <th class="text-end align-middle py-0 lh-1">
            // unassign all courses button
            @unassignCoursesButton(true, t.TTUnassignWinter, mergeVals(vType(semesterUnassign), vYear(year), vSem(int(assignmentWinter))), "", t)
            // remove all courses button
            @removeCoursesButton(true, t.TTRemoveWinter, mergeVals(vType(semesterRemove), vYear(year), vSem(int(assignmentWinter))), "", t)
        </th>
    </tr></thead>
}

templ winterTable(courses []Course, folded bool, year, yearCount, runningCredits, yearCredits, winterCredits int, t text) {
    <div x-data={ fmt.Sprintf("{ showCourses: %t }", !folded) }>
        <table class="table table-sm blueprint-table" :class=" isSorting || 'table-hover' ">
        if len(courses) > 0 {
        // if there are some courses
            @winterHeadline(year, runningCredits, yearCredits, winterCredits, t)
            @coursesBody(courses, true, sortHxPatch(year, int(assignmentWinter), t), t.TTReassign, yearCount, t)
        } else {
        // if there are no courses
            {{
                text := t.YearStr(year) + " " + t.Winter + " - " + t.EmptySemester
            }}
            @noCoursesTableContent(text, sortHxPatch(year, int(assignmentWinter), t))
        }
        </table>
    </div>
}

templ summerHeadline(year, runningCredits, yearCredits, summerCredits int, t text) {
    <thead><tr>
        <th class="text-end align-middle p-0 bg-white lh-1">
            @showHideCoursesButton(year, summerStr, t)
        </th>
        <th>
            @popoverHeadline(year, runningCredits, yearCredits, summerCredits, t.Summer, t)
        </th>
        <th></th>
        <th class="th-overflow credits-column d-none d-md-table-cell">{ fmt.Sprintf("%s: %d", t.Credits, summerCredits) }</th>
        <th class="d-none d-md-table-cell">{ t.Winter }</th>
        <th class="d-none d-md-table-cell">{ t.Summer }</th>
        <th class="d-none d-xl-table-cell">{ t.Guarantors }</th>
        <th class="text-end align-middle py-0 lh-1">
            // unassign all courses button
            @unassignCoursesButton(true, t.TTUnassignSummer, mergeVals(vType(semesterUnassign), vYear(year), vSem(int(assignmentSummer))), "", t)
            // remove all courses button
            @removeCoursesButton(true, t.TTRemoveSummer, mergeVals(vType(semesterRemove), vYear(year), vSem(int(assignmentSummer))), "", t)
        </th>
    </tr></thead>
}

templ summerTable(courses []Course, folded bool, year, yearCount, runningCredits, yearCredits, summerCredits int, t text) {
    <div x-data={ fmt.Sprintf("{ showCourses: %t }", !folded) }>
        <table class="table table-sm blueprint-table" :class=" isSorting || 'table-hover' ">
        if len(courses) > 0 {
        // if there are some courses
            @summerHeadline(year, runningCredits, yearCredits, summerCredits, t)
            @coursesBody(courses, true, sortHxPatch(year, int(assignmentSummer), t), t.TTReassign, yearCount, t)
        } else {
        // if there are no courses
            {{
                text := t.YearStr(year) + " " + t.Summer + " - " + t.EmptySemester
            }}
            @noCoursesTableContent(text, sortHxPatch(year, int(assignmentSummer), t))
        }
        </table>
    </div>
}

templ yearsTables(years []AcademicYear, t text) {
    {{ runningCredits := 0 }}
    for _, year := range years {
        <div id={ fmt.Sprintf("blueprint-year-%d", year.position) }>
            // render winter
            {{ runningCredits += year.winterCredits() }}
            @winterTable(year.winter.courses, year.winter.folded, year.position, len(years), runningCredits, year.credits(), year.winterCredits(), t)
            // render summer
            {{ runningCredits += year.summerCredits() }}
            @summerTable(year.summer.courses, year.summer.folded,  year.position, len(years), runningCredits, year.credits(), year.summerCredits(), t)
        </div>
    }
}

templ Content(data *Blueprint, t text) {
    // TODO: when going back (clicking <- icon in the left top corner) to this page, all x-data must reinitialize
    // THIS IS VERY PROBLEMATIC, MUST BE FIXED
    <div x-data="data" class="container pt-3">
        @unassignedTable(data.years[0].unassigned.courses, data.years[0].unassigned.folded, len(data.years) - 1, t)
        if len(data.years) > 1 {
            @yearsTables(data.years[1:], t)
        }
        @summarizeFooter(data, t)
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            initAll();
        });

        function initAll() {
            initializeTooltips();
            initializePopovers();
            setupCheckboxShiftClick();
        }

        document.addEventListener('htmx:afterSwap', function (e) {
            // Initialize tooltips and popovers after HTMX swaps in new content
            initAll();
            // Reinitialize Alpine when HTMX swaps in new content
            if (e.detail.target === document.body) {
                console.log("htmx:afterSwap.body"); // TODO: remove this log
                let initAlpine = new Event('alpine:init');
                document.dispatchEvent(initAlpine);
            }
        });

        document.addEventListener('alpine:init', () => {
            Alpine.data('data', () => ({
                checkedNumber: 0,

                // drag&drop (sorting) focus/hover chrome bug (https://alpinejs.dev/plugins/sort#css-hover-bug) solution
                isSorting: false,
                checkSortingClass() { this.isSorting = document.body.classList.contains('sorting'); },
                init() {
                    this.checkSortingClass();
                    const observer = new MutationObserver(() => this.checkSortingClass());
                    observer.observe(document.body, { attributes: true, attributeFilter: ['class'] });
                },
            }));
        });

        // bootstrap tooltip initialization
        function initializeTooltips() {
            // Dispose of existing tooltips
            var tooltipElements = document.querySelectorAll('.tooltip');
            tooltipElements.forEach(function (tooltipEl) {
                tooltipEl.remove();
            });

            // Initialize new tooltips
            const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle="tooltip"]')
            const tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl))
        };

        // bootstrap popover initialization
        function initializePopovers() {
            // Initialize new popovers
            const popoverTriggerList = document.querySelectorAll('[data-bs-toggle="popover"]')
            const popoverList = [...popoverTriggerList].map(popoverTriggerEl => new bootstrap.Popover(popoverTriggerEl))
        };

        // shift click for multiple checkboxes
        function setupCheckboxShiftClick() {
            let lastChecked = null;
            const checkboxes = document.querySelectorAll('input[type="checkbox"][name="selected"]');
            checkboxes.forEach(checkbox => {
                checkbox.addEventListener('click', function (e) {
                    if (lastChecked && lastChecked !== this && e.shiftKey) {
                        let inBetween = false;
                        checkboxes.forEach(box => {
                            if (box === this || box === lastChecked) {
                                inBetween = !inBetween;
                            }
                            else if (inBetween && box.checked !== this.checked) {
                                box.checked = this.checked;
                                box.dispatchEvent(new Event('change'));
                            }
                        });
                        if (lastChecked.checked !== this.checked) {
                            lastChecked.checked = this.checked;
                            lastChecked.dispatchEvent(new Event('change'));
                        }
                    }
                    lastChecked = this;
                });
            });
        }

        // pass through (shift-)click event to checkbox
        function handleCircleClick(event) {
            const checkbox = event.target.previousElementSibling;
            if (checkbox) {
                // Create a new MouseEvent, preserving shift key and other properties
                const clickEvent = new MouseEvent('click', {
                    bubbles: true,
                    cancelable: true,
                    shiftKey: event.shiftKey,
                });

                checkbox.dispatchEvent(clickEvent);
            }
        }

        // update position of course in database using dynamic htmx patch
        function sortHxPatch(item, year, semester, position, language) {
            htmx.ajax('PATCH', '/' + language + '/blueprint/course/' + item, {
                target: 'main',
                values: { year: year, semester: semester, position: position + 1 }
            });
        }
    </script>
}

templ Page(data *Blueprint, t text) {
    @utils.Page(t.Utils.Blueprint, t.Utils) {
        @Content(data, t)
    }
}

templ InternalServerErrorContent(t text) {
    // TODO translate
    <h1>Internal Server Error</h1>
    <p>Something went wrong</p>
}

templ InternalServerErrorPage(t text) {
    // TODO translate
    @utils.Page("Internal Server Error", t.Utils) {
        @InternalServerErrorContent(t)
    }
}