package courses

import (
    "github.com/michalhercik/RecSIS/utils"
	"github.com/michalhercik/RecSIS/courses/internal/filter"
    "strconv"
)

const coursesPerPage = 30

func max(a, b int) int {
	if a > b {
		return a
	}
	return b
}

func min(a, b int) int {
    if a < b {
        return a
    }
    return b
}

func semesterHoursExamsString(course *Course, t text) string {
    result := course.Start.String(t.Language) + " "
    both := strconv.Itoa(course.LectureRange1) + "/" + strconv.Itoa(course.SeminarRange1)
    winter := strconv.Itoa(course.LectureRange1) + "/" + strconv.Itoa(course.SeminarRange1)
    summer := strconv.Itoa(course.LectureRange2) + "/" + strconv.Itoa(course.SeminarRange2)
    
    switch course.Start {
    case teachingWinterOnly:
        result += winter
    case teachingSummerOnly:
        result += summer
    case teachingBoth:
        result += both
    }

    if course.SemesterCount == 2 {
        switch course.Start {
        case teachingWinterOnly:
            result += " " + t.SummerAssign + " " + summer
        case teachingSummerOnly:
            result += " " + t.WinterAssign + " " + winter
        case teachingBoth:
            result = "ERROR" // TODO: what should be done in this case? can it even happen?
        }
    }

    return result + ", " + course.ExamType
}

templ QuickResults(res *QuickResponse, t text) {
    <div
        id="quick-search-results"
        class="dropdown-menu w-100 shadow-sm show"
    >
        if res.approxHits == -1 {
            // Don't render anything if approxHits is -1
        } else if len(res.courses) == 0 {
            <div class="dropdown-item text-muted">{ t.NoCoursesFound }</div>
        } else {
            for _, course := range res.courses {
                <a
                    href={ templ.URL(t.Utils.LangLink("/course/" + course.code)) }
                    class="dropdown-item text-truncate"
                    hx-boost="false"
                    tabindex="0"
                >
                    { course.code + " - " + course.name }
                </a>
            }
        }
    </div>
}

templ search(coursesPage *coursesPage, t text) {
    <form
        id="search-form"
        hx-get={ t.Utils.LangLink("/courses/search") }
        hx-target="#courses"
        hx-swap="outerHTML"
        hx-include="#filter-form"
        class="pt-3 pb-3"
        x-data="{ quickResOpen: false }"
    >
        <div class="justify-content-center mx-5">
            <div class="dropdown" @click.away="quickResOpen = false">
                <div class="input-group">
                    <input type="text" name={ searchParam } id="search" class="form-control" placeholder={ t.SearchPlaceholder } autocomplete="off"
                        x-model="searchInput"
                        @click="quickResOpen = true"
                        @keydown="quickResOpen = true"
                        @keydown.escape="quickResOpen = false"
                        @focus="quickResOpen = true; if (searchInput !== '') $dispatch('triggerSearch')"
                        hx-get={ t.Utils.LangLink("/courses/quicksearch") }
                        hx-trigger="input changed, triggerSearch from:body"
                        hx-target="#quick-search-results"
                        hx-swap="outerHTML"
                        hx-push-url="false"
                    />
                    <button type="submit" class="btn btn-primary" @click="quickResOpen = false">{ t.SearchButton }</button>
                </div>
                <div x-cloak x-show="quickResOpen && searchInput.length > 0">
                    @QuickResults(&QuickResponse{
                        approxHits: -1,
                        courses: []QuickCourse{},
                    }, t)
                </div>
            </div>
        </div>
    </form>
}

templ checkboxInput(name, value, label string, count int, t text) {
    <div class="form-check">
        <input role="button" class="form-check-input" 
            type="checkbox" name={ name } id={ name + "-" + value } value={ value }>
        <label role="button" class="form-check-label" for={ name + "-" + value }>
            { label + " (" + strconv.Itoa(count) + ")" }
        </label>
    </div>
}

templ filterOptions(label string, cp *coursesPage, p filter.Parameter, t text) {
    <div>
        <p class="form-label">{ label + ":" }</p>
        for f := range cp.facets.ParamDistribution(p) {
            @checkboxInput(filter.ParamPrefix + strconv.Itoa(int(p)), strconv.Itoa(f.Code), f.Label, f.Count, t)
        }
    </div>
}


templ filterSection(cp *coursesPage, t text) {
    <div class="form-group" style="height: 100%;">
        <form
            id="filter-form"
            hx-get={ t.Utils.LangLink("/courses/search") }
            hx-target="#courses"
            hx-swap="outerHTML"
            hx-include="#search-form"
            hx-trigger="change"
        >
            // semester filter
            @filterOptions(t.SemesterFilter, cp, filter.StartSemester, t)
            // number of semesters filter
            @filterOptions(t.SemesterCountFilter, cp, filter.SemesterCount, t)
            // faculty filter
            @filterOptions(t.FacultyFilter, cp, filter.Faculty, t)
            // credits filter
            @filterOptions(t.CreditsFilter, cp, filter.Credits, t)
            // exam type filter
            @filterOptions(t.ExamTypeFilter, cp, filter.ExamType, t)
            // ranges filters
            @filterOptions(t.LectureRangeWFilter, cp, filter.LectureRangeWinter, t)
            @filterOptions(t.SeminarRangeWFilter, cp, filter.SeminarRangeWinter, t)
            @filterOptions(t.LectureRangeSFilter, cp, filter.LectureRangeSummer, t)
            @filterOptions(t.SeminarRangeSFilter, cp, filter.SeminarRangeSummer, t)
            // range unit filter
            @filterOptions(t.RangeUnitFilter, cp, filter.RangeUnit, t)
            // is taught filter
            @filterOptions(t.TaughtFilter, cp, filter.Taught, t)
            // language filter
            @filterOptions(t.LanguageFilter, cp, filter.TaughtLang, t)
            // guarantor filter
            @filterOptions(t.FacultyGuarantorFilter, cp, filter.FacultyGuarantor, t)
            // max capacity filter
            @filterOptions(t.CapacityFilter, cp, filter.Capacity, t)
            // min number people filter
            @filterOptions(t.MinNumberFilter, cp, filter.MinNumber, t)
        </form>
        // move to the top of the page button
        <div class="text-center justify-content-center d-flex mt-3" style="position: sticky; top: 72px;">
            <p
                role="button"
                @click="window.scrollTo({ top: 0, behavior: 'smooth' })"
                class="link-primary"
            >
                <i class="bi bi-chevron-up"></i>
                { t.TopFilter }
            </p>
        </div>
    </div>
}

templ ribbon(ba AssignmentSlice, t text) {
    if len(ba) > 0 {
        <div class="ribbon">
            <span>{ ba.String(t.Language) }</span>
        </div>
    }
}

templ blueprintAssignment(code string, t text) {
    <div class="d-flex justify-content-end mt-auto pt-3">
        <div class="btn-group">
            <button type="button" class="btn btn-outline-blueprint"
                hx-post={ "/blueprint/course/" + code }
                hx-vals={ `"year": 0, "semester": 0, "lang": "` + t.Language + `"` }
            >
                { t.Assign }
            </button>
            <button type="button" class="btn btn-outline-blueprint dropdown-toggle dropdown-toggle-split"
                data-bs-toggle="dropdown" aria-expanded="false">
            </button>
            <ul class="dropdown-menu">
            // TODO: make dynamic, NOT 3 fixed years
                for year := 1; year <= 3; year++ {
                    <li class="mx-3"><button class="dropdown-item text-center"
                        hx-post={ "/blueprint/course/" + code }
                        hx-vals={ `"year": ` + strconv.Itoa(year) + `, "semester": 1, "lang": "` + t.Language + `"` }
                    >
                    { t.YearStr(year) + " " + t.WinterAssign }
                    </button></li>
                    <li class="mx-3"><button class="dropdown-item text-center"
                        hx-post={ "/blueprint/course/" + code }
                        hx-vals={ `"year": ` + strconv.Itoa(year) + `, "semester": 2, "lang": "` + t.Language + `"` }
                    >
                    { t.YearStr(year) + " " + t.SummerAssign }
                    </button></li>
                }
            </ul>
        </div>
    </div>
}

templ courseCard(course *Course, t text) {
    <div
        class="card custom-card rounded-0"
        x-data="{ expanded: false, showButton: false, isHovered: false }"
        @mouseenter="isHovered = true"
        @mouseleave="isHovered = false"
        x-init="$nextTick(() => { showButton = $refs.annotation.scrollHeight > 350 })"
    >
        <div class="card-header d-flex justify-content-between align-items-center">
            <h6 class="mb-0">{ course.Code }</h6>
            <small>{ semesterHoursExamsString(course, t) }</small>
            <small>{ t.Credits + ": " + strconv.Itoa(course.Credits) }</small>
        </div>
        <div class="card-body d-flex flex-column position-relative">
            @ribbon(course.BlueprintAssignments, t)
            <div
                :class="{ 'expanded': expanded, 'annotation-container': showButton }" :style="isHovered && { 'z-index': '100' }"
                x-ref="annotation"
            >
                <h5 class="card-title"><a class="link-body-emphasis link-offset-2 link-underline-opacity-0 link-underline-opacity-75-hover" href={ templ.URL(t.Utils.LangLink("/course/" + course.Code)) }>{ course.Name }</a></h5>
                // TODO take care of no guarantors
                <h6 class="card-subtitle mb-2 text-muted">{ course.Guarantors.string() }</h6>
                <p class="card-text annotation-text">{ course.Annotation.string() }</p>
            </div>
            <button class="btn btn-link text-secondary" @click="expanded = !expanded" x-show="showButton" x-text={ "expanded ? '" + t.ReadLess + "' : '" + t.ReadMore + "'" }></button>
            @blueprintAssignment(course.Code, t)
        </div>
    </div>
}

templ paginationIconButton(page int, icon string, cp *coursesPage, t text) {
    <li class="page-item">
        <div
            role="button"
            class="page-link"
            :class={ strconv.FormatBool(cp.page == page || page < 1 || page > cp.totalPages) + " && 'disabled'" }
            hx-get={ t.Utils.LangLink("/courses/search") }
            hx-vals={ `"` + pageParam + `": ` + strconv.Itoa(page) }
        >
            <i class={ icon }></i>
        </div>
    </li>
}

templ paginationNumberButton(page int, cp *coursesPage, t text) {
    <li class="page-item">
        <div
            role="button"
            class="page-link"
            :class={ strconv.FormatBool(cp.page == page) + " && 'active'" }
            hx-get={ t.Utils.LangLink("/courses/search") }
            hx-vals={ `"` + pageParam + `": ` + strconv.Itoa(page) }
        >
            { strconv.Itoa(page) }
        </div>
    </li>
}

templ loadMoreButton(newPageSize int, cp *coursesPage, t text) {
    <button
        class="btn btn-outline-primary"
        hx-get={ t.Utils.LangLink("/courses/search") }
        hx-vals={ `"` + hitsPerPageParam + `": ` + strconv.Itoa(newPageSize) }
        hx-target="#courses"
        hx-include="#filter-form, #search-form"
        hx-swap="outerHTML"
    >
        { t.LoadMore }
    </button>
}

templ threeDots() {
    <li class="page-item">
        <div class="page-link">
            <i class="bi bi-three-dots"></i>
        </div>
    </li>
}

templ pagination(cp *coursesPage, t text) {
    // disable pagination if loaded more courses
    if cp.pageSize == coursesPerPage {
        <div class="mt-3 d-flex justify-content-center">
            <ul
                class="pagination justify-content-center mt-3"
                hx-target="#courses"
                hx-include="#filter-form, #search-form"
                hx-swap="outerHTML show:window:top"
                hx-trigger="click"
            >
                @paginationIconButton(cp.page - 1, "bi bi-chevron-left", cp, t)
                @paginationNumberButton(1, cp, t)
                if cp.page > 4 {
                    @threeDots()
                }
                for i := max(2, cp.page - 2); i <= min(cp.page + 2, cp.totalPages - 1); i++ {
                    @paginationNumberButton(i, cp, t)
                }
                if cp.page < cp.totalPages - 3 {
                    @threeDots()
                }
                @paginationNumberButton(cp.totalPages, cp, t)
                @paginationIconButton(cp.page + 1, "bi bi-chevron-right", cp, t)
            </ul>
        </div>
    }
    // disable load more button if it is not the first page
    if cp.page == 1 {
        <div class="d-flex justify-content-center mt-3">
            @loadMoreButton(cp.pageSize + coursesPerPage, cp, t)
        </div>
    }
}

templ Courses(cp *coursesPage, t text) {
    <div id="courses">
        <div class="grid-cards">
            if cp.totalPages == 0 {
                <p>{ t.NoCoursesFound }</p>
            } else {
                for _, course := range cp.courses {
                    @courseCard(&course, t)
                }
            }
            // dummy cards for alignment
            for i := 0; i < 10; i++ {
                <div class="card custom-card border-0"></div>
            }
        </div>
        if cp.totalPages > 1 {
            @pagination(cp, t)
        }
    </div>
}

templ Content(coursesPage *coursesPage, t text) {
    // TODO: define x-data, x-model and x-init for all filters to survive page reload
    // x-data is needed for x-bind:class to work
    <div id="courses-page" class="grid-page" x-data="{ searchInput: '' }" x-init={ "searchInput = '" + coursesPage.search + "';" }>
        <div class="filter bg-body-secondary">
            @filterSection(coursesPage, t)
        </div>
        <div class="main-content">
            @search(coursesPage, t)
            @Courses(coursesPage, t)
        </div>
    </div>
}

templ Page(coursesPage *coursesPage, t text) {
    @utils.Page(t.Utils.Courses, t.Utils) {
        @Content(coursesPage, t)
    }
}