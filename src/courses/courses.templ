package courses

import (
    "github.com/michalhercik/RecSIS/utils"
	// "github.com/michalhercik/RecSIS/courses/internal/filter"
    "strconv" // TODO: rewrite all strconv.Itoa to fmt.Sprintf
    "fmt"
)

const coursesPerPage = 30

func max(a, b int) int {
	if a > b {
		return a
	}
	return b
}

func min(a, b int) int {
    if a < b {
        return a
    }
    return b
}

func semesterHoursExamsString(course *Course, t text) string {
    result := course.Start.String(t.Language) + " "
    both := fmt.Sprintf("%d/%d", course.LectureRange1, course.SeminarRange1)
    winter := fmt.Sprintf("%d/%d", course.LectureRange1, course.SeminarRange1)
    summer := fmt.Sprintf("%d/%d", course.LectureRange2, course.SeminarRange2)

    switch course.Start {
    case teachingWinterOnly:
        result += winter
    case teachingSummerOnly:
        result += summer
    case teachingBoth:
        result += both
    }

    if course.SemesterCount == 2 {
        switch course.Start {
        case teachingWinterOnly:
            result += " " + t.SummerAssign + " " + summer
        case teachingSummerOnly:
            result += " " + t.WinterAssign + " " + winter
        case teachingBoth:
            result = "ERROR" // TODO: what should be done in this case? can it even happen?
        }
    }

    return result + ", " + course.ExamType
}

templ QuickResults(res *QuickResponse, t text) {
    <div
        id="quick-search-results"
        class="dropdown-menu w-100 shadow-sm show"
    >
        if res.approxHits == -1 {
            // Don't render anything if approxHits is -1
        } else if len(res.courses) == 0 {
            <div class="dropdown-item text-muted">{ t.NoCoursesFound }</div>
        } else {
            for _, course := range res.courses {
                <a
                    href={ templ.URL(t.Utils.LangLink("/course/" + course.code)) }
                    class="dropdown-item text-truncate"
                    hx-boost="false"
                    tabindex="0"
                >
                    { course.code + " - " + course.name }
                </a>
            }
        }
    </div>
}

templ search(coursesPage *coursesPage, t text) {
    <form
        id="search-form"
        hx-get={ t.Utils.LangLink("/courses/search") }
        hx-target="#courses-page"
        hx-swap="outerHTML"
        hx-include="#filter-form"
        class="py-3"
        x-data="{ quickResOpen: false, quickResLoaded: false }"
        @htmx:after-request="quickResLoaded = true"
    >
        <div class="justify-content-center mx-5">
            <div class="dropdown" @click.away="quickResOpen = false">
                <div class="input-group">
                    <input type="text" name={ searchParam } id="search" class="form-control" placeholder={ t.SearchPlaceholder } autocomplete="off"
                        x-model="searchInput"
                        @click="if (!quickResLoaded && searchInput !== '') $dispatch('triggerSearch'); quickResOpen = true;"
                        @input="quickResOpen = true"
                        @keydown.escape="quickResOpen = false"
                        @focus="quickResOpen = true; if (searchInput !== '') $dispatch('triggerSearch')"
                        hx-get={ t.Utils.LangLink("/courses/quicksearch") }
                        hx-trigger="input changed, triggerSearch from:body"
                        hx-target="#quick-search-results"
                        hx-swap="outerHTML"
                        hx-push-url="false"
                    />
                    <button type="submit" class="btn btn-primary" @click="quickResOpen = false">{ t.SearchButton }</button>
                </div>
                <div x-cloak x-show="quickResOpen && searchInput.length > 0">
                    @QuickResults(&QuickResponse{
                        approxHits: -1,
                        courses: []QuickCourse{},
                    }, t)
                </div>
            </div>
        </div>
    </form>
}

templ helpIcon(content string) {
    <i
        class="mx-1 bi"
        :class="hoverHelp ? 'bi-question-circle-fill' : 'bi-question-circle'"
        style="cursor: help;"
        @mouseover="hoverHelp = true"
        @mouseleave="hoverHelp = false"
        data-bs-toggle="tooltip"
        data-bs-placement="right"
        data-bs-delay="200"
        data-bs-title={ content }
        >
    </i>
}

templ checkboxInput(name, value, label, desc string, count int, checked bool, t text) {
    <div class="form-check">
        <input role="button" class="form-check-input" disabled?={ count == 0 }
            type="checkbox" name={ name } id={ name + "-" + value } value={ value } checked?={ checked }>
        <label role="button" class="form-check-label" for={ name + "-" + value } x-data="{ hoverHelp: false }">
            <span>{ label }</span>
            if desc != "" {
                @helpIcon(desc)
            }
            <span>{ "(" + strconv.Itoa(count) + ")" } </span>
        </label>
    </div>
}

templ filterSection(cp *coursesPage, t text) {
    <div class="form-group" style="height: 100%;">
        <form
            id="filter-form"
            hx-get={ t.Utils.LangLink("/courses/search") }
            hx-target="#courses-page"
            hx-swap="outerHTML"
            hx-include="#search-form"
            hx-trigger="change"
        >
            for category := range cp.facets {
                <div x-data={ "{ expanded: JSON.parse(sessionStorage.getItem('expanded-" + category.ID() + "')) || false }" }>
                    <div class="d-flex justify-content-start align-items-end" x-data="{ hoverHelp: false }">
                        <p class="form-label fw-semibold mb-0 mt-2">{ category.Title() }</p>
                        if category.Desc() != "" {
                            @helpIcon(category.Desc())
                        }
                    </div> 
                    for i, value := range category.IterWithFacets() {
                        <div x-cloak x-show={ fmt.Sprintf("expanded || %d < %d", i, category.DisplayedValueLimit()) }>
                            @checkboxInput("par" + category.ID(), value.ID, value.Title, value.Desc, value.Count, value.Checked, t)
                        </div>
                    }
                    if category.Size() > category.DisplayedValueLimit() {
                        <button
                            hx-ignore="true"
                            type="button"
                            class="btn btn-link text-secondary p-0"
                            if others := category.Size() - category.DisplayedValueLimit(); others < 5 {
                                x-text={ fmt.Sprintf("expanded ? '%s' : '%s %d'", t.ShowLess, t.ShowMore4Minus, others) }
                            } else {
                                x-text={ fmt.Sprintf("expanded ? '%s' : '%s %d'", t.ShowLess, t.ShowMore5Plus, others) }
                            }
                            @click={ "expanded = !expanded; sessionStorage.setItem('expanded-" + category.ID() + "', expanded)" }>
                        </button>
                    }
                </div>
            }
        </form>
        // move to the top of the page button
        <div class="text-center justify-content-center d-flex mt-3" style="position: sticky; top: 72px;">
            <p
                role="button"
                @click="window.scrollTo({ top: 0, behavior: 'smooth' })"
                class="link-primary"
            >
                <i class="bi bi-chevron-up"></i>
                { t.TopFilter }
            </p>
        </div>
    </div>
}

templ ribbon(ba AssignmentSlice, t text) {
    if len(ba) > 0 {
        <div class="ribbon">
            <span>{ ba.String(t.Language) }</span>
        </div>
    }
}

templ blueprintAssignment(code string, t text) {
    <div class="d-flex justify-content-end mt-auto pt-3">
        <div class="btn-group">
            <button type="button" class="btn btn-outline-blueprint"
                hx-post={ t.Utils.LangLink("/blueprint/course/" + code) }
                hx-vals={ `"year": 0, "semester": 0, "lang": "` + t.Language + `"` }
            >
                { t.Assign }
            </button>
            <button type="button" class="btn btn-outline-blueprint dropdown-toggle dropdown-toggle-split"
                data-bs-toggle="dropdown" aria-expanded="false">
            </button>
            <ul class="dropdown-menu">
            // TODO: make dynamic, NOT 3 fixed years
                for year := 1; year <= 3; year++ {
                    <li class="mx-3"><button class="dropdown-item text-center"
                        hx-post={ t.Utils.LangLink("/blueprint/course/" + code) }
                        hx-vals={ `"year": ` + strconv.Itoa(year) + `, "semester": 1"` }
                    >
                    { t.YearStr(year) + " " + t.WinterAssign }
                    </button></li>
                    <li class="mx-3"><button class="dropdown-item text-center"
                        hx-post={ t.Utils.LangLink("/blueprint/course/" + code) }
                        hx-vals={ `"year": ` + strconv.Itoa(year) + `, "semester": 2"` }
                    >
                    { t.YearStr(year) + " " + t.SummerAssign }
                    </button></li>
                }
            </ul>
        </div>
    </div>
}

templ courseCard(course *Course, t text) {
    <div
        class="card custom-card rounded-0"
        x-data="{ expanded: false, showButton: false, isHovered: false }"
        @mouseenter="isHovered = true"
        @mouseleave="isHovered = false"
        x-init="showButton = $refs.annotation.scrollHeight > 350"
    >
        <div class="card-header d-flex justify-content-between align-items-center">
            <h6 class="mb-0">{ course.Code }</h6>
            <small>{ semesterHoursExamsString(course, t) }</small>
            <small>{ t.Credits + ": " + strconv.Itoa(course.Credits) }</small>
        </div>
        <div class="card-body d-flex flex-column position-relative">
            @ribbon(course.BlueprintAssignments, t)
            <div
                :class="{ 'expanded': expanded, 'annotation-container': showButton }" :style="isHovered && { 'z-index': '100' }"
                x-ref="annotation"
            >
                <h5 class="card-title"><a class="link-body-emphasis link-offset-2 link-underline-opacity-0 link-underline-opacity-75-hover" href={ templ.URL(t.Utils.LangLink("/course/" + course.Code)) }>{ course.Name }</a></h5>
                <h6 class="card-subtitle mb-2 text-muted">{ course.Guarantors.string(t) }</h6>
                <p class="card-text annotation-text">{ course.Annotation.string() }</p>
            </div>
            <button class="btn btn-link text-secondary" @click="expanded = !expanded" x-show="showButton" x-text={ "expanded ? '" + t.ReadLess + "' : '" + t.ReadMore + "'" }></button>
            @blueprintAssignment(course.Code, t)
        </div>
    </div>
}

templ paginationIconButton(page int, icon string, cp *coursesPage, t text) {
    <li class="page-item">
        <div
            role="button"
            class="page-link"
            :class={ strconv.FormatBool(cp.page == page || page < 1 || page > cp.totalPages) + " && 'disabled'" }
            hx-get={ t.Utils.LangLink("/courses/search") }
            hx-vals={ `"` + pageParam + `": ` + strconv.Itoa(page) }
        >
            <i class={ icon }></i>
        </div>
    </li>
}

templ paginationNumberButton(page int, cp *coursesPage, t text) {
    <li class="page-item">
        <div
            role="button"
            class="page-link"
            :class={ strconv.FormatBool(cp.page == page) + " && 'active'" }
            hx-get={ t.Utils.LangLink("/courses/search") }
            hx-vals={ `"` + pageParam + `": ` + strconv.Itoa(page) }
        >
            { strconv.Itoa(page) }
        </div>
    </li>
}

templ loadMoreButton(newPageSize int, cp *coursesPage, t text) {
    <button
        class="btn btn-outline-primary"
        hx-get={ t.Utils.LangLink("/courses/search") }
        hx-vals={ `"` + hitsPerPageParam + `": ` + strconv.Itoa(newPageSize) }
        hx-target="#courses-page"
        hx-include="#filter-form, #search-form"
        hx-swap="outerHTML"
    >
        { t.LoadMore }
    </button>
}

templ threeDots() {
    <li class="page-item">
        <div class="page-link">
            <i class="bi bi-three-dots"></i>
        </div>
    </li>
}

templ pagination(cp *coursesPage, t text) {
    // disable pagination if loaded more courses
    if cp.pageSize == coursesPerPage {
        <div class="mt-3 d-flex justify-content-center">
            <ul
                class="pagination justify-content-center mt-3"
                hx-target="#courses-page"
                hx-include="#filter-form, #search-form"
                hx-swap="outerHTML show:window:top"
                hx-trigger="click"
            >
                @paginationIconButton(cp.page - 1, "bi bi-chevron-left", cp, t)
                @paginationNumberButton(1, cp, t)
                if cp.page > 4 {
                    @threeDots()
                }
                for i := max(2, cp.page - 2); i <= min(cp.page + 2, cp.totalPages - 1); i++ {
                    @paginationNumberButton(i, cp, t)
                }
                if cp.page < cp.totalPages - 3 {
                    @threeDots()
                }
                @paginationNumberButton(cp.totalPages, cp, t)
                @paginationIconButton(cp.page + 1, "bi bi-chevron-right", cp, t)
            </ul>
        </div>
    }
    // disable load more button if it is not the first page
    if cp.page == 1 {
        <div class="d-flex justify-content-center mt-3">
            @loadMoreButton(cp.pageSize + coursesPerPage, cp, t)
        </div>
    }
}

templ Courses(cp *coursesPage, t text) {
    <div id="courses">
        <div class="grid-cards">
            if cp.totalPages == 0 {
                <p>{ t.NoCoursesFound }</p>
            } else {
                for _, course := range cp.courses {
                    @courseCard(&course, t)
                }
            }
            // dummy cards for alignment
            for i := 0; i < 10; i++ {
                <div class="card custom-card border-0"></div>
            }
        </div>
        if cp.totalPages > 1 {
            @pagination(cp, t)
        }
    </div>
}

templ Content(coursesPage *coursesPage, t text) {
    // x-data is needed for x-bind:class to work
    <div id="courses-page" class="grid-page" x-data="{ searchInput: '' }" x-init={ "searchInput = '" + coursesPage.search + "';" }>
        <div class="filter border-end bg-light">
            @filterSection(coursesPage, t)
        </div>
        <div class="main-content">
            @search(coursesPage, t)
            @Courses(coursesPage, t)
        </div>
    </div>

    <script>
    document.addEventListener('DOMContentLoaded', function () {
        initializeTooltips();
        clearExpanded();
    });

    document.addEventListener('htmx:afterSwap', function () {
        initializeTooltips();
    });

    // bootstrap tooltip initialization
    function initializeTooltips() {
        const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle="tooltip"]')
        const tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl))
    };
    </script>
}

templ Page(coursesPage *coursesPage, t text) {
    @utils.Page(t.Utils.Courses, t.Utils) {
        @Content(coursesPage, t)
    }
}