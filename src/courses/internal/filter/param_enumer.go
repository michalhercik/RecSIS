// Code generated by "enumer -type=param -transform=snake"; DO NOT EDIT.

package filter

import (
	"fmt"
)

const _paramName = "start_semestersemester_countlecture_range_winterseminar_range_winterlecture_range_summerseminar_range_summercreditsfaculty_guarantorexam_typerange_unittaughttaught_langfacultycapacitymin_number"

var _paramIndex = [...]uint8{0, 14, 28, 48, 68, 88, 108, 115, 132, 141, 151, 157, 168, 175, 183, 193}

func (i Parameter) String() string {
	if i < 0 || i >= Parameter(len(_paramIndex)-1) {
		return fmt.Sprintf("param(%d)", i)
	}
	return _paramName[_paramIndex[i]:_paramIndex[i+1]]
}

var _paramValues = []Parameter{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}

var _paramNameToValueMap = map[string]Parameter{
	_paramName[0:14]:    0,
	_paramName[14:28]:   1,
	_paramName[28:48]:   2,
	_paramName[48:68]:   3,
	_paramName[68:88]:   4,
	_paramName[88:108]:  5,
	_paramName[108:115]: 6,
	_paramName[115:132]: 7,
	_paramName[132:141]: 8,
	_paramName[141:151]: 9,
	_paramName[151:157]: 10,
	_paramName[157:168]: 11,
	_paramName[168:175]: 12,
	_paramName[175:183]: 13,
	_paramName[183:193]: 14,
}

// paramString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func paramString(s string) (Parameter, error) {
	if val, ok := _paramNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to param values", s)
}

// paramValues returns all values of the enum
func paramValues() []Parameter {
	return _paramValues
}

// IsAparam returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Parameter) IsAparam() bool {
	for _, v := range _paramValues {
		if i == v {
			return true
		}
	}
	return false
}
