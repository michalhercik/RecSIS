package courses

import (
    "fmt"
    "net/url"
    
	"github.com/michalhercik/RecSIS/utils"
)

templ Content(coursesPage *coursesPage, t text) {
    <div id="courses-page" class="container" hx-indicator="#loader">
        <div class="row mx-0">
            <div id="filter-section" class="col-12 col-sm px-1 py-3 p-sm-3">
                @filterSection(coursesPage, t)
            </div>
            <div class="col-12 col-sm pt-0 pt-sm-4 px-0">
                @activeFilters(coursesPage, t)
                @Courses(coursesPage, t)
            </div>
        </div>
        <script defer src="/js/courses.js"></script>
    </div>
}

templ filterSection(cp *coursesPage, t text) {
    <div id="filters-wrapper">
        <form
            id="filter-form"
            hx-get={ t.language.LocalizeURL("/courses/search") }
            hx-target="#courses-page"
            hx-swap="outerHTML"
            hx-include="#search-form"
            hx-trigger="change"
            x-data="{ showFilters: window.innerWidth > 575.5, expandedFilters: JSON.parse(sessionStorage.getItem('expanded-filters')) || false }"
            @resize.window="showFilters = window.innerWidth > 575.5"
        >
            <div class="bg-filters rounded-5">
                <div x-cloak x-show="showFilters || expandedFilters">
                    <div class="px-4 px-sm-0 pb-4 pb-sm-0">
                        @filtersInternal(cp, t)
                    </div>
                </div>
                <div class="d-flex d-sm-none justify-content-center py-2 position-sticky bottom-0 bg-filters-buttons rounded-5 shadow-sm">
                    <a
                        type="button"
                        class="btn btn-submit-input-green d-inline my-2 bi bi-chevron-down"
                        @click="expandedFilters = !expandedFilters; sessionStorage.setItem('expanded-filters', expandedFilters); window.scrollTo({ top: 0, left: 0, behavior: 'instant' })"
                        x-text={ fmt.Sprintf("expandedFilters ? ' %s' : ' %s'", t.showResults, t.filterButton) }>
                    </a>
                </div>
            </div>
        </form>
        // move to the top of the page button
        <div id="move-to-filters-btn" class="d-none d-sm-flex justify-content-center mt-3">
            @moveToTopLink(t)
        </div>
    </div>
}

templ filtersInternal(cp *coursesPage, t text) {
    for category := range cp.facets {
        <div x-data={ fmt.Sprintf("{ expanded: JSON.parse(sessionStorage.getItem('expanded-%s')) || false }", category.ID()) }>
            // category title (with help icon)
            <div class="d-flex justify-content-start align-items-end">
                <p class="form-label fw-semibold mb-0 mt-2">{ category.Title() }</p>
                if category.Desc() != "" {
                    @helpIcon(category.Desc())
                }
            </div>
            // checkboxes with values
            for i, value := range category.IterWithFacets() {
                <div x-show={ fmt.Sprintf("expanded || %d < %d", i, category.DisplayedValueLimit()) }>
                    @checkboxInput(value.Prefix + category.ID(), value.ID, value.Title, value.Desc, value.Count, value.Checked)
                </div>
            }
            if limit := category.DisplayedValueLimit(); category.Size() > limit {
                // show more/less button
                <button
                    hx-ignore="true"
                    type="button"
                    class="btn btn-link text-secondary p-0"
                    x-text={ fmt.Sprintf("expanded ? '%s' : '%s %d'", t.showLess, t.showMore(category.Size() - limit), category.Size() - limit) }
                    @click={ fmt.Sprintf("expanded = !expanded; sessionStorage.setItem('expanded-%s', expanded)", category.ID()) }>
                </button>
            }
        </div>
    }
}

templ checkboxInput(name, value, label, desc string, count int, checked bool) {
    <div class="form-check">
        <input role="button" class="form-check-input" disabled?={ count == 0 }
            type="checkbox" name={ name } id={ name + "-" + value } value={ value } checked?={ checked }>
        <label role="button" class="form-check-label" for={ name + "-" + value }>
            <span>{ label }</span>
            if desc != "" {
                @helpIcon(desc)
            }
            <span class="text-muted small">{ fmt.Sprintf("(%d)", count) }</span>
        </label>
    </div>
}

templ moveToTopLink(t text) {
    <a
        href="#"
        class="icon-link">
        <i class="bi bi-chevron-up lh-1 my-auto"></i>
        { t.topFilter }
    </a>
}

templ helpIcon(content string) {
    <i
        x-data="{ hoverHelp: false }"
        class="mx-1 cursor-help bi"
        :class="hoverHelp ? 'bi-question-circle-fill' : 'bi-question-circle'"
        @mouseover="hoverHelp = true"
        @mouseleave="hoverHelp = false"
        data-bs-toggle="tooltip"
        data-bs-placement="right"
        data-bs-delay="200"
        data-bs-title={ content }>
    </i>
}

templ activeFilters(cp *coursesPage, t text) {
    <div id="active-filters">
        {{ anyActive := false }}
        for category := range cp.facets {
            if category.Active() {
                {{ anyActive = true }}
                <div class="d-flex flex-row mb-1 w-auto">
                    <span class="px-2 bg-body border rounded-start align-self-start">{ category.Title() }</span>
                    <div class="d-flex flex-row flex-wrap rounded-row-end">
                    for _, value := range category.IterWithFacets() {
                        if value.Checked {
                            // x-data is necessary for x-on:click to work
                            <div class="border bg-light px-2" x-data>
                                <span class="fw-semibold">{ value.Title }</span>
                                <i
                                    role="button"
                                    class="bi bi-x-lg"
                                    @click={ fmt.Sprintf("uncheck('%s%s-%s')", value.Prefix, category.ID(), value.ID) }>
                                </i>
                            </div>
                        }
                    }
                    </div>
                </div>
            }
        }
        if anyActive {
            <button
                class="btn btn-link text-secondary p-0 pb-3"
                hx-get={ t.language.LocalizeURL("/courses/search") }
                hx-target="#courses-page"
                hx-include="#search-form"
                hx-swap="outerHTML show:window:top">
                { t.cancelFilters }
            </button>
        }
    </div>
}

templ Courses(cp *coursesPage, t text) {
    <div id="courses">
        <div class="row row-cols-1 row-cols-md-2 row-cols-xl-3 row-cols-xxl-4 g-0">
            if cp.totalPages == 0 {
                <p>{ t.noCoursesFound }</p>
            } else {
                for _, course := range cp.courses {
                    @CourseCard(&course, t, cp.bpBtn)
                }
            }
            // dummy cards for alignment
            for i := 0; i < 10; i++ {
                <div class="card custom-card border-0"></div>
            }
        </div>
        if cp.totalPages > 1 {
            @pagination(cp, t)
        }
    </div>
}

templ CourseCard(course *course, t text, addBtn PartialBlueprintAdd) {
    <div
        id={ fmt.Sprintf("course-card-%s", course.code) }
        class="card col rounded-0 px-0 mb-0"
        x-data="{ expanded: false, isLong: false }"
        x-init="isLong = $refs.annotation.scrollHeight > 300; $nextTick(() => requestAnimationFrame(() => { isLong = $refs.annotation.scrollHeight > 300 }))"
    >
        // header
        <div class="card-header d-flex justify-content-between align-items-center">
            <h6 class="mb-0">{ course.code }</h6> // code
            <small> // semester, hours, exams
                { fmt.Sprintf("%s %s, %s", course.semester.string(t), course.hoursString(), course.examType) }
            </small>
            <small> // credits
                { fmt.Sprintf("%s: %d", t.credits, course.credits) }
            </small>
        </div>
        // body
        <div class="card-body d-flex flex-column position-relative">
            <div
                :class="{ 'expanded': expanded, 'annotation-container': isLong }"
                x-ref="annotation"
            >
                // course title (link to detail page)
                <h5 class="card-title">
                    @utils.TitleCourseLink(course.code, course.title, false, t.language)
                </h5>
                // guarantors
                <h6 class="card-subtitle mb-2 text-muted">{ course.guarantors.string(t) }</h6>
                // course description (annotation)
                <p class="card-text annotation-text">{ course.annotation.string() }</p>
            </div>
            // show rest/less of annotation button
            <button
                class="btn btn-link text-secondary"
                @click="expanded = !expanded"
                x-show="isLong"
                x-text={ fmt.Sprintf("expanded ? '%s' : '%s'", t.readLess, t.readMore) }>
            </button>
            // status badges
            <div class="d-flex flex-wrap mt-auto pt-3 pb-1">
                for _, ba := range course.blueprintAssignments.Sort() {
                    @badge(course, ba, t)
                }
                // TODO: add degree plan and completed badges
            </div>
            // add to blueprint button
            <div class="d-flex justify-content-end">
                @addBtn("outerHTML", "#course-card-" + course.code, "", course.blueprintSemesters, course.code)
            </div>
        </div>
    </div>
}

templ badge(course *course, ba assignment, t text) {
    if ba.year == 0 {
        @clickableBadge("blueprint", fmt.Sprintf("bp-unassigned-row-%s", course.code), "bg-unassigned", t) {
            { ba.string(t.language) }
        }
    } else {
        @clickableBadge("blueprint", fmt.Sprintf("bp-%d-%s-row-%s", ba.year, ba.semester.stringID(), course.code), "bg-blueprint", t) {
            { ba.string(t.language) }
        }
    }
}

templ clickableBadge(target, fragment, bgColor string, t text) {
    <a
        role="button"
        hx-boost="false"
        class={ "badge rounded-pill me-1 mb-1", bgColor }
        href={ templ.SafeURL(fmt.Sprintf("%s/#%s", t.language.LocalizeURL(target), url.PathEscape(fragment))) }>
        { children... }
    </a>
}

// TODO: keep this for later usage (if not used, remove it)
// templ ribbon(ba AssignmentSlice, t text) {
//     if len(ba) > 0 {
//         <div class="ribbon">
//             <span>{ ba.String(t.language) }</span>
//         </div>
//     }
// }

templ pagination(cp *coursesPage, t text) {
    // disable pagination if loaded more courses
    if cp.pageSize == coursesPerPage {
        <div class="mt-3 d-flex justify-content-center">
            <ul
                class="pagination mt-3"
                hx-target="#courses-page"
                hx-include="#filter-form, #search-form"
                hx-swap="outerHTML show:window:top"
                hx-trigger="click"
            >
                @paginationIconButton(cp.page - 1, "bi bi-chevron-left", cp, t)
                @paginationNumberButton(1, cp, t)
                if cp.page > 4 {
                    @threeDots()
                }
                for i := max(2, cp.page - 2); i <= min(cp.page + 2, cp.totalPages - 1); i++ {
                    @paginationNumberButton(i, cp, t)
                }
                if cp.page < cp.totalPages - 3 {
                    @threeDots()
                }
                @paginationNumberButton(cp.totalPages, cp, t)
                @paginationIconButton(cp.page + 1, "bi bi-chevron-right", cp, t)
            </ul>
        </div>
    }
    // disable load more button if it is not the first page
    if cp.page == 1 {
        <div class="mt-3 d-flex justify-content-center">
            @loadMoreButton(cp.pageSize + coursesPerPage, cp, t)
        </div>
    }
}

templ paginationIconButton(page int, icon string, cp *coursesPage, t text) {
    <li class="page-item">
        <div
            role="button"
            class={ "page-link", templ.KV("disabled", cp.page == page || page < 1 || page > cp.totalPages) }
            hx-get={ t.language.LocalizeURL("/courses/search") }
            hx-vals={ fmt.Sprintf(`"%s": %d`, pageParam, page) }
        >
            <i class={ icon }></i>
        </div>
    </li>
}

templ paginationNumberButton(page int, cp *coursesPage, t text) {
    <li class="page-item">
        <div
            role="button"
            class={ "page-link", templ.KV("active", cp.page == page) }
            hx-get={ t.language.LocalizeURL("/courses/search") }
            hx-vals={ fmt.Sprintf(`"%s": %d`, pageParam, page) }
        >
            { fmt.Sprintf("%d", page) }
        </div>
    </li>
}

templ threeDots() {
    <li class="page-item">
        <div class="page-link">
            <i class="bi bi-three-dots"></i>
        </div>
    </li>
}

templ loadMoreButton(newPageSize int, cp *coursesPage, t text) {
    <button
        class="btn btn-outline-primary"
        hx-get={ t.language.LocalizeURL("/courses/search") }
        hx-target="#courses-page"
        hx-include="#filter-form, #search-form"
        hx-swap="outerHTML"
        hx-vals={ fmt.Sprintf(`"%s": %d`, hitsPerPageParam, newPageSize) }
    >
        { t.loadMore }
    </button>
}